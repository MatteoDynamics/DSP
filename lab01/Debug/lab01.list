
lab01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001140c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080115d4  080115d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801160c  0801160c  000131bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801160c  0801160c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011614  08011614  000131bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011614  08011614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011618  08011618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0801161c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  08011698  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  08011738  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000013c4  200001bc  080117d8  000131bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001580  080117d8  00013580  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000131bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a4a2  00000000  00000000  000131ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008eb9  00000000  00000000  0004d68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002f30  00000000  00000000  00056548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002437  00000000  00000000  00059478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037694  00000000  00000000  0005b8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047505  00000000  00000000  00092f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123142  00000000  00000000  000da448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001fd58a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c7d4  00000000  00000000  001fd5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000050  00000000  00000000  00209da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001bc 	.word	0x200001bc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080115bc 	.word	0x080115bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001c0 	.word	0x200001c0
 8000204:	080115bc 	.word	0x080115bc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b988 	b.w	8000530 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	468e      	mov	lr, r1
 8000240:	4604      	mov	r4, r0
 8000242:	4688      	mov	r8, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d962      	bls.n	8000314 <__udivmoddi4+0xdc>
 800024e:	fab2 f682 	clz	r6, r2
 8000252:	b14e      	cbz	r6, 8000268 <__udivmoddi4+0x30>
 8000254:	f1c6 0320 	rsb	r3, r6, #32
 8000258:	fa01 f806 	lsl.w	r8, r1, r6
 800025c:	fa20 f303 	lsr.w	r3, r0, r3
 8000260:	40b7      	lsls	r7, r6
 8000262:	ea43 0808 	orr.w	r8, r3, r8
 8000266:	40b4      	lsls	r4, r6
 8000268:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026c:	fa1f fc87 	uxth.w	ip, r7
 8000270:	fbb8 f1fe 	udiv	r1, r8, lr
 8000274:	0c23      	lsrs	r3, r4, #16
 8000276:	fb0e 8811 	mls	r8, lr, r1, r8
 800027a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027e:	fb01 f20c 	mul.w	r2, r1, ip
 8000282:	429a      	cmp	r2, r3
 8000284:	d909      	bls.n	800029a <__udivmoddi4+0x62>
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	f101 30ff 	add.w	r0, r1, #4294967295
 800028c:	f080 80ea 	bcs.w	8000464 <__udivmoddi4+0x22c>
 8000290:	429a      	cmp	r2, r3
 8000292:	f240 80e7 	bls.w	8000464 <__udivmoddi4+0x22c>
 8000296:	3902      	subs	r1, #2
 8000298:	443b      	add	r3, r7
 800029a:	1a9a      	subs	r2, r3, r2
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ae:	459c      	cmp	ip, r3
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0x8e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b8:	f080 80d6 	bcs.w	8000468 <__udivmoddi4+0x230>
 80002bc:	459c      	cmp	ip, r3
 80002be:	f240 80d3 	bls.w	8000468 <__udivmoddi4+0x230>
 80002c2:	443b      	add	r3, r7
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ca:	eba3 030c 	sub.w	r3, r3, ip
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa2>
 80002d2:	40f3      	lsrs	r3, r6
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xb6>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb0>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa2>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x14c>
 80002f6:	4573      	cmp	r3, lr
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xc8>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 8105 	bhi.w	800050a <__udivmoddi4+0x2d2>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb6e 0203 	sbc.w	r2, lr, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4690      	mov	r8, r2
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e5      	beq.n	80002da <__udivmoddi4+0xa2>
 800030e:	e9c5 4800 	strd	r4, r8, [r5]
 8000312:	e7e2      	b.n	80002da <__udivmoddi4+0xa2>
 8000314:	2a00      	cmp	r2, #0
 8000316:	f000 8090 	beq.w	800043a <__udivmoddi4+0x202>
 800031a:	fab2 f682 	clz	r6, r2
 800031e:	2e00      	cmp	r6, #0
 8000320:	f040 80a4 	bne.w	800046c <__udivmoddi4+0x234>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800032c:	b280      	uxth	r0, r0
 800032e:	b2bc      	uxth	r4, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb2 fcfe 	udiv	ip, r2, lr
 8000336:	fb0e 221c 	mls	r2, lr, ip, r2
 800033a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033e:	fb04 f20c 	mul.w	r2, r4, ip
 8000342:	429a      	cmp	r2, r3
 8000344:	d907      	bls.n	8000356 <__udivmoddi4+0x11e>
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	f10c 38ff 	add.w	r8, ip, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x11c>
 800034e:	429a      	cmp	r2, r3
 8000350:	f200 80e0 	bhi.w	8000514 <__udivmoddi4+0x2dc>
 8000354:	46c4      	mov	ip, r8
 8000356:	1a9b      	subs	r3, r3, r2
 8000358:	fbb3 f2fe 	udiv	r2, r3, lr
 800035c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000360:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000364:	fb02 f404 	mul.w	r4, r2, r4
 8000368:	429c      	cmp	r4, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x144>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x142>
 8000374:	429c      	cmp	r4, r3
 8000376:	f200 80ca 	bhi.w	800050e <__udivmoddi4+0x2d6>
 800037a:	4602      	mov	r2, r0
 800037c:	1b1b      	subs	r3, r3, r4
 800037e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x98>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa0e f401 	lsl.w	r4, lr, r1
 8000394:	fa20 f306 	lsr.w	r3, r0, r6
 8000398:	fa2e fe06 	lsr.w	lr, lr, r6
 800039c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	fa1f fc87 	uxth.w	ip, r7
 80003aa:	fbbe f0f9 	udiv	r0, lr, r9
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003bc:	45a6      	cmp	lr, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1a0>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ca:	f080 809c 	bcs.w	8000506 <__udivmoddi4+0x2ce>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f240 8099 	bls.w	8000506 <__udivmoddi4+0x2ce>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	fa1f fe83 	uxth.w	lr, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f0:	45a4      	cmp	ip, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1ce>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003fa:	f080 8082 	bcs.w	8000502 <__udivmoddi4+0x2ca>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d97f      	bls.n	8000502 <__udivmoddi4+0x2ca>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000412:	4564      	cmp	r4, ip
 8000414:	4673      	mov	r3, lr
 8000416:	46e1      	mov	r9, ip
 8000418:	d362      	bcc.n	80004e0 <__udivmoddi4+0x2a8>
 800041a:	d05f      	beq.n	80004dc <__udivmoddi4+0x2a4>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x1fe>
 800041e:	ebb8 0203 	subs.w	r2, r8, r3
 8000422:	eb64 0409 	sbc.w	r4, r4, r9
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	fa22 f301 	lsr.w	r3, r2, r1
 800042e:	431e      	orrs	r6, r3
 8000430:	40cc      	lsrs	r4, r1
 8000432:	e9c5 6400 	strd	r6, r4, [r5]
 8000436:	2100      	movs	r1, #0
 8000438:	e74f      	b.n	80002da <__udivmoddi4+0xa2>
 800043a:	fbb1 fcf2 	udiv	ip, r1, r2
 800043e:	0c01      	lsrs	r1, r0, #16
 8000440:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000444:	b280      	uxth	r0, r0
 8000446:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800044a:	463b      	mov	r3, r7
 800044c:	4638      	mov	r0, r7
 800044e:	463c      	mov	r4, r7
 8000450:	46b8      	mov	r8, r7
 8000452:	46be      	mov	lr, r7
 8000454:	2620      	movs	r6, #32
 8000456:	fbb1 f1f7 	udiv	r1, r1, r7
 800045a:	eba2 0208 	sub.w	r2, r2, r8
 800045e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000462:	e766      	b.n	8000332 <__udivmoddi4+0xfa>
 8000464:	4601      	mov	r1, r0
 8000466:	e718      	b.n	800029a <__udivmoddi4+0x62>
 8000468:	4610      	mov	r0, r2
 800046a:	e72c      	b.n	80002c6 <__udivmoddi4+0x8e>
 800046c:	f1c6 0220 	rsb	r2, r6, #32
 8000470:	fa2e f302 	lsr.w	r3, lr, r2
 8000474:	40b7      	lsls	r7, r6
 8000476:	40b1      	lsls	r1, r6
 8000478:	fa20 f202 	lsr.w	r2, r0, r2
 800047c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000480:	430a      	orrs	r2, r1
 8000482:	fbb3 f8fe 	udiv	r8, r3, lr
 8000486:	b2bc      	uxth	r4, r7
 8000488:	fb0e 3318 	mls	r3, lr, r8, r3
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb08 f904 	mul.w	r9, r8, r4
 8000496:	40b0      	lsls	r0, r6
 8000498:	4589      	cmp	r9, r1
 800049a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049e:	b280      	uxth	r0, r0
 80004a0:	d93e      	bls.n	8000520 <__udivmoddi4+0x2e8>
 80004a2:	1879      	adds	r1, r7, r1
 80004a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x276>
 80004aa:	4589      	cmp	r9, r1
 80004ac:	d81f      	bhi.n	80004ee <__udivmoddi4+0x2b6>
 80004ae:	eba1 0109 	sub.w	r1, r1, r9
 80004b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b6:	fb09 f804 	mul.w	r8, r9, r4
 80004ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80004be:	b292      	uxth	r2, r2
 80004c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d229      	bcs.n	800051c <__udivmoddi4+0x2e4>
 80004c8:	18ba      	adds	r2, r7, r2
 80004ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ce:	d2c4      	bcs.n	800045a <__udivmoddi4+0x222>
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d2c2      	bcs.n	800045a <__udivmoddi4+0x222>
 80004d4:	f1a9 0102 	sub.w	r1, r9, #2
 80004d8:	443a      	add	r2, r7
 80004da:	e7be      	b.n	800045a <__udivmoddi4+0x222>
 80004dc:	45f0      	cmp	r8, lr
 80004de:	d29d      	bcs.n	800041c <__udivmoddi4+0x1e4>
 80004e0:	ebbe 0302 	subs.w	r3, lr, r2
 80004e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e8:	3801      	subs	r0, #1
 80004ea:	46e1      	mov	r9, ip
 80004ec:	e796      	b.n	800041c <__udivmoddi4+0x1e4>
 80004ee:	eba7 0909 	sub.w	r9, r7, r9
 80004f2:	4449      	add	r1, r9
 80004f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fc:	fb09 f804 	mul.w	r8, r9, r4
 8000500:	e7db      	b.n	80004ba <__udivmoddi4+0x282>
 8000502:	4673      	mov	r3, lr
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1ce>
 8000506:	4650      	mov	r0, sl
 8000508:	e766      	b.n	80003d8 <__udivmoddi4+0x1a0>
 800050a:	4608      	mov	r0, r1
 800050c:	e6fd      	b.n	800030a <__udivmoddi4+0xd2>
 800050e:	443b      	add	r3, r7
 8000510:	3a02      	subs	r2, #2
 8000512:	e733      	b.n	800037c <__udivmoddi4+0x144>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	443b      	add	r3, r7
 800051a:	e71c      	b.n	8000356 <__udivmoddi4+0x11e>
 800051c:	4649      	mov	r1, r9
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x222>
 8000520:	eba1 0109 	sub.w	r1, r1, r9
 8000524:	46c4      	mov	ip, r8
 8000526:	fbb1 f9fe 	udiv	r9, r1, lr
 800052a:	fb09 f804 	mul.w	r8, r9, r4
 800052e:	e7c4      	b.n	80004ba <__udivmoddi4+0x282>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800053a:	463b      	mov	r3, r7
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000546:	4b21      	ldr	r3, [pc, #132]	@ (80005cc <MX_ADC3_Init+0x98>)
 8000548:	4a21      	ldr	r2, [pc, #132]	@ (80005d0 <MX_ADC3_Init+0x9c>)
 800054a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800054c:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <MX_ADC3_Init+0x98>)
 800054e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000552:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000554:	4b1d      	ldr	r3, [pc, #116]	@ (80005cc <MX_ADC3_Init+0x98>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800055a:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <MX_ADC3_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000560:	4b1a      	ldr	r3, [pc, #104]	@ (80005cc <MX_ADC3_Init+0x98>)
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <MX_ADC3_Init+0x98>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056e:	4b17      	ldr	r3, [pc, #92]	@ (80005cc <MX_ADC3_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000574:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <MX_ADC3_Init+0x98>)
 8000576:	4a17      	ldr	r2, [pc, #92]	@ (80005d4 <MX_ADC3_Init+0xa0>)
 8000578:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057a:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <MX_ADC3_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <MX_ADC3_Init+0x98>)
 8000582:	2201      	movs	r2, #1
 8000584:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000586:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_ADC3_Init+0x98>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058e:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <MX_ADC3_Init+0x98>)
 8000590:	2201      	movs	r2, #1
 8000592:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <MX_ADC3_Init+0x98>)
 8000596:	f002 fc41 	bl	8002e1c <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80005a0:	f001 f8f6 	bl	8001790 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	4619      	mov	r1, r3
 80005b4:	4805      	ldr	r0, [pc, #20]	@ (80005cc <MX_ADC3_Init+0x98>)
 80005b6:	f002 fc75 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80005c0:	f001 f8e6 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200001d8 	.word	0x200001d8
 80005d0:	40012200 	.word	0x40012200
 80005d4:	0f000001 	.word	0x0f000001

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	@ 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <HAL_ADC_MspInit+0xa4>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d13c      	bne.n	8000674 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <HAL_ADC_MspInit+0xa8>)
 80005fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005fe:	4a20      	ldr	r2, [pc, #128]	@ (8000680 <HAL_ADC_MspInit+0xa8>)
 8000600:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000604:	6453      	str	r3, [r2, #68]	@ 0x44
 8000606:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <HAL_ADC_MspInit+0xa8>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800060a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <HAL_ADC_MspInit+0xa8>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a1a      	ldr	r2, [pc, #104]	@ (8000680 <HAL_ADC_MspInit+0xa8>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <HAL_ADC_MspInit+0xa8>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <HAL_ADC_MspInit+0xa8>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a14      	ldr	r2, [pc, #80]	@ (8000680 <HAL_ADC_MspInit+0xa8>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_ADC_MspInit+0xa8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000642:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000646:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000648:	2303      	movs	r3, #3
 800064a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <HAL_ADC_MspInit+0xac>)
 8000658:	f003 ffba 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000660:	2303      	movs	r3, #3
 8000662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <HAL_ADC_MspInit+0xb0>)
 8000670:	f003 ffae 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	@ 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40012200 	.word	0x40012200
 8000680:	40023800 	.word	0x40023800
 8000684:	40021400 	.word	0x40021400
 8000688:	40020000 	.word	0x40020000

0800068c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000690:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <MX_CRC_Init+0x3c>)
 8000692:	4a0e      	ldr	r2, [pc, #56]	@ (80006cc <MX_CRC_Init+0x40>)
 8000694:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_CRC_Init+0x3c>)
 8000698:	2200      	movs	r2, #0
 800069a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <MX_CRC_Init+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_CRC_Init+0x3c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <MX_CRC_Init+0x3c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_CRC_Init+0x3c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <MX_CRC_Init+0x3c>)
 80006b6:	f002 ff27 	bl	8003508 <HAL_CRC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006c0:	f001 f866 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000220 	.word	0x20000220
 80006cc:	40023000 	.word	0x40023000

080006d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <HAL_CRC_MspInit+0x38>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d10b      	bne.n	80006fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006e2:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <HAL_CRC_MspInit+0x3c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a09      	ldr	r2, [pc, #36]	@ (800070c <HAL_CRC_MspInit+0x3c>)
 80006e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <HAL_CRC_MspInit+0x3c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023000 	.word	0x40023000
 800070c:	40023800 	.word	0x40023800

08000710 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <MX_DCMI_Init+0x60>)
 8000716:	4a17      	ldr	r2, [pc, #92]	@ (8000774 <MX_DCMI_Init+0x64>)
 8000718:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_DCMI_Init+0x60>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_DCMI_Init+0x60>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000726:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_DCMI_Init+0x60>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_DCMI_Init+0x60>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_DCMI_Init+0x60>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <MX_DCMI_Init+0x60>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_DCMI_Init+0x60>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_DCMI_Init+0x60>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_DCMI_Init+0x60>)
 800074c:	2200      	movs	r2, #0
 800074e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_DCMI_Init+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_DCMI_Init+0x60>)
 8000758:	2200      	movs	r2, #0
 800075a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_DCMI_Init+0x60>)
 800075e:	f002 ffc5 	bl	80036ec <HAL_DCMI_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000768:	f001 f812 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000244 	.word	0x20000244
 8000774:	50050000 	.word	0x50050000

08000778 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08e      	sub	sp, #56	@ 0x38
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a50      	ldr	r2, [pc, #320]	@ (80008d8 <HAL_DCMI_MspInit+0x160>)
 8000796:	4293      	cmp	r3, r2
 8000798:	f040 809a 	bne.w	80008d0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800079c:	4b4f      	ldr	r3, [pc, #316]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 800079e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007a0:	4a4e      	ldr	r2, [pc, #312]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6353      	str	r3, [r2, #52]	@ 0x34
 80007a8:	4b4c      	ldr	r3, [pc, #304]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b4:	4b49      	ldr	r3, [pc, #292]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b8:	4a48      	ldr	r2, [pc, #288]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c0:	4b46      	ldr	r3, [pc, #280]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c4:	f003 0310 	and.w	r3, r3, #16
 80007c8:	61fb      	str	r3, [r7, #28]
 80007ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007cc:	4b43      	ldr	r3, [pc, #268]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d0:	4a42      	ldr	r2, [pc, #264]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d8:	4b40      	ldr	r3, [pc, #256]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007dc:	f003 0308 	and.w	r3, r3, #8
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e4:	4b3d      	ldr	r3, [pc, #244]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e8:	4a3c      	ldr	r2, [pc, #240]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f0:	4b3a      	ldr	r3, [pc, #232]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fc:	4b37      	ldr	r3, [pc, #220]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000800:	4a36      	ldr	r2, [pc, #216]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 8000802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000806:	6313      	str	r3, [r2, #48]	@ 0x30
 8000808:	4b34      	ldr	r3, [pc, #208]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b31      	ldr	r3, [pc, #196]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000818:	4a30      	ldr	r2, [pc, #192]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000820:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <HAL_DCMI_MspInit+0x164>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800082c:	2360      	movs	r3, #96	@ 0x60
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800083c:	230d      	movs	r3, #13
 800083e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000844:	4619      	mov	r1, r3
 8000846:	4826      	ldr	r0, [pc, #152]	@ (80008e0 <HAL_DCMI_MspInit+0x168>)
 8000848:	f003 fec2 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800084c:	2308      	movs	r3, #8
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800085c:	230d      	movs	r3, #13
 800085e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000864:	4619      	mov	r1, r3
 8000866:	481f      	ldr	r0, [pc, #124]	@ (80008e4 <HAL_DCMI_MspInit+0x16c>)
 8000868:	f003 feb2 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800086c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800087e:	230d      	movs	r3, #13
 8000880:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000886:	4619      	mov	r1, r3
 8000888:	4817      	ldr	r0, [pc, #92]	@ (80008e8 <HAL_DCMI_MspInit+0x170>)
 800088a:	f003 fea1 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800088e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008a0:	230d      	movs	r3, #13
 80008a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a8:	4619      	mov	r1, r3
 80008aa:	4810      	ldr	r0, [pc, #64]	@ (80008ec <HAL_DCMI_MspInit+0x174>)
 80008ac:	f003 fe90 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80008b0:	2350      	movs	r3, #80	@ 0x50
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008c0:	230d      	movs	r3, #13
 80008c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <HAL_DCMI_MspInit+0x178>)
 80008cc:	f003 fe80 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	3738      	adds	r7, #56	@ 0x38
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	50050000 	.word	0x50050000
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40021800 	.word	0x40021800
 80008ec:	40021c00 	.word	0x40021c00
 80008f0:	40020000 	.word	0x40020000

080008f4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 80008fa:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <MX_DMA2D_Init+0x60>)
 80008fc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 800091e:	2200      	movs	r2, #0
 8000920:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000928:	4809      	ldr	r0, [pc, #36]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 800092a:	f003 f917 	bl	8003b5c <HAL_DMA2D_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000934:	f000 ff2c 	bl	8001790 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000938:	2101      	movs	r1, #1
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 800093c:	f003 fa68 	bl	8003e10 <HAL_DMA2D_ConfigLayer>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000946:	f000 ff23 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000294 	.word	0x20000294
 8000954:	4002b000 	.word	0x4002b000

08000958 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <HAL_DMA2D_MspInit+0x44>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d113      	bne.n	8000992 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_DMA2D_MspInit+0x48>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <HAL_DMA2D_MspInit+0x48>)
 8000970:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_DMA2D_MspInit+0x48>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	205a      	movs	r0, #90	@ 0x5a
 8000988:	f002 fd94 	bl	80034b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800098c:	205a      	movs	r0, #90	@ 0x5a
 800098e:	f002 fdad 	bl	80034ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	4002b000 	.word	0x4002b000
 80009a0:	40023800 	.word	0x40023800

080009a4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_ETH_Init+0x84>)
 80009aa:	4a20      	ldr	r2, [pc, #128]	@ (8000a2c <MX_ETH_Init+0x88>)
 80009ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <MX_ETH_Init+0x8c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <MX_ETH_Init+0x8c>)
 80009b6:	2280      	movs	r2, #128	@ 0x80
 80009b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <MX_ETH_Init+0x8c>)
 80009bc:	22e1      	movs	r2, #225	@ 0xe1
 80009be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <MX_ETH_Init+0x8c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_ETH_Init+0x8c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <MX_ETH_Init+0x8c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_ETH_Init+0x84>)
 80009d4:	4a16      	ldr	r2, [pc, #88]	@ (8000a30 <MX_ETH_Init+0x8c>)
 80009d6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009d8:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_ETH_Init+0x84>)
 80009da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009de:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_ETH_Init+0x84>)
 80009e2:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <MX_ETH_Init+0x90>)
 80009e4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <MX_ETH_Init+0x84>)
 80009e8:	4a13      	ldr	r2, [pc, #76]	@ (8000a38 <MX_ETH_Init+0x94>)
 80009ea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_ETH_Init+0x84>)
 80009ee:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80009f2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009f4:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <MX_ETH_Init+0x84>)
 80009f6:	f003 fa9d 	bl	8003f34 <HAL_ETH_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a00:	f000 fec6 	bl	8001790 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a04:	2238      	movs	r2, #56	@ 0x38
 8000a06:	2100      	movs	r1, #0
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <MX_ETH_Init+0x98>)
 8000a0a:	f010 fd49 	bl	80114a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_ETH_Init+0x98>)
 8000a10:	2221      	movs	r2, #33	@ 0x21
 8000a12:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_ETH_Init+0x98>)
 8000a16:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a1a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_ETH_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000030c 	.word	0x2000030c
 8000a2c:	40028000 	.word	0x40028000
 8000a30:	200003bc 	.word	0x200003bc
 8000a34:	2000011c 	.word	0x2000011c
 8000a38:	2000007c 	.word	0x2000007c
 8000a3c:	200002d4 	.word	0x200002d4

08000a40 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	@ 0x38
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a3f      	ldr	r2, [pc, #252]	@ (8000b5c <HAL_ETH_MspInit+0x11c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d178      	bne.n	8000b54 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a62:	4b3f      	ldr	r3, [pc, #252]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a3e      	ldr	r2, [pc, #248]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000a68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a76:	623b      	str	r3, [r7, #32]
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	4b39      	ldr	r3, [pc, #228]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a38      	ldr	r2, [pc, #224]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000a80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b36      	ldr	r3, [pc, #216]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	4b33      	ldr	r3, [pc, #204]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a32      	ldr	r2, [pc, #200]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000a98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b30      	ldr	r3, [pc, #192]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a2c      	ldr	r2, [pc, #176]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a26      	ldr	r2, [pc, #152]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a20      	ldr	r2, [pc, #128]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <HAL_ETH_MspInit+0x120>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000af2:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b04:	230b      	movs	r3, #11
 8000b06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4815      	ldr	r0, [pc, #84]	@ (8000b64 <HAL_ETH_MspInit+0x124>)
 8000b10:	f003 fd5e 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b14:	2332      	movs	r3, #50	@ 0x32
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b24:	230b      	movs	r3, #11
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480e      	ldr	r0, [pc, #56]	@ (8000b68 <HAL_ETH_MspInit+0x128>)
 8000b30:	f003 fd4e 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b34:	2386      	movs	r3, #134	@ 0x86
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b44:	230b      	movs	r3, #11
 8000b46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <HAL_ETH_MspInit+0x12c>)
 8000b50:	f003 fd3e 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000b54:	bf00      	nop
 8000b56:	3738      	adds	r7, #56	@ 0x38
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40028000 	.word	0x40028000
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40021800 	.word	0x40021800
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
 8000b84:	615a      	str	r2, [r3, #20]
 8000b86:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000b8a:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <MX_FMC_Init+0x9c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000ba2:	2210      	movs	r2, #16
 8000ba4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000ba8:	2240      	movs	r2, #64	@ 0x40
 8000baa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000bae:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000bb2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000bbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bc0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000bc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000be0:	2303      	movs	r3, #3
 8000be2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_FMC_Init+0x98>)
 8000bf2:	f009 feae 	bl	800a952 <HAL_SDRAM_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000bfc:	f000 fdc8 	bl	8001790 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c00:	bf00      	nop
 8000c02:	3720      	adds	r7, #32
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200003c4 	.word	0x200003c4
 8000c0c:	a0000140 	.word	0xa0000140

08000c10 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c24:	4b3a      	ldr	r3, [pc, #232]	@ (8000d10 <HAL_FMC_MspInit+0x100>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d16d      	bne.n	8000d08 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000c2c:	4b38      	ldr	r3, [pc, #224]	@ (8000d10 <HAL_FMC_MspInit+0x100>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c32:	4b38      	ldr	r3, [pc, #224]	@ (8000d14 <HAL_FMC_MspInit+0x104>)
 8000c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c36:	4a37      	ldr	r2, [pc, #220]	@ (8000d14 <HAL_FMC_MspInit+0x104>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c3e:	4b35      	ldr	r3, [pc, #212]	@ (8000d14 <HAL_FMC_MspInit+0x104>)
 8000c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000c4a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000c4e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	482c      	ldr	r0, [pc, #176]	@ (8000d18 <HAL_FMC_MspInit+0x108>)
 8000c66:	f003 fcb3 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000c6a:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000c6e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4825      	ldr	r0, [pc, #148]	@ (8000d1c <HAL_FMC_MspInit+0x10c>)
 8000c86:	f003 fca3 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c8a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000c8e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	481e      	ldr	r0, [pc, #120]	@ (8000d20 <HAL_FMC_MspInit+0x110>)
 8000ca6:	f003 fc93 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000caa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000cae:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4817      	ldr	r0, [pc, #92]	@ (8000d24 <HAL_FMC_MspInit+0x114>)
 8000cc6:	f003 fc83 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000cca:	2328      	movs	r3, #40	@ 0x28
 8000ccc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cda:	230c      	movs	r3, #12
 8000cdc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4811      	ldr	r0, [pc, #68]	@ (8000d28 <HAL_FMC_MspInit+0x118>)
 8000ce4:	f003 fc74 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480a      	ldr	r0, [pc, #40]	@ (8000d2c <HAL_FMC_MspInit+0x11c>)
 8000d02:	f003 fc65 	bl	80045d0 <HAL_GPIO_Init>
 8000d06:	e000      	b.n	8000d0a <HAL_FMC_MspInit+0xfa>
    return;
 8000d08:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200003f8 	.word	0x200003f8
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40021800 	.word	0x40021800
 8000d20:	40020c00 	.word	0x40020c00
 8000d24:	40021400 	.word	0x40021400
 8000d28:	40021c00 	.word	0x40021c00
 8000d2c:	40020800 	.word	0x40020800

08000d30 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d38:	f7ff ff6a 	bl	8000c10 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b090      	sub	sp, #64	@ 0x40
 8000d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	4bb0      	ldr	r3, [pc, #704]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4aaf      	ldr	r2, [pc, #700]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4bad      	ldr	r3, [pc, #692]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d72:	4baa      	ldr	r3, [pc, #680]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4aa9      	ldr	r2, [pc, #676]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4ba7      	ldr	r3, [pc, #668]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4ba4      	ldr	r3, [pc, #656]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4aa3      	ldr	r2, [pc, #652]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4ba1      	ldr	r3, [pc, #644]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da2:	4b9e      	ldr	r3, [pc, #632]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a9d      	ldr	r2, [pc, #628]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b9b      	ldr	r3, [pc, #620]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b98      	ldr	r3, [pc, #608]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a97      	ldr	r2, [pc, #604]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b95      	ldr	r3, [pc, #596]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b92      	ldr	r3, [pc, #584]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a91      	ldr	r2, [pc, #580]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b8f      	ldr	r3, [pc, #572]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dea:	4b8c      	ldr	r3, [pc, #560]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a8b      	ldr	r2, [pc, #556]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000df0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b89      	ldr	r3, [pc, #548]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e02:	4b86      	ldr	r3, [pc, #536]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a85      	ldr	r2, [pc, #532]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b83      	ldr	r3, [pc, #524]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e1a:	4b80      	ldr	r3, [pc, #512]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a7f      	ldr	r2, [pc, #508]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b7d      	ldr	r3, [pc, #500]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e32:	4b7a      	ldr	r3, [pc, #488]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a79      	ldr	r2, [pc, #484]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b77      	ldr	r3, [pc, #476]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0320 	and.w	r3, r3, #32
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	4b74      	ldr	r3, [pc, #464]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a73      	ldr	r2, [pc, #460]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b71      	ldr	r3, [pc, #452]	@ (800101c <MX_GPIO_Init+0x2d8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2120      	movs	r1, #32
 8000e66:	486e      	ldr	r0, [pc, #440]	@ (8001020 <MX_GPIO_Init+0x2dc>)
 8000e68:	f003 fd76 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	210c      	movs	r1, #12
 8000e70:	486c      	ldr	r0, [pc, #432]	@ (8001024 <MX_GPIO_Init+0x2e0>)
 8000e72:	f003 fd71 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2108      	movs	r1, #8
 8000e7a:	486b      	ldr	r0, [pc, #428]	@ (8001028 <MX_GPIO_Init+0x2e4>)
 8000e7c:	f003 fd6c 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e86:	4867      	ldr	r0, [pc, #412]	@ (8001024 <MX_GPIO_Init+0x2e0>)
 8000e88:	f003 fd66 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e92:	4866      	ldr	r0, [pc, #408]	@ (800102c <MX_GPIO_Init+0x2e8>)
 8000e94:	f003 fd60 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	21c8      	movs	r1, #200	@ 0xc8
 8000e9c:	4864      	ldr	r0, [pc, #400]	@ (8001030 <MX_GPIO_Init+0x2ec>)
 8000e9e:	f003 fd5b 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	485f      	ldr	r0, [pc, #380]	@ (8001034 <MX_GPIO_Init+0x2f0>)
 8000eb6:	f003 fb8b 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000eba:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ecc:	230a      	movs	r3, #10
 8000ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4858      	ldr	r0, [pc, #352]	@ (8001038 <MX_GPIO_Init+0x2f4>)
 8000ed8:	f003 fb7a 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4852      	ldr	r0, [pc, #328]	@ (800103c <MX_GPIO_Init+0x2f8>)
 8000ef2:	f003 fb6d 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000ef6:	2340      	movs	r3, #64	@ 0x40
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000efa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4845      	ldr	r0, [pc, #276]	@ (8001020 <MX_GPIO_Init+0x2dc>)
 8000f0c:	f003 fb60 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f10:	2320      	movs	r3, #32
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f24:	4619      	mov	r1, r3
 8000f26:	483e      	ldr	r0, [pc, #248]	@ (8001020 <MX_GPIO_Init+0x2dc>)
 8000f28:	f003 fb52 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000f2c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f42:	4619      	mov	r1, r3
 8000f44:	4837      	ldr	r0, [pc, #220]	@ (8001024 <MX_GPIO_Init+0x2e0>)
 8000f46:	f003 fb43 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4838      	ldr	r0, [pc, #224]	@ (8001040 <MX_GPIO_Init+0x2fc>)
 8000f60:	f003 fb36 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000f64:	2308      	movs	r3, #8
 8000f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	482b      	ldr	r0, [pc, #172]	@ (8001028 <MX_GPIO_Init+0x2e4>)
 8000f7c:	f003 fb28 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f80:	2310      	movs	r3, #16
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f90:	4619      	mov	r1, r3
 8000f92:	4823      	ldr	r0, [pc, #140]	@ (8001020 <MX_GPIO_Init+0x2dc>)
 8000f94:	f003 fb1c 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000f98:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000faa:	4619      	mov	r1, r3
 8000fac:	481f      	ldr	r0, [pc, #124]	@ (800102c <MX_GPIO_Init+0x2e8>)
 8000fae:	f003 fb0f 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4818      	ldr	r0, [pc, #96]	@ (800102c <MX_GPIO_Init+0x2e8>)
 8000fcc:	f003 fb00 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fd6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480f      	ldr	r0, [pc, #60]	@ (8001024 <MX_GPIO_Init+0x2e0>)
 8000fe8:	f003 faf2 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000fec:	2310      	movs	r3, #16
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001004:	4619      	mov	r1, r3
 8001006:	4809      	ldr	r0, [pc, #36]	@ (800102c <MX_GPIO_Init+0x2e8>)
 8001008:	f003 fae2 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800100c:	23c8      	movs	r3, #200	@ 0xc8
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
 8001018:	e014      	b.n	8001044 <MX_GPIO_Init+0x300>
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40022000 	.word	0x40022000
 8001028:	40022800 	.word	0x40022800
 800102c:	40021c00 	.word	0x40021c00
 8001030:	40021800 	.word	0x40021800
 8001034:	40021000 	.word	0x40021000
 8001038:	40020400 	.word	0x40020400
 800103c:	40022400 	.word	0x40022400
 8001040:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001048:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104c:	4619      	mov	r1, r3
 800104e:	4819      	ldr	r0, [pc, #100]	@ (80010b4 <MX_GPIO_Init+0x370>)
 8001050:	f003 fabe 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001054:	2305      	movs	r3, #5
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001064:	230a      	movs	r3, #10
 8001066:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106c:	4619      	mov	r1, r3
 800106e:	4812      	ldr	r0, [pc, #72]	@ (80010b8 <MX_GPIO_Init+0x374>)
 8001070:	f003 faae 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001074:	2304      	movs	r3, #4
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001084:	4619      	mov	r1, r3
 8001086:	480b      	ldr	r0, [pc, #44]	@ (80010b4 <MX_GPIO_Init+0x370>)
 8001088:	f003 faa2 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800108c:	2328      	movs	r3, #40	@ 0x28
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800109c:	230a      	movs	r3, #10
 800109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <MX_GPIO_Init+0x378>)
 80010a8:	f003 fa92 	bl	80045d0 <HAL_GPIO_Init>

}
 80010ac:	bf00      	nop
 80010ae:	3740      	adds	r7, #64	@ 0x40
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020000 	.word	0x40020000

080010c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001138 <MX_I2C1_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010cc:	4a1b      	ldr	r2, [pc, #108]	@ (800113c <MX_I2C1_Init+0x7c>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010d8:	2201      	movs	r2, #1
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fa:	480e      	ldr	r0, [pc, #56]	@ (8001134 <MX_I2C1_Init+0x74>)
 80010fc:	f005 fd60 	bl	8006bc0 <HAL_I2C_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001106:	f000 fb43 	bl	8001790 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4809      	ldr	r0, [pc, #36]	@ (8001134 <MX_I2C1_Init+0x74>)
 800110e:	f005 fdf3 	bl	8006cf8 <HAL_I2CEx_ConfigAnalogFilter>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001118:	f000 fb3a 	bl	8001790 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_I2C1_Init+0x74>)
 8001120:	f005 fe35 	bl	8006d8e <HAL_I2CEx_ConfigDigitalFilter>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112a:	f000 fb31 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200003fc 	.word	0x200003fc
 8001138:	40005400 	.word	0x40005400
 800113c:	00c0eaff 	.word	0x00c0eaff

08001140 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <MX_I2C3_Init+0x74>)
 8001146:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <MX_I2C3_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_I2C3_Init+0x74>)
 800114c:	4a1b      	ldr	r2, [pc, #108]	@ (80011bc <MX_I2C3_Init+0x7c>)
 800114e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <MX_I2C3_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_I2C3_Init+0x74>)
 8001158:	2201      	movs	r2, #1
 800115a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_I2C3_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_I2C3_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_I2C3_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_I2C3_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_I2C3_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800117a:	480e      	ldr	r0, [pc, #56]	@ (80011b4 <MX_I2C3_Init+0x74>)
 800117c:	f005 fd20 	bl	8006bc0 <HAL_I2C_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001186:	f000 fb03 	bl	8001790 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <MX_I2C3_Init+0x74>)
 800118e:	f005 fdb3 	bl	8006cf8 <HAL_I2CEx_ConfigAnalogFilter>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001198:	f000 fafa 	bl	8001790 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_I2C3_Init+0x74>)
 80011a0:	f005 fdf5 	bl	8006d8e <HAL_I2CEx_ConfigDigitalFilter>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f000 faf1 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000450 	.word	0x20000450
 80011b8:	40005c00 	.word	0x40005c00
 80011bc:	00c0eaff 	.word	0x00c0eaff

080011c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0ac      	sub	sp, #176	@ 0xb0
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	2284      	movs	r2, #132	@ 0x84
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f010 f95d 	bl	80114a0 <memset>
  if(i2cHandle->Instance==I2C1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a44      	ldr	r2, [pc, #272]	@ (80012fc <HAL_I2C_MspInit+0x13c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d13d      	bne.n	800126c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 ff5a 	bl	80080b8 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800120a:	f000 fac1 	bl	8001790 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b3c      	ldr	r3, [pc, #240]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a3b      	ldr	r2, [pc, #236]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b39      	ldr	r3, [pc, #228]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001226:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800122a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122e:	2312      	movs	r3, #18
 8001230:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001240:	2304      	movs	r3, #4
 8001242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800124a:	4619      	mov	r1, r3
 800124c:	482d      	ldr	r0, [pc, #180]	@ (8001304 <HAL_I2C_MspInit+0x144>)
 800124e:	f003 f9bf 	bl	80045d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001252:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a2a      	ldr	r2, [pc, #168]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 8001258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800126a:	e042      	b.n	80012f2 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <HAL_I2C_MspInit+0x148>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d13d      	bne.n	80012f2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800127a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	4618      	mov	r0, r3
 8001288:	f006 ff16 	bl	80080b8 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001292:	f000 fa7d 	bl	8001790 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a19      	ldr	r2, [pc, #100]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80012ae:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80012b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b6:	2312      	movs	r3, #18
 80012b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012bc:	2301      	movs	r3, #1
 80012be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012c8:	2304      	movs	r3, #4
 80012ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012ce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012d2:	4619      	mov	r1, r3
 80012d4:	480d      	ldr	r0, [pc, #52]	@ (800130c <HAL_I2C_MspInit+0x14c>)
 80012d6:	f003 f97b 	bl	80045d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 80012e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_I2C_MspInit+0x140>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
}
 80012f2:	bf00      	nop
 80012f4:	37b0      	adds	r7, #176	@ 0xb0
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40005400 	.word	0x40005400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400
 8001308:	40005c00 	.word	0x40005c00
 800130c:	40021c00 	.word	0x40021c00

08001310 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	@ 0x38
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2234      	movs	r2, #52	@ 0x34
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f010 f8bf 	bl	80114a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001322:	4b3a      	ldr	r3, [pc, #232]	@ (800140c <MX_LTDC_Init+0xfc>)
 8001324:	4a3a      	ldr	r2, [pc, #232]	@ (8001410 <MX_LTDC_Init+0x100>)
 8001326:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001328:	4b38      	ldr	r3, [pc, #224]	@ (800140c <MX_LTDC_Init+0xfc>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800132e:	4b37      	ldr	r3, [pc, #220]	@ (800140c <MX_LTDC_Init+0xfc>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001334:	4b35      	ldr	r3, [pc, #212]	@ (800140c <MX_LTDC_Init+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800133a:	4b34      	ldr	r3, [pc, #208]	@ (800140c <MX_LTDC_Init+0xfc>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001340:	4b32      	ldr	r3, [pc, #200]	@ (800140c <MX_LTDC_Init+0xfc>)
 8001342:	2228      	movs	r2, #40	@ 0x28
 8001344:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001346:	4b31      	ldr	r3, [pc, #196]	@ (800140c <MX_LTDC_Init+0xfc>)
 8001348:	2209      	movs	r2, #9
 800134a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800134c:	4b2f      	ldr	r3, [pc, #188]	@ (800140c <MX_LTDC_Init+0xfc>)
 800134e:	2235      	movs	r2, #53	@ 0x35
 8001350:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001352:	4b2e      	ldr	r3, [pc, #184]	@ (800140c <MX_LTDC_Init+0xfc>)
 8001354:	220b      	movs	r2, #11
 8001356:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001358:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <MX_LTDC_Init+0xfc>)
 800135a:	f240 2215 	movw	r2, #533	@ 0x215
 800135e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <MX_LTDC_Init+0xfc>)
 8001362:	f240 121b 	movw	r2, #283	@ 0x11b
 8001366:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001368:	4b28      	ldr	r3, [pc, #160]	@ (800140c <MX_LTDC_Init+0xfc>)
 800136a:	f240 2235 	movw	r2, #565	@ 0x235
 800136e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001370:	4b26      	ldr	r3, [pc, #152]	@ (800140c <MX_LTDC_Init+0xfc>)
 8001372:	f240 121d 	movw	r2, #285	@ 0x11d
 8001376:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001378:	4b24      	ldr	r3, [pc, #144]	@ (800140c <MX_LTDC_Init+0xfc>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_LTDC_Init+0xfc>)
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001388:	4b20      	ldr	r3, [pc, #128]	@ (800140c <MX_LTDC_Init+0xfc>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001390:	481e      	ldr	r0, [pc, #120]	@ (800140c <MX_LTDC_Init+0xfc>)
 8001392:	f005 fd49 	bl	8006e28 <HAL_LTDC_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800139c:	f000 f9f8 	bl	8001790 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80013a4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80013a8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80013ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80013b2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013b4:	2302      	movs	r3, #2
 80013b6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013b8:	23ff      	movs	r3, #255	@ 0xff
 80013ba:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013c4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013c6:	2307      	movs	r3, #7
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013ca:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80013d0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80013d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80013da:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_LTDC_Init+0xfc>)
 80013f6:	f005 fea9 	bl	800714c <HAL_LTDC_ConfigLayer>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001400:	f000 f9c6 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3738      	adds	r7, #56	@ 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200004a4 	.word	0x200004a4
 8001410:	40016800 	.word	0x40016800

08001414 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	@ 0x38
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a55      	ldr	r2, [pc, #340]	@ (8001588 <HAL_LTDC_MspInit+0x174>)
 8001432:	4293      	cmp	r3, r2
 8001434:	f040 80a3 	bne.w	800157e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001438:	4b54      	ldr	r3, [pc, #336]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143c:	4a53      	ldr	r2, [pc, #332]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 800143e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001442:	6453      	str	r3, [r2, #68]	@ 0x44
 8001444:	4b51      	ldr	r3, [pc, #324]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 8001446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001448:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800144c:	623b      	str	r3, [r7, #32]
 800144e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001450:	4b4e      	ldr	r3, [pc, #312]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001454:	4a4d      	ldr	r2, [pc, #308]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	6313      	str	r3, [r2, #48]	@ 0x30
 800145c:	4b4b      	ldr	r3, [pc, #300]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001468:	4b48      	ldr	r3, [pc, #288]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146c:	4a47      	ldr	r2, [pc, #284]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001472:	6313      	str	r3, [r2, #48]	@ 0x30
 8001474:	4b45      	ldr	r3, [pc, #276]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001480:	4b42      	ldr	r3, [pc, #264]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001484:	4a41      	ldr	r2, [pc, #260]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 8001486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148a:	6313      	str	r3, [r2, #48]	@ 0x30
 800148c:	4b3f      	ldr	r3, [pc, #252]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001498:	4b3c      	ldr	r3, [pc, #240]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	4a3b      	ldr	r2, [pc, #236]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 800149e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a4:	4b39      	ldr	r3, [pc, #228]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80014b0:	4b36      	ldr	r3, [pc, #216]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b4:	4a35      	ldr	r2, [pc, #212]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 80014b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80014bc:	4b33      	ldr	r3, [pc, #204]	@ (800158c <HAL_LTDC_MspInit+0x178>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80014c8:	2310      	movs	r3, #16
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d8:	230e      	movs	r3, #14
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	482b      	ldr	r0, [pc, #172]	@ (8001590 <HAL_LTDC_MspInit+0x17c>)
 80014e4:	f003 f874 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80014e8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014fa:	230e      	movs	r3, #14
 80014fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	4619      	mov	r1, r3
 8001504:	4823      	ldr	r0, [pc, #140]	@ (8001594 <HAL_LTDC_MspInit+0x180>)
 8001506:	f003 f863 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800150a:	23f7      	movs	r3, #247	@ 0xf7
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800151a:	230e      	movs	r3, #14
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	481c      	ldr	r0, [pc, #112]	@ (8001598 <HAL_LTDC_MspInit+0x184>)
 8001526:	f003 f853 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800152a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800153c:	2309      	movs	r3, #9
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	4815      	ldr	r0, [pc, #84]	@ (800159c <HAL_LTDC_MspInit+0x188>)
 8001548:	f003 f842 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800154c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800155e:	230e      	movs	r3, #14
 8001560:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <HAL_LTDC_MspInit+0x18c>)
 800156a:	f003 f831 	bl	80045d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2058      	movs	r0, #88	@ 0x58
 8001574:	f001 ff9e 	bl	80034b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001578:	2058      	movs	r0, #88	@ 0x58
 800157a:	f001 ffb7 	bl	80034ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800157e:	bf00      	nop
 8001580:	3738      	adds	r7, #56	@ 0x38
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40016800 	.word	0x40016800
 800158c:	40023800 	.word	0x40023800
 8001590:	40021000 	.word	0x40021000
 8001594:	40022400 	.word	0x40022400
 8001598:	40022800 	.word	0x40022800
 800159c:	40021800 	.word	0x40021800
 80015a0:	40022000 	.word	0x40022000

080015a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a8:	f001 fbe7 	bl	8002d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ac:	f000 f83a 	bl	8001624 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015b0:	f000 f8aa 	bl	8001708 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b4:	f7ff fbc6 	bl	8000d44 <MX_GPIO_Init>
  MX_ADC3_Init();
 80015b8:	f7fe ffbc 	bl	8000534 <MX_ADC3_Init>
  MX_CRC_Init();
 80015bc:	f7ff f866 	bl	800068c <MX_CRC_Init>
  MX_DCMI_Init();
 80015c0:	f7ff f8a6 	bl	8000710 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80015c4:	f7ff f996 	bl	80008f4 <MX_DMA2D_Init>
  MX_ETH_Init();
 80015c8:	f7ff f9ec 	bl	80009a4 <MX_ETH_Init>
  MX_FMC_Init();
 80015cc:	f7ff fad0 	bl	8000b70 <MX_FMC_Init>
  MX_I2C1_Init();
 80015d0:	f7ff fd76 	bl	80010c0 <MX_I2C1_Init>
  MX_I2C3_Init();
 80015d4:	f7ff fdb4 	bl	8001140 <MX_I2C3_Init>
  MX_LTDC_Init();
 80015d8:	f7ff fe9a 	bl	8001310 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80015dc:	f000 f8de 	bl	800179c <MX_QUADSPI_Init>
  MX_RTC_Init();
 80015e0:	f000 f998 	bl	8001914 <MX_RTC_Init>
  MX_SAI2_Init();
 80015e4:	f000 fa68 	bl	8001ab8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80015e8:	f000 fb78 	bl	8001cdc <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80015ec:	f000 fbfa 	bl	8001de4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80015f0:	f000 fc8c 	bl	8001f0c <MX_SPI2_Init>
  MX_TIM1_Init();
 80015f4:	f000 fe68 	bl	80022c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015f8:	f000 ff12 	bl	8002420 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015fc:	f000 ff86 	bl	800250c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001600:	f000 fffc 	bl	80025fc <MX_TIM5_Init>
  MX_TIM8_Init();
 8001604:	f001 f872 	bl	80026ec <MX_TIM8_Init>
  MX_TIM12_Init();
 8001608:	f001 f8c4 	bl	8002794 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800160c:	f001 fa64 	bl	8002ad8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001610:	f001 fa92 	bl	8002b38 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001614:	f00c ffea 	bl	800e5ec <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001618:	f00f fb86 	bl	8010d28 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800161c:	f00f fbaa 	bl	8010d74 <MX_USB_HOST_Process>
 8001620:	e7fc      	b.n	800161c <main+0x78>
	...

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	@ 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	2230      	movs	r2, #48	@ 0x30
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f00f ff34 	bl	80114a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001648:	f005 ff58 	bl	80074fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800164c:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <SystemClock_Config+0xdc>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	4a2b      	ldr	r2, [pc, #172]	@ (8001700 <SystemClock_Config+0xdc>)
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	@ 0x40
 8001658:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <SystemClock_Config+0xdc>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <SystemClock_Config+0xe0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <SystemClock_Config+0xe0>)
 800166a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <SystemClock_Config+0xe0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800167c:	2309      	movs	r3, #9
 800167e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001686:	2301      	movs	r3, #1
 8001688:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168a:	2302      	movs	r3, #2
 800168c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001694:	2319      	movs	r3, #25
 8001696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001698:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800169c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169e:	2302      	movs	r3, #2
 80016a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016a2:	2309      	movs	r3, #9
 80016a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	4618      	mov	r0, r3
 80016ac:	f006 f848 	bl	8007740 <HAL_RCC_OscConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016b6:	f000 f86b 	bl	8001790 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016ba:	f005 ff2f 	bl	800751c <HAL_PWREx_EnableOverDrive>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80016c4:	f000 f864 	bl	8001790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	230f      	movs	r3, #15
 80016ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2302      	movs	r3, #2
 80016ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2106      	movs	r1, #6
 80016e6:	4618      	mov	r0, r3
 80016e8:	f006 face 	bl	8007c88 <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80016f2:	f000 f84d 	bl	8001790 <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3750      	adds	r7, #80	@ 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0a2      	sub	sp, #136	@ 0x88
 800170c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2284      	movs	r2, #132	@ 0x84
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f00f fec3 	bl	80114a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <PeriphCommonClock_Config+0x60>)
 800171c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800171e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001722:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001724:	2305      	movs	r3, #5
 8001726:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001728:	2302      	movs	r3, #2
 800172a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800172c:	2303      	movs	r3, #3
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001730:	2301      	movs	r3, #1
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001734:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001738:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800173a:	2300      	movs	r3, #0
 800173c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800173e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001742:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	4618      	mov	r0, r3
 8001750:	f006 fcb2 	bl	80080b8 <HAL_RCCEx_PeriphCLKConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800175a:	f000 f819 	bl	8001790 <Error_Handler>
  }
}
 800175e:	bf00      	nop
 8001760:	3788      	adds	r7, #136	@ 0x88
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	00b00008 	.word	0x00b00008

0800176c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a04      	ldr	r2, [pc, #16]	@ (800178c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800177e:	f001 fb09 	bl	8002d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40001000 	.word	0x40001000

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001794:	b672      	cpsid	i
}
 8001796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <Error_Handler+0x8>

0800179c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <MX_QUADSPI_Init+0x50>)
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <MX_QUADSPI_Init+0x54>)
 80017a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <MX_QUADSPI_Init+0x50>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_QUADSPI_Init+0x50>)
 80017ae:	2204      	movs	r2, #4
 80017b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <MX_QUADSPI_Init+0x50>)
 80017b4:	2210      	movs	r2, #16
 80017b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <MX_QUADSPI_Init+0x50>)
 80017ba:	2218      	movs	r2, #24
 80017bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <MX_QUADSPI_Init+0x50>)
 80017c0:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80017c4:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <MX_QUADSPI_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <MX_QUADSPI_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <MX_QUADSPI_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_QUADSPI_Init+0x50>)
 80017da:	f005 feef 	bl	80075bc <HAL_QSPI_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80017e4:	f7ff ffd4 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000054c 	.word	0x2000054c
 80017f0:	a0001000 	.word	0xa0001000

080017f4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	@ 0x30
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a3b      	ldr	r2, [pc, #236]	@ (8001900 <HAL_QSPI_MspInit+0x10c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d170      	bne.n	80018f8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001816:	4b3b      	ldr	r3, [pc, #236]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 8001818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181a:	4a3a      	ldr	r2, [pc, #232]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6393      	str	r3, [r2, #56]	@ 0x38
 8001822:	4b38      	ldr	r3, [pc, #224]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 8001824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800182e:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a34      	ldr	r2, [pc, #208]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 8001834:	f043 0310 	orr.w	r3, r3, #16
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b32      	ldr	r3, [pc, #200]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b2f      	ldr	r3, [pc, #188]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a2e      	ldr	r2, [pc, #184]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b2c      	ldr	r3, [pc, #176]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800185e:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a28      	ldr	r2, [pc, #160]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <HAL_QSPI_MspInit+0x110>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001876:	2304      	movs	r3, #4
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001886:	2309      	movs	r3, #9
 8001888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	481d      	ldr	r0, [pc, #116]	@ (8001908 <HAL_QSPI_MspInit+0x114>)
 8001892:	f002 fe9d 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001896:	2340      	movs	r3, #64	@ 0x40
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018a6:	230a      	movs	r3, #10
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	4816      	ldr	r0, [pc, #88]	@ (800190c <HAL_QSPI_MspInit+0x118>)
 80018b2:	f002 fe8d 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018b6:	2304      	movs	r3, #4
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018c6:	2309      	movs	r3, #9
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	480e      	ldr	r0, [pc, #56]	@ (800190c <HAL_QSPI_MspInit+0x118>)
 80018d2:	f002 fe7d 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80018d6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018e8:	2309      	movs	r3, #9
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	@ (8001910 <HAL_QSPI_MspInit+0x11c>)
 80018f4:	f002 fe6c 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80018f8:	bf00      	nop
 80018fa:	3730      	adds	r7, #48	@ 0x30
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	a0001000 	.word	0xa0001000
 8001904:	40023800 	.word	0x40023800
 8001908:	40021000 	.word	0x40021000
 800190c:	40020400 	.word	0x40020400
 8001910:	40020c00 	.word	0x40020c00

08001914 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b090      	sub	sp, #64	@ 0x40
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800191a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800192e:	463b      	mov	r3, r7
 8001930:	2228      	movs	r2, #40	@ 0x28
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f00f fdb3 	bl	80114a0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800193a:	4b46      	ldr	r3, [pc, #280]	@ (8001a54 <MX_RTC_Init+0x140>)
 800193c:	4a46      	ldr	r2, [pc, #280]	@ (8001a58 <MX_RTC_Init+0x144>)
 800193e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001940:	4b44      	ldr	r3, [pc, #272]	@ (8001a54 <MX_RTC_Init+0x140>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001946:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <MX_RTC_Init+0x140>)
 8001948:	227f      	movs	r2, #127	@ 0x7f
 800194a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800194c:	4b41      	ldr	r3, [pc, #260]	@ (8001a54 <MX_RTC_Init+0x140>)
 800194e:	22ff      	movs	r2, #255	@ 0xff
 8001950:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001952:	4b40      	ldr	r3, [pc, #256]	@ (8001a54 <MX_RTC_Init+0x140>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001958:	4b3e      	ldr	r3, [pc, #248]	@ (8001a54 <MX_RTC_Init+0x140>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800195e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a54 <MX_RTC_Init+0x140>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001964:	483b      	ldr	r0, [pc, #236]	@ (8001a54 <MX_RTC_Init+0x140>)
 8001966:	f007 f8d7 	bl	8008b18 <HAL_RTC_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001970:	f7ff ff0e 	bl	8001790 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001986:	2300      	movs	r3, #0
 8001988:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800198e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001992:	2201      	movs	r2, #1
 8001994:	4619      	mov	r1, r3
 8001996:	482f      	ldr	r0, [pc, #188]	@ (8001a54 <MX_RTC_Init+0x140>)
 8001998:	f007 f942 	bl	8008c20 <HAL_RTC_SetTime>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80019a2:	f7ff fef5 	bl	8001790 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c2:	2201      	movs	r2, #1
 80019c4:	4619      	mov	r1, r3
 80019c6:	4823      	ldr	r0, [pc, #140]	@ (8001a54 <MX_RTC_Init+0x140>)
 80019c8:	f007 f9c4 	bl	8008d54 <HAL_RTC_SetDate>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80019d2:	f7ff fedd 	bl	8001790 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80019da:	2300      	movs	r3, #0
 80019dc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80019de:	2300      	movs	r3, #0
 80019e0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a06:	463b      	mov	r3, r7
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4811      	ldr	r0, [pc, #68]	@ (8001a54 <MX_RTC_Init+0x140>)
 8001a0e:	f007 fa25 	bl	8008e5c <HAL_RTC_SetAlarm>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001a18:	f7ff feba 	bl	8001790 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	2201      	movs	r2, #1
 8001a26:	4619      	mov	r1, r3
 8001a28:	480a      	ldr	r0, [pc, #40]	@ (8001a54 <MX_RTC_Init+0x140>)
 8001a2a:	f007 fa17 	bl	8008e5c <HAL_RTC_SetAlarm>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001a34:	f7ff feac 	bl	8001790 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001a38:	2202      	movs	r2, #2
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <MX_RTC_Init+0x140>)
 8001a3e:	f007 fbd7 	bl	80091f0 <HAL_RTCEx_SetTimeStamp>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001a48:	f7ff fea2 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	3740      	adds	r7, #64	@ 0x40
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000598 	.word	0x20000598
 8001a58:	40002800 	.word	0x40002800

08001a5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0a4      	sub	sp, #144	@ 0x90
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2284      	movs	r2, #132	@ 0x84
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f00f fd17 	bl	80114a0 <memset>
  if(rtcHandle->Instance==RTC)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab0 <HAL_RTC_MspInit+0x54>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d114      	bne.n	8001aa6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f006 fb14 	bl	80080b8 <HAL_RCCEx_PeriphCLKConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001a96:	f7ff fe7b 	bl	8001790 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_RTC_MspInit+0x58>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <HAL_RTC_MspInit+0x58>)
 8001aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aa4:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3790      	adds	r7, #144	@ 0x90
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40002800 	.word	0x40002800
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001abc:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001abe:	4a4e      	ldr	r2, [pc, #312]	@ (8001bf8 <MX_SAI2_Init+0x140>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001ace:	4b49      	ldr	r3, [pc, #292]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001ad0:	2240      	movs	r2, #64	@ 0x40
 8001ad2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ad4:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001ada:	4b46      	ldr	r3, [pc, #280]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ae0:	4b44      	ldr	r3, [pc, #272]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ae6:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001aec:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001af2:	4b40      	ldr	r3, [pc, #256]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001af8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001afa:	4a40      	ldr	r2, [pc, #256]	@ (8001bfc <MX_SAI2_Init+0x144>)
 8001afc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001afe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b04:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b10:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001b16:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b18:	2208      	movs	r2, #8
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001b1c:	4b35      	ldr	r3, [pc, #212]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b22:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b28:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b2e:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001b34:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001b46:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001b4c:	4829      	ldr	r0, [pc, #164]	@ (8001bf4 <MX_SAI2_Init+0x13c>)
 8001b4e:	f007 fbb7 	bl	80092c0 <HAL_SAI_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001b58:	f7ff fe1a 	bl	8001790 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001b5c:	4b28      	ldr	r3, [pc, #160]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b5e:	4a29      	ldr	r2, [pc, #164]	@ (8001c04 <MX_SAI2_Init+0x14c>)
 8001b60:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b62:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b68:	4b25      	ldr	r3, [pc, #148]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001b6e:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b70:	2240      	movs	r2, #64	@ 0x40
 8001b72:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b74:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001b80:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b86:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b92:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b9e:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ba4:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001bac:	2208      	movs	r2, #8
 8001bae:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001be0:	4807      	ldr	r0, [pc, #28]	@ (8001c00 <MX_SAI2_Init+0x148>)
 8001be2:	f007 fb6d 	bl	80092c0 <HAL_SAI_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001bec:	f7ff fdd0 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200005b8 	.word	0x200005b8
 8001bf8:	40015c04 	.word	0x40015c04
 8001bfc:	0002ee00 	.word	0x0002ee00
 8001c00:	2000063c 	.word	0x2000063c
 8001c04:	40015c24 	.word	0x40015c24

08001c08 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc4 <HAL_SAI_MspInit+0xbc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d124      	bne.n	8001c64 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <HAL_SAI_MspInit+0xc0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10b      	bne.n	8001c3a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001c22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ccc <HAL_SAI_MspInit+0xc4>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	4a29      	ldr	r2, [pc, #164]	@ (8001ccc <HAL_SAI_MspInit+0xc4>)
 8001c28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2e:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <HAL_SAI_MspInit+0xc4>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001c3a:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <HAL_SAI_MspInit+0xc0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a21      	ldr	r2, [pc, #132]	@ (8001cc8 <HAL_SAI_MspInit+0xc0>)
 8001c42:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001c44:	23f0      	movs	r3, #240	@ 0xf0
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001c54:	230a      	movs	r3, #10
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481c      	ldr	r0, [pc, #112]	@ (8001cd0 <HAL_SAI_MspInit+0xc8>)
 8001c60:	f002 fcb6 	bl	80045d0 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd4 <HAL_SAI_MspInit+0xcc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d125      	bne.n	8001cba <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001c6e:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <HAL_SAI_MspInit+0xc0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10b      	bne.n	8001c8e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <HAL_SAI_MspInit+0xc4>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	4a14      	ldr	r2, [pc, #80]	@ (8001ccc <HAL_SAI_MspInit+0xc4>)
 8001c7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_SAI_MspInit+0xc4>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <HAL_SAI_MspInit+0xc0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <HAL_SAI_MspInit+0xc0>)
 8001c96:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001caa:	230a      	movs	r3, #10
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4808      	ldr	r0, [pc, #32]	@ (8001cd8 <HAL_SAI_MspInit+0xd0>)
 8001cb6:	f002 fc8b 	bl	80045d0 <HAL_GPIO_Init>

    }
}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	@ 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40015c04 	.word	0x40015c04
 8001cc8:	200006c0 	.word	0x200006c0
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40015c24 	.word	0x40015c24
 8001cd8:	40021800 	.word	0x40021800

08001cdc <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <MX_SDMMC1_SD_Init+0x3c>)
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d1c <MX_SDMMC1_SD_Init+0x40>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_SDMMC1_SD_Init+0x3c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_SDMMC1_SD_Init+0x3c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_SDMMC1_SD_Init+0x3c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <MX_SDMMC1_SD_Init+0x3c>)
 8001cfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cfe:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <MX_SDMMC1_SD_Init+0x3c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001d06:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <MX_SDMMC1_SD_Init+0x3c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	200006c4 	.word	0x200006c4
 8001d1c:	40012c00 	.word	0x40012c00

08001d20 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a25      	ldr	r2, [pc, #148]	@ (8001dd4 <HAL_SD_MspInit+0xb4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d144      	bne.n	8001dcc <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001d42:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <HAL_SD_MspInit+0xb8>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	4a24      	ldr	r2, [pc, #144]	@ (8001dd8 <HAL_SD_MspInit+0xb8>)
 8001d48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4e:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <HAL_SD_MspInit+0xb8>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <HAL_SD_MspInit+0xb8>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd8 <HAL_SD_MspInit+0xb8>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d66:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <HAL_SD_MspInit+0xb8>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_SD_MspInit+0xb8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a18      	ldr	r2, [pc, #96]	@ (8001dd8 <HAL_SD_MspInit+0xb8>)
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_SD_MspInit+0xb8>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001d8a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001d8e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	480d      	ldr	r0, [pc, #52]	@ (8001ddc <HAL_SD_MspInit+0xbc>)
 8001da8:	f002 fc12 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001dac:	2304      	movs	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001dbc:	230c      	movs	r3, #12
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4806      	ldr	r0, [pc, #24]	@ (8001de0 <HAL_SD_MspInit+0xc0>)
 8001dc8:	f002 fc02 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	@ 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020c00 	.word	0x40020c00

08001de4 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001dea:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001dee:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001df0:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001df6:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001dfc:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001e02:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <MX_SPDIFRX_Init+0x5c>)
 8001e2e:	f008 fdc5 	bl	800a9bc <HAL_SPDIFRX_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001e38:	f7ff fcaa 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000748 	.word	0x20000748

08001e44 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b0aa      	sub	sp, #168	@ 0xa8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	2284      	movs	r2, #132	@ 0x84
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00f fb1b 	bl	80114a0 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8001e72:	d143      	bne.n	8001efc <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001e74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001e7a:	2364      	movs	r3, #100	@ 0x64
 8001e7c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	4618      	mov	r0, r3
 8001e94:	f006 f910 	bl	80080b8 <HAL_RCCEx_PeriphCLKConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001e9e:	f7ff fc77 	bl	8001790 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001ea2:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_SPDIFRX_MspInit+0xc0>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_SPDIFRX_MspInit+0xc0>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_SPDIFRX_MspInit+0xc0>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eba:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <HAL_SPDIFRX_MspInit+0xc0>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a11      	ldr	r2, [pc, #68]	@ (8001f04 <HAL_SPDIFRX_MspInit+0xc0>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <HAL_SPDIFRX_MspInit+0xc0>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001ed2:	2380      	movs	r3, #128	@ 0x80
 8001ed4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001eea:	2308      	movs	r3, #8
 8001eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4804      	ldr	r0, [pc, #16]	@ (8001f08 <HAL_SPDIFRX_MspInit+0xc4>)
 8001ef8:	f002 fb6a 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001efc:	bf00      	nop
 8001efe:	37a8      	adds	r7, #168	@ 0xa8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020c00 	.word	0x40020c00

08001f0c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f12:	4a1c      	ldr	r2, [pc, #112]	@ (8001f84 <MX_SPI2_Init+0x78>)
 8001f14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f16:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f24:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f26:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001f2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f58:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f66:	2208      	movs	r2, #8
 8001f68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_SPI2_Init+0x74>)
 8001f6c:	f008 fd82 	bl	800aa74 <HAL_SPI_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001f76:	f7ff fc0b 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000794 	.word	0x20000794
 8001f84:	40003800 	.word	0x40003800

08001f88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a25      	ldr	r2, [pc, #148]	@ (800203c <HAL_SPI_MspInit+0xb4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d144      	bne.n	8002034 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001faa:	4b25      	ldr	r3, [pc, #148]	@ (8002040 <HAL_SPI_MspInit+0xb8>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	4a24      	ldr	r2, [pc, #144]	@ (8002040 <HAL_SPI_MspInit+0xb8>)
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb6:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_SPI_MspInit+0xb8>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <HAL_SPI_MspInit+0xb8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002040 <HAL_SPI_MspInit+0xb8>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <HAL_SPI_MspInit+0xb8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_SPI_MspInit+0xb8>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a18      	ldr	r2, [pc, #96]	@ (8002040 <HAL_SPI_MspInit+0xb8>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <HAL_SPI_MspInit+0xb8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002002:	2305      	movs	r3, #5
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	480d      	ldr	r0, [pc, #52]	@ (8002044 <HAL_SPI_MspInit+0xbc>)
 800200e:	f002 fadf 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002012:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002024:	2305      	movs	r3, #5
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4806      	ldr	r0, [pc, #24]	@ (8002048 <HAL_SPI_MspInit+0xc0>)
 8002030:	f002 face 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002034:	bf00      	nop
 8002036:	3728      	adds	r7, #40	@ 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40003800 	.word	0x40003800
 8002040:	40023800 	.word	0x40023800
 8002044:	40022000 	.word	0x40022000
 8002048:	40020400 	.word	0x40020400

0800204c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <HAL_MspInit+0x44>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	4a0e      	ldr	r2, [pc, #56]	@ (8002090 <HAL_MspInit+0x44>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	@ 0x40
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <HAL_MspInit+0x44>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <HAL_MspInit+0x44>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	4a08      	ldr	r2, [pc, #32]	@ (8002090 <HAL_MspInit+0x44>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002074:	6453      	str	r3, [r2, #68]	@ 0x44
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_MspInit+0x44>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800

08002094 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08e      	sub	sp, #56	@ 0x38
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020a4:	4b33      	ldr	r3, [pc, #204]	@ (8002174 <HAL_InitTick+0xe0>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a32      	ldr	r2, [pc, #200]	@ (8002174 <HAL_InitTick+0xe0>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b0:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <HAL_InitTick+0xe0>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020bc:	f107 0210 	add.w	r2, r7, #16
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f005 ffc4 	bl	8008054 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020d6:	f005 ff95 	bl	8008004 <HAL_RCC_GetPCLK1Freq>
 80020da:	6378      	str	r0, [r7, #52]	@ 0x34
 80020dc:	e004      	b.n	80020e8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020de:	f005 ff91 	bl	8008004 <HAL_RCC_GetPCLK1Freq>
 80020e2:	4603      	mov	r3, r0
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ea:	4a23      	ldr	r2, [pc, #140]	@ (8002178 <HAL_InitTick+0xe4>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	3b01      	subs	r3, #1
 80020f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020f6:	4b21      	ldr	r3, [pc, #132]	@ (800217c <HAL_InitTick+0xe8>)
 80020f8:	4a21      	ldr	r2, [pc, #132]	@ (8002180 <HAL_InitTick+0xec>)
 80020fa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <HAL_InitTick+0xe8>)
 80020fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002102:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002104:	4a1d      	ldr	r2, [pc, #116]	@ (800217c <HAL_InitTick+0xe8>)
 8002106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002108:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800210a:	4b1c      	ldr	r3, [pc, #112]	@ (800217c <HAL_InitTick+0xe8>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b1a      	ldr	r3, [pc, #104]	@ (800217c <HAL_InitTick+0xe8>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_InitTick+0xe8>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800211c:	4817      	ldr	r0, [pc, #92]	@ (800217c <HAL_InitTick+0xe8>)
 800211e:	f008 fd54 	bl	800abca <HAL_TIM_Base_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002128:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11b      	bne.n	8002168 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002130:	4812      	ldr	r0, [pc, #72]	@ (800217c <HAL_InitTick+0xe8>)
 8002132:	f008 fda1 	bl	800ac78 <HAL_TIM_Base_Start_IT>
 8002136:	4603      	mov	r3, r0
 8002138:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800213c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002140:	2b00      	cmp	r3, #0
 8002142:	d111      	bne.n	8002168 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002144:	2036      	movs	r0, #54	@ 0x36
 8002146:	f001 f9d1 	bl	80034ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d808      	bhi.n	8002162 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002150:	2200      	movs	r2, #0
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	2036      	movs	r0, #54	@ 0x36
 8002156:	f001 f9ad 	bl	80034b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800215a:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <HAL_InitTick+0xf0>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e002      	b.n	8002168 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002168:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800216c:	4618      	mov	r0, r3
 800216e:	3738      	adds	r7, #56	@ 0x38
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	431bde83 	.word	0x431bde83
 800217c:	200007f8 	.word	0x200007f8
 8002180:	40001000 	.word	0x40001000
 8002184:	20000004 	.word	0x20000004

08002188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <NMI_Handler+0x4>

08002190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <MemManage_Handler+0x4>

080021a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <UsageFault_Handler+0x4>

080021b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <TIM6_DAC_IRQHandler+0x10>)
 80021ee:	f008 fe12 	bl	800ae16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200007f8 	.word	0x200007f8

080021fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <OTG_FS_IRQHandler+0x10>)
 8002202:	f002 fea3 	bl	8004f4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20001058 	.word	0x20001058

08002210 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <LTDC_IRQHandler+0x10>)
 8002216:	f004 fed7 	bl	8006fc8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200004a4 	.word	0x200004a4

08002224 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002228:	4802      	ldr	r0, [pc, #8]	@ (8002234 <DMA2D_IRQHandler+0x10>)
 800222a:	f001 fce1 	bl	8003bf0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000294 	.word	0x20000294

08002238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002240:	4a14      	ldr	r2, [pc, #80]	@ (8002294 <_sbrk+0x5c>)
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <_sbrk+0x60>)
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800224c:	4b13      	ldr	r3, [pc, #76]	@ (800229c <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <_sbrk+0x64>)
 8002256:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <_sbrk+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	429a      	cmp	r2, r3
 8002266:	d207      	bcs.n	8002278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002268:	f00f f932 	bl	80114d0 <__errno>
 800226c:	4603      	mov	r3, r0
 800226e:	220c      	movs	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	e009      	b.n	800228c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	4a05      	ldr	r2, [pc, #20]	@ (800229c <_sbrk+0x64>)
 8002288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20050000 	.word	0x20050000
 8002298:	00000400 	.word	0x00000400
 800229c:	20000844 	.word	0x20000844
 80022a0:	20001580 	.word	0x20001580

080022a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <SystemInit+0x20>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	4a05      	ldr	r2, [pc, #20]	@ (80022c4 <SystemInit+0x20>)
 80022b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b09a      	sub	sp, #104	@ 0x68
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
 80022f8:	615a      	str	r2, [r3, #20]
 80022fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	222c      	movs	r2, #44	@ 0x2c
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f00f f8cc 	bl	80114a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002308:	4b43      	ldr	r3, [pc, #268]	@ (8002418 <MX_TIM1_Init+0x150>)
 800230a:	4a44      	ldr	r2, [pc, #272]	@ (800241c <MX_TIM1_Init+0x154>)
 800230c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800230e:	4b42      	ldr	r3, [pc, #264]	@ (8002418 <MX_TIM1_Init+0x150>)
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002314:	4b40      	ldr	r3, [pc, #256]	@ (8002418 <MX_TIM1_Init+0x150>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800231a:	4b3f      	ldr	r3, [pc, #252]	@ (8002418 <MX_TIM1_Init+0x150>)
 800231c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002320:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002322:	4b3d      	ldr	r3, [pc, #244]	@ (8002418 <MX_TIM1_Init+0x150>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002328:	4b3b      	ldr	r3, [pc, #236]	@ (8002418 <MX_TIM1_Init+0x150>)
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232e:	4b3a      	ldr	r3, [pc, #232]	@ (8002418 <MX_TIM1_Init+0x150>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002334:	4838      	ldr	r0, [pc, #224]	@ (8002418 <MX_TIM1_Init+0x150>)
 8002336:	f008 fc48 	bl	800abca <HAL_TIM_Base_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002340:	f7ff fa26 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002348:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800234a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800234e:	4619      	mov	r1, r3
 8002350:	4831      	ldr	r0, [pc, #196]	@ (8002418 <MX_TIM1_Init+0x150>)
 8002352:	f008 ff7b 	bl	800b24c <HAL_TIM_ConfigClockSource>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800235c:	f7ff fa18 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002360:	482d      	ldr	r0, [pc, #180]	@ (8002418 <MX_TIM1_Init+0x150>)
 8002362:	f008 fd01 	bl	800ad68 <HAL_TIM_PWM_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800236c:	f7ff fa10 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800237c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002380:	4619      	mov	r1, r3
 8002382:	4825      	ldr	r0, [pc, #148]	@ (8002418 <MX_TIM1_Init+0x150>)
 8002384:	f009 fbf8 	bl	800bb78 <HAL_TIMEx_MasterConfigSynchronization>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800238e:	f7ff f9ff 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002392:	2360      	movs	r3, #96	@ 0x60
 8002394:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239a:	2300      	movs	r3, #0
 800239c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800239e:	2300      	movs	r3, #0
 80023a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023b2:	2200      	movs	r2, #0
 80023b4:	4619      	mov	r1, r3
 80023b6:	4818      	ldr	r0, [pc, #96]	@ (8002418 <MX_TIM1_Init+0x150>)
 80023b8:	f008 fe34 	bl	800b024 <HAL_TIM_PWM_ConfigChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80023c2:	f7ff f9e5 	bl	8001790 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4807      	ldr	r0, [pc, #28]	@ (8002418 <MX_TIM1_Init+0x150>)
 80023fc:	f009 fc4a 	bl	800bc94 <HAL_TIMEx_ConfigBreakDeadTime>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002406:	f7ff f9c3 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800240a:	4803      	ldr	r0, [pc, #12]	@ (8002418 <MX_TIM1_Init+0x150>)
 800240c:	f000 fa96 	bl	800293c <HAL_TIM_MspPostInit>

}
 8002410:	bf00      	nop
 8002412:	3768      	adds	r7, #104	@ 0x68
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000848 	.word	0x20000848
 800241c:	40010000 	.word	0x40010000

08002420 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	@ 0x38
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002426:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002440:	463b      	mov	r3, r7
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
 800244c:	611a      	str	r2, [r3, #16]
 800244e:	615a      	str	r2, [r3, #20]
 8002450:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002452:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <MX_TIM2_Init+0xe8>)
 8002454:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002458:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800245a:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <MX_TIM2_Init+0xe8>)
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b29      	ldr	r3, [pc, #164]	@ (8002508 <MX_TIM2_Init+0xe8>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002466:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <MX_TIM2_Init+0xe8>)
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <MX_TIM2_Init+0xe8>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <MX_TIM2_Init+0xe8>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800247a:	4823      	ldr	r0, [pc, #140]	@ (8002508 <MX_TIM2_Init+0xe8>)
 800247c:	f008 fba5 	bl	800abca <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002486:	f7ff f983 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800248e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002490:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002494:	4619      	mov	r1, r3
 8002496:	481c      	ldr	r0, [pc, #112]	@ (8002508 <MX_TIM2_Init+0xe8>)
 8002498:	f008 fed8 	bl	800b24c <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80024a2:	f7ff f975 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024a6:	4818      	ldr	r0, [pc, #96]	@ (8002508 <MX_TIM2_Init+0xe8>)
 80024a8:	f008 fc5e 	bl	800ad68 <HAL_TIM_PWM_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80024b2:	f7ff f96d 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	4619      	mov	r1, r3
 80024c4:	4810      	ldr	r0, [pc, #64]	@ (8002508 <MX_TIM2_Init+0xe8>)
 80024c6:	f009 fb57 	bl	800bb78 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80024d0:	f7ff f95e 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d4:	2360      	movs	r3, #96	@ 0x60
 80024d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e4:	463b      	mov	r3, r7
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	4807      	ldr	r0, [pc, #28]	@ (8002508 <MX_TIM2_Init+0xe8>)
 80024ec:	f008 fd9a 	bl	800b024 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80024f6:	f7ff f94b 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024fa:	4803      	ldr	r0, [pc, #12]	@ (8002508 <MX_TIM2_Init+0xe8>)
 80024fc:	f000 fa1e 	bl	800293c <HAL_TIM_MspPostInit>

}
 8002500:	bf00      	nop
 8002502:	3738      	adds	r7, #56	@ 0x38
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000894 	.word	0x20000894

0800250c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	@ 0x38
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800252c:	463b      	mov	r3, r7
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	611a      	str	r2, [r3, #16]
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800253e:	4b2d      	ldr	r3, [pc, #180]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 8002540:	4a2d      	ldr	r2, [pc, #180]	@ (80025f8 <MX_TIM3_Init+0xec>)
 8002542:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002544:	4b2b      	ldr	r3, [pc, #172]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 8002546:	2200      	movs	r2, #0
 8002548:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254a:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002550:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 8002552:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002556:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002558:	4b26      	ldr	r3, [pc, #152]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255e:	4b25      	ldr	r3, [pc, #148]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002564:	4823      	ldr	r0, [pc, #140]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 8002566:	f008 fb30 	bl	800abca <HAL_TIM_Base_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002570:	f7ff f90e 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002578:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800257a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800257e:	4619      	mov	r1, r3
 8002580:	481c      	ldr	r0, [pc, #112]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 8002582:	f008 fe63 	bl	800b24c <HAL_TIM_ConfigClockSource>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800258c:	f7ff f900 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002590:	4818      	ldr	r0, [pc, #96]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 8002592:	f008 fbe9 	bl	800ad68 <HAL_TIM_PWM_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800259c:	f7ff f8f8 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025a8:	f107 031c 	add.w	r3, r7, #28
 80025ac:	4619      	mov	r1, r3
 80025ae:	4811      	ldr	r0, [pc, #68]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 80025b0:	f009 fae2 	bl	800bb78 <HAL_TIMEx_MasterConfigSynchronization>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025ba:	f7ff f8e9 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025be:	2360      	movs	r3, #96	@ 0x60
 80025c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ce:	463b      	mov	r3, r7
 80025d0:	2200      	movs	r2, #0
 80025d2:	4619      	mov	r1, r3
 80025d4:	4807      	ldr	r0, [pc, #28]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 80025d6:	f008 fd25 	bl	800b024 <HAL_TIM_PWM_ConfigChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80025e0:	f7ff f8d6 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025e4:	4803      	ldr	r0, [pc, #12]	@ (80025f4 <MX_TIM3_Init+0xe8>)
 80025e6:	f000 f9a9 	bl	800293c <HAL_TIM_MspPostInit>

}
 80025ea:	bf00      	nop
 80025ec:	3738      	adds	r7, #56	@ 0x38
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200008e0 	.word	0x200008e0
 80025f8:	40000400 	.word	0x40000400

080025fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	@ 0x38
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800261c:	463b      	mov	r3, r7
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
 8002628:	611a      	str	r2, [r3, #16]
 800262a:	615a      	str	r2, [r3, #20]
 800262c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800262e:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 8002630:	4a2d      	ldr	r2, [pc, #180]	@ (80026e8 <MX_TIM5_Init+0xec>)
 8002632:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002634:	4b2b      	ldr	r3, [pc, #172]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 8002636:	2200      	movs	r2, #0
 8002638:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263a:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002640:	4b28      	ldr	r3, [pc, #160]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 8002642:	f04f 32ff 	mov.w	r2, #4294967295
 8002646:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002648:	4b26      	ldr	r3, [pc, #152]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264e:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002654:	4823      	ldr	r0, [pc, #140]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 8002656:	f008 fab8 	bl	800abca <HAL_TIM_Base_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002660:	f7ff f896 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002668:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800266a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800266e:	4619      	mov	r1, r3
 8002670:	481c      	ldr	r0, [pc, #112]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 8002672:	f008 fdeb 	bl	800b24c <HAL_TIM_ConfigClockSource>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800267c:	f7ff f888 	bl	8001790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002680:	4818      	ldr	r0, [pc, #96]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 8002682:	f008 fb71 	bl	800ad68 <HAL_TIM_PWM_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800268c:	f7ff f880 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	4619      	mov	r1, r3
 800269e:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 80026a0:	f009 fa6a 	bl	800bb78 <HAL_TIMEx_MasterConfigSynchronization>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80026aa:	f7ff f871 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ae:	2360      	movs	r3, #96	@ 0x60
 80026b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026be:	463b      	mov	r3, r7
 80026c0:	220c      	movs	r2, #12
 80026c2:	4619      	mov	r1, r3
 80026c4:	4807      	ldr	r0, [pc, #28]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 80026c6:	f008 fcad 	bl	800b024 <HAL_TIM_PWM_ConfigChannel>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80026d0:	f7ff f85e 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80026d4:	4803      	ldr	r0, [pc, #12]	@ (80026e4 <MX_TIM5_Init+0xe8>)
 80026d6:	f000 f931 	bl	800293c <HAL_TIM_MspPostInit>

}
 80026da:	bf00      	nop
 80026dc:	3738      	adds	r7, #56	@ 0x38
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000092c 	.word	0x2000092c
 80026e8:	40000c00 	.word	0x40000c00

080026ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f2:	f107 0310 	add.w	r3, r7, #16
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800270a:	4b20      	ldr	r3, [pc, #128]	@ (800278c <MX_TIM8_Init+0xa0>)
 800270c:	4a20      	ldr	r2, [pc, #128]	@ (8002790 <MX_TIM8_Init+0xa4>)
 800270e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002710:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <MX_TIM8_Init+0xa0>)
 8002712:	2200      	movs	r2, #0
 8002714:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002716:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <MX_TIM8_Init+0xa0>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800271c:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <MX_TIM8_Init+0xa0>)
 800271e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002722:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002724:	4b19      	ldr	r3, [pc, #100]	@ (800278c <MX_TIM8_Init+0xa0>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <MX_TIM8_Init+0xa0>)
 800272c:	2200      	movs	r2, #0
 800272e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002730:	4b16      	ldr	r3, [pc, #88]	@ (800278c <MX_TIM8_Init+0xa0>)
 8002732:	2200      	movs	r2, #0
 8002734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002736:	4815      	ldr	r0, [pc, #84]	@ (800278c <MX_TIM8_Init+0xa0>)
 8002738:	f008 fa47 	bl	800abca <HAL_TIM_Base_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002742:	f7ff f825 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800274a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	4619      	mov	r1, r3
 8002752:	480e      	ldr	r0, [pc, #56]	@ (800278c <MX_TIM8_Init+0xa0>)
 8002754:	f008 fd7a 	bl	800b24c <HAL_TIM_ConfigClockSource>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800275e:	f7ff f817 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4806      	ldr	r0, [pc, #24]	@ (800278c <MX_TIM8_Init+0xa0>)
 8002774:	f009 fa00 	bl	800bb78 <HAL_TIMEx_MasterConfigSynchronization>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800277e:	f7ff f807 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000978 	.word	0x20000978
 8002790:	40010400 	.word	0x40010400

08002794 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
 80027a8:	615a      	str	r2, [r3, #20]
 80027aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80027ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <MX_TIM12_Init+0x84>)
 80027ae:	4a1b      	ldr	r2, [pc, #108]	@ (800281c <MX_TIM12_Init+0x88>)
 80027b0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80027b2:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <MX_TIM12_Init+0x84>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b8:	4b17      	ldr	r3, [pc, #92]	@ (8002818 <MX_TIM12_Init+0x84>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80027be:	4b16      	ldr	r3, [pc, #88]	@ (8002818 <MX_TIM12_Init+0x84>)
 80027c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027c4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c6:	4b14      	ldr	r3, [pc, #80]	@ (8002818 <MX_TIM12_Init+0x84>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027cc:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <MX_TIM12_Init+0x84>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80027d2:	4811      	ldr	r0, [pc, #68]	@ (8002818 <MX_TIM12_Init+0x84>)
 80027d4:	f008 fac8 	bl	800ad68 <HAL_TIM_PWM_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80027de:	f7fe ffd7 	bl	8001790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e2:	2360      	movs	r3, #96	@ 0x60
 80027e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	4619      	mov	r1, r3
 80027f8:	4807      	ldr	r0, [pc, #28]	@ (8002818 <MX_TIM12_Init+0x84>)
 80027fa:	f008 fc13 	bl	800b024 <HAL_TIM_PWM_ConfigChannel>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002804:	f7fe ffc4 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002808:	4803      	ldr	r0, [pc, #12]	@ (8002818 <MX_TIM12_Init+0x84>)
 800280a:	f000 f897 	bl	800293c <HAL_TIM_MspPostInit>

}
 800280e:	bf00      	nop
 8002810:	3720      	adds	r7, #32
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200009c4 	.word	0x200009c4
 800281c:	40001800 	.word	0x40001800

08002820 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	@ 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2e      	ldr	r2, [pc, #184]	@ (80028e8 <HAL_TIM_Base_MspInit+0xc8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10c      	bne.n	800284c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002832:	4b2e      	ldr	r3, [pc, #184]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	4a2d      	ldr	r2, [pc, #180]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6453      	str	r3, [r2, #68]	@ 0x44
 800283e:	4b2b      	ldr	r3, [pc, #172]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800284a:	e046      	b.n	80028da <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002854:	d10c      	bne.n	8002870 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002856:	4b25      	ldr	r3, [pc, #148]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	4a24      	ldr	r2, [pc, #144]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6413      	str	r3, [r2, #64]	@ 0x40
 8002862:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	69bb      	ldr	r3, [r7, #24]
}
 800286e:	e034      	b.n	80028da <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1e      	ldr	r2, [pc, #120]	@ (80028f0 <HAL_TIM_Base_MspInit+0xd0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10c      	bne.n	8002894 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800287a:	4b1c      	ldr	r3, [pc, #112]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	4a1b      	ldr	r2, [pc, #108]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6413      	str	r3, [r2, #64]	@ 0x40
 8002886:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]
}
 8002892:	e022      	b.n	80028da <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a16      	ldr	r2, [pc, #88]	@ (80028f4 <HAL_TIM_Base_MspInit+0xd4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10c      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800289e:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 80028a4:	f043 0308 	orr.w	r3, r3, #8
 80028a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]
}
 80028b6:	e010      	b.n	80028da <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0e      	ldr	r2, [pc, #56]	@ (80028f8 <HAL_TIM_Base_MspInit+0xd8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10b      	bne.n	80028da <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028c2:	4b0a      	ldr	r3, [pc, #40]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	4a09      	ldr	r2, [pc, #36]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ce:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <HAL_TIM_Base_MspInit+0xcc>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
}
 80028da:	bf00      	nop
 80028dc:	3724      	adds	r7, #36	@ 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40010000 	.word	0x40010000
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000c00 	.word	0x40000c00
 80028f8:	40010400 	.word	0x40010400

080028fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <HAL_TIM_PWM_MspInit+0x38>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10b      	bne.n	8002926 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800290e:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_TIM_PWM_MspInit+0x3c>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	4a09      	ldr	r2, [pc, #36]	@ (8002938 <HAL_TIM_PWM_MspInit+0x3c>)
 8002914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002918:	6413      	str	r3, [r2, #64]	@ 0x40
 800291a:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <HAL_TIM_PWM_MspInit+0x3c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40001800 	.word	0x40001800
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08c      	sub	sp, #48	@ 0x30
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a56      	ldr	r2, [pc, #344]	@ (8002ab4 <HAL_TIM_MspPostInit+0x178>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d11d      	bne.n	800299a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	4b56      	ldr	r3, [pc, #344]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	4a55      	ldr	r2, [pc, #340]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	@ 0x30
 800296a:	4b53      	ldr	r3, [pc, #332]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002976:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800297a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002988:	2301      	movs	r3, #1
 800298a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	4619      	mov	r1, r3
 8002992:	484a      	ldr	r0, [pc, #296]	@ (8002abc <HAL_TIM_MspPostInit+0x180>)
 8002994:	f001 fe1c 	bl	80045d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002998:	e087      	b.n	8002aaa <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a2:	d11d      	bne.n	80029e0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	4a43      	ldr	r2, [pc, #268]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b0:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80029bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029ce:	2301      	movs	r3, #1
 80029d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4619      	mov	r1, r3
 80029d8:	4838      	ldr	r0, [pc, #224]	@ (8002abc <HAL_TIM_MspPostInit+0x180>)
 80029da:	f001 fdf9 	bl	80045d0 <HAL_GPIO_Init>
}
 80029de:	e064      	b.n	8002aaa <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a36      	ldr	r2, [pc, #216]	@ (8002ac0 <HAL_TIM_MspPostInit+0x184>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d11c      	bne.n	8002a24 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	4b33      	ldr	r3, [pc, #204]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a32      	ldr	r2, [pc, #200]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b30      	ldr	r3, [pc, #192]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002a02:	2310      	movs	r3, #16
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a12:	2302      	movs	r3, #2
 8002a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4829      	ldr	r0, [pc, #164]	@ (8002ac4 <HAL_TIM_MspPostInit+0x188>)
 8002a1e:	f001 fdd7 	bl	80045d0 <HAL_GPIO_Init>
}
 8002a22:	e042      	b.n	8002aaa <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a27      	ldr	r2, [pc, #156]	@ (8002ac8 <HAL_TIM_MspPostInit+0x18c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d11c      	bne.n	8002a68 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a2e:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	4a21      	ldr	r2, [pc, #132]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a56:	2302      	movs	r3, #2
 8002a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f107 031c 	add.w	r3, r7, #28
 8002a5e:	4619      	mov	r1, r3
 8002a60:	481a      	ldr	r0, [pc, #104]	@ (8002acc <HAL_TIM_MspPostInit+0x190>)
 8002a62:	f001 fdb5 	bl	80045d0 <HAL_GPIO_Init>
}
 8002a66:	e020      	b.n	8002aaa <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	@ (8002ad0 <HAL_TIM_MspPostInit+0x194>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d11b      	bne.n	8002aaa <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a72:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	4a10      	ldr	r2, [pc, #64]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 8002a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab8 <HAL_TIM_MspPostInit+0x17c>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002a8a:	2340      	movs	r3, #64	@ 0x40
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a9a:	2309      	movs	r3, #9
 8002a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002a9e:	f107 031c 	add.w	r3, r7, #28
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	480b      	ldr	r0, [pc, #44]	@ (8002ad4 <HAL_TIM_MspPostInit+0x198>)
 8002aa6:	f001 fd93 	bl	80045d0 <HAL_GPIO_Init>
}
 8002aaa:	bf00      	nop
 8002aac:	3730      	adds	r7, #48	@ 0x30
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40020400 	.word	0x40020400
 8002ac8:	40000c00 	.word	0x40000c00
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	40001800 	.word	0x40001800
 8002ad4:	40021c00 	.word	0x40021c00

08002ad8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002ade:	4a15      	ldr	r2, [pc, #84]	@ (8002b34 <MX_USART1_UART_Init+0x5c>)
 8002ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002ae4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aea:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002afe:	220c      	movs	r2, #12
 8002b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b1a:	4805      	ldr	r0, [pc, #20]	@ (8002b30 <MX_USART1_UART_Init+0x58>)
 8002b1c:	f009 f956 	bl	800bdcc <HAL_UART_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b26:	f7fe fe33 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000a10 	.word	0x20000a10
 8002b34:	40011000 	.word	0x40011000

08002b38 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b3e:	4a15      	ldr	r2, [pc, #84]	@ (8002b94 <MX_USART6_UART_Init+0x5c>)
 8002b40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002b42:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b4a:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b5e:	220c      	movs	r2, #12
 8002b60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b68:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b7a:	4805      	ldr	r0, [pc, #20]	@ (8002b90 <MX_USART6_UART_Init+0x58>)
 8002b7c:	f009 f926 	bl	800bdcc <HAL_UART_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002b86:	f7fe fe03 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000a98 	.word	0x20000a98
 8002b94:	40011400 	.word	0x40011400

08002b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0ae      	sub	sp, #184	@ 0xb8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb0:	f107 0320 	add.w	r3, r7, #32
 8002bb4:	2284      	movs	r2, #132	@ 0x84
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f00e fc71 	bl	80114a0 <memset>
  if(uartHandle->Instance==USART1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a53      	ldr	r2, [pc, #332]	@ (8002d10 <HAL_UART_MspInit+0x178>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d15d      	bne.n	8002c84 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bc8:	2340      	movs	r3, #64	@ 0x40
 8002bca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd0:	f107 0320 	add.w	r3, r7, #32
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f005 fa6f 	bl	80080b8 <HAL_RCCEx_PeriphCLKConfig>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002be0:	f7fe fdd6 	bl	8001790 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002be4:	4b4b      	ldr	r3, [pc, #300]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be8:	4a4a      	ldr	r2, [pc, #296]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002bea:	f043 0310 	orr.w	r3, r3, #16
 8002bee:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf0:	4b48      	ldr	r3, [pc, #288]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfc:	4b45      	ldr	r3, [pc, #276]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	4a44      	ldr	r2, [pc, #272]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002c02:	f043 0302 	orr.w	r3, r3, #2
 8002c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c08:	4b42      	ldr	r3, [pc, #264]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c14:	4b3f      	ldr	r3, [pc, #252]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c18:	4a3e      	ldr	r2, [pc, #248]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c20:	4b3c      	ldr	r3, [pc, #240]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002c2c:	2380      	movs	r3, #128	@ 0x80
 8002c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c44:	2307      	movs	r3, #7
 8002c46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002c4a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4831      	ldr	r0, [pc, #196]	@ (8002d18 <HAL_UART_MspInit+0x180>)
 8002c52:	f001 fcbd 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002c56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c70:	2307      	movs	r3, #7
 8002c72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002c76:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4827      	ldr	r0, [pc, #156]	@ (8002d1c <HAL_UART_MspInit+0x184>)
 8002c7e:	f001 fca7 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002c82:	e040      	b.n	8002d06 <HAL_UART_MspInit+0x16e>
  else if(uartHandle->Instance==USART6)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a25      	ldr	r2, [pc, #148]	@ (8002d20 <HAL_UART_MspInit+0x188>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d13b      	bne.n	8002d06 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002c8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c92:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002c94:	2300      	movs	r3, #0
 8002c96:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c98:	f107 0320 	add.w	r3, r7, #32
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f005 fa0b 	bl	80080b8 <HAL_RCCEx_PeriphCLKConfig>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002ca8:	f7fe fd72 	bl	8001790 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb0:	4a18      	ldr	r2, [pc, #96]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002cb2:	f043 0320 	orr.w	r3, r3, #32
 8002cb6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cb8:	4b16      	ldr	r3, [pc, #88]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc4:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	4a12      	ldr	r2, [pc, #72]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd0:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <HAL_UART_MspInit+0x17c>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002cdc:	23c0      	movs	r3, #192	@ 0xc0
 8002cde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4808      	ldr	r0, [pc, #32]	@ (8002d24 <HAL_UART_MspInit+0x18c>)
 8002d02:	f001 fc65 	bl	80045d0 <HAL_GPIO_Init>
}
 8002d06:	bf00      	nop
 8002d08:	37b8      	adds	r7, #184	@ 0xb8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40011000 	.word	0x40011000
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40020400 	.word	0x40020400
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	40011400 	.word	0x40011400
 8002d24:	40020800 	.word	0x40020800

08002d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d2c:	f7ff faba 	bl	80022a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d30:	480c      	ldr	r0, [pc, #48]	@ (8002d64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d32:	490d      	ldr	r1, [pc, #52]	@ (8002d68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d34:	4a0d      	ldr	r2, [pc, #52]	@ (8002d6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d38:	e002      	b.n	8002d40 <LoopCopyDataInit>

08002d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3e:	3304      	adds	r3, #4

08002d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d44:	d3f9      	bcc.n	8002d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d48:	4c0a      	ldr	r4, [pc, #40]	@ (8002d74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d4c:	e001      	b.n	8002d52 <LoopFillZerobss>

08002d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d50:	3204      	adds	r2, #4

08002d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d54:	d3fb      	bcc.n	8002d4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d56:	f00e fbc1 	bl	80114dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d5a:	f7fe fc23 	bl	80015a4 <main>
  bx  lr    
 8002d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d68:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002d6c:	0801161c 	.word	0x0801161c
  ldr r2, =_sbss
 8002d70:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8002d74:	20001580 	.word	0x20001580

08002d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d78:	e7fe      	b.n	8002d78 <ADC_IRQHandler>

08002d7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7e:	2003      	movs	r0, #3
 8002d80:	f000 fb8d 	bl	800349e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d84:	200f      	movs	r0, #15
 8002d86:	f7ff f985 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8a:	f7ff f95f 	bl	800204c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d98:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_IncTick+0x20>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_IncTick+0x24>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	4a04      	ldr	r2, [pc, #16]	@ (8002db8 <HAL_IncTick+0x24>)
 8002da6:	6013      	str	r3, [r2, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000008 	.word	0x20000008
 8002db8:	20000b20 	.word	0x20000b20

08002dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	@ (8002dd0 <HAL_GetTick+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000b20 	.word	0x20000b20

08002dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff ffee 	bl	8002dbc <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d005      	beq.n	8002dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <HAL_Delay+0x44>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dfa:	bf00      	nop
 8002dfc:	f7ff ffde 	bl	8002dbc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8f7      	bhi.n	8002dfc <HAL_Delay+0x28>
  {
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000008 	.word	0x20000008

08002e1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e031      	b.n	8002e96 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fd fbcc 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d116      	bne.n	8002e88 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <HAL_ADC_Init+0x84>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	f043 0202 	orr.w	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f970 	bl	8003150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e86:	e001      	b.n	8002e8c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	ffffeefd 	.word	0xffffeefd

08002ea4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e136      	b.n	800312e <HAL_ADC_ConfigChannel+0x28a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	d93a      	bls.n	8002f46 <HAL_ADC_ConfigChannel+0xa2>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ed8:	d035      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68d9      	ldr	r1, [r3, #12]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	3b1e      	subs	r3, #30
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	400a      	ands	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a8d      	ldr	r2, [pc, #564]	@ (800313c <HAL_ADC_ConfigChannel+0x298>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10a      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68d9      	ldr	r1, [r3, #12]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	061a      	lsls	r2, r3, #24
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f1e:	e035      	b.n	8002f8c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68d9      	ldr	r1, [r3, #12]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4618      	mov	r0, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4403      	add	r3, r0
 8002f38:	3b1e      	subs	r3, #30
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f44:	e022      	b.n	8002f8c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6919      	ldr	r1, [r3, #16]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	2207      	movs	r2, #7
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43da      	mvns	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	400a      	ands	r2, r1
 8002f68:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6919      	ldr	r1, [r3, #16]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4403      	add	r3, r0
 8002f82:	409a      	lsls	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d824      	bhi.n	8002fde <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b05      	subs	r3, #5
 8002fa6:	221f      	movs	r2, #31
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43da      	mvns	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	400a      	ands	r2, r1
 8002fb4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	3b05      	subs	r3, #5
 8002fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fdc:	e04c      	b.n	8003078 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d824      	bhi.n	8003030 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b23      	subs	r3, #35	@ 0x23
 8002ff8:	221f      	movs	r2, #31
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	400a      	ands	r2, r1
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	3b23      	subs	r3, #35	@ 0x23
 8003022:	fa00 f203 	lsl.w	r2, r0, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	631a      	str	r2, [r3, #48]	@ 0x30
 800302e:	e023      	b.n	8003078 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b41      	subs	r3, #65	@ 0x41
 8003042:	221f      	movs	r2, #31
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43da      	mvns	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	400a      	ands	r2, r1
 8003050:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	4618      	mov	r0, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	3b41      	subs	r3, #65	@ 0x41
 800306c:	fa00 f203 	lsl.w	r2, r0, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a30      	ldr	r2, [pc, #192]	@ (8003140 <HAL_ADC_ConfigChannel+0x29c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d10a      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x1f4>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800308a:	d105      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800308c:	4b2d      	ldr	r3, [pc, #180]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 8003092:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003096:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a28      	ldr	r2, [pc, #160]	@ (8003140 <HAL_ADC_ConfigChannel+0x29c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d10f      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x21e>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b12      	cmp	r3, #18
 80030a8:	d10b      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80030aa:	4b26      	ldr	r3, [pc, #152]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a25      	ldr	r2, [pc, #148]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80030b4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030b6:	4b23      	ldr	r3, [pc, #140]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003140 <HAL_ADC_ConfigChannel+0x29c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d12b      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x280>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <HAL_ADC_ConfigChannel+0x298>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <HAL_ADC_ConfigChannel+0x23a>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b11      	cmp	r3, #17
 80030dc:	d122      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80030de:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80030e8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030ea:	4b16      	ldr	r3, [pc, #88]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <HAL_ADC_ConfigChannel+0x2a0>)
 80030f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a10      	ldr	r2, [pc, #64]	@ (800313c <HAL_ADC_ConfigChannel+0x298>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d111      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003100:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <HAL_ADC_ConfigChannel+0x2a4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a11      	ldr	r2, [pc, #68]	@ (800314c <HAL_ADC_ConfigChannel+0x2a8>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0c9a      	lsrs	r2, r3, #18
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003116:	e002      	b.n	800311e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3b01      	subs	r3, #1
 800311c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f9      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	10000012 	.word	0x10000012
 8003140:	40012000 	.word	0x40012000
 8003144:	40012300 	.word	0x40012300
 8003148:	20000000 	.word	0x20000000
 800314c:	431bde83 	.word	0x431bde83

08003150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003158:	4b78      	ldr	r3, [pc, #480]	@ (800333c <ADC_Init+0x1ec>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a77      	ldr	r2, [pc, #476]	@ (800333c <ADC_Init+0x1ec>)
 800315e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003162:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003164:	4b75      	ldr	r3, [pc, #468]	@ (800333c <ADC_Init+0x1ec>)
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4973      	ldr	r1, [pc, #460]	@ (800333c <ADC_Init+0x1ec>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	021a      	lsls	r2, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	4a58      	ldr	r2, [pc, #352]	@ (8003340 <ADC_Init+0x1f0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6899      	ldr	r1, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	e00f      	b.n	800324a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003248:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0202 	bic.w	r2, r2, #2
 8003258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6899      	ldr	r1, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	005a      	lsls	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003286:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003296:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	3b01      	subs	r3, #1
 80032a4:	035a      	lsls	r2, r3, #13
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	e007      	b.n	80032c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	3b01      	subs	r3, #1
 80032dc:	051a      	lsls	r2, r3, #20
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6899      	ldr	r1, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003302:	025a      	lsls	r2, r3, #9
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	029a      	lsls	r2, r3, #10
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40012300 	.word	0x40012300
 8003340:	0f000001 	.word	0x0f000001

08003344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <__NVIC_SetPriorityGrouping+0x40>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 800336e:	4313      	orrs	r3, r2
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <__NVIC_SetPriorityGrouping+0x40>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00
 8003388:	05fa0000 	.word	0x05fa0000

0800338c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003390:	4b04      	ldr	r3, [pc, #16]	@ (80033a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 0307 	and.w	r3, r3, #7
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0b      	blt.n	80033d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4907      	ldr	r1, [pc, #28]	@ (80033e0 <__NVIC_EnableIRQ+0x38>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2001      	movs	r0, #1
 80033ca:	fa00 f202 	lsl.w	r2, r0, r2
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db0a      	blt.n	800340e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	490c      	ldr	r1, [pc, #48]	@ (8003430 <__NVIC_SetPriority+0x4c>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340c:	e00a      	b.n	8003424 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4908      	ldr	r1, [pc, #32]	@ (8003434 <__NVIC_SetPriority+0x50>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3b04      	subs	r3, #4
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	440b      	add	r3, r1
 8003422:	761a      	strb	r2, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	@ 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	bf28      	it	cs
 8003456:	2304      	movcs	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3304      	adds	r3, #4
 800345e:	2b06      	cmp	r3, #6
 8003460:	d902      	bls.n	8003468 <NVIC_EncodePriority+0x30>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b03      	subs	r3, #3
 8003466:	e000      	b.n	800346a <NVIC_EncodePriority+0x32>
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	401a      	ands	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003480:	f04f 31ff 	mov.w	r1, #4294967295
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43d9      	mvns	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	4313      	orrs	r3, r2
         );
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	@ 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ff4c 	bl	8003344 <__NVIC_SetPriorityGrouping>
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c6:	f7ff ff61 	bl	800338c <__NVIC_GetPriorityGrouping>
 80034ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	6978      	ldr	r0, [r7, #20]
 80034d2:	f7ff ffb1 	bl	8003438 <NVIC_EncodePriority>
 80034d6:	4602      	mov	r2, r0
 80034d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff80 	bl	80033e4 <__NVIC_SetPriority>
}
 80034e4:	bf00      	nop
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff54 	bl	80033a8 <__NVIC_EnableIRQ>
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e054      	b.n	80035c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7f5b      	ldrb	r3, [r3, #29]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd f8d0 	bl	80006d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	791b      	ldrb	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a22      	ldr	r2, [pc, #136]	@ (80035cc <HAL_CRC_Init+0xc4>)
 8003544:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0218 	bic.w	r2, r2, #24
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	e00c      	b.n	8003572 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6899      	ldr	r1, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	461a      	mov	r2, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f834 	bl	80035d0 <HAL_CRCEx_Polynomial_Set>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e028      	b.n	80035c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	795b      	ldrb	r3, [r3, #5]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f04f 32ff 	mov.w	r2, #4294967295
 8003582:	611a      	str	r2, [r3, #16]
 8003584:	e004      	b.n	8003590 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6912      	ldr	r2, [r2, #16]
 800358e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	04c11db7 	.word	0x04c11db7

080035d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80035e0:	231f      	movs	r3, #31
 80035e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
 80035f2:	e063      	b.n	80036bc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80035f4:	bf00      	nop
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	613a      	str	r2, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d009      	beq.n	8003614 <HAL_CRCEx_Polynomial_Set+0x44>
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b18      	cmp	r3, #24
 8003618:	d846      	bhi.n	80036a8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800361a:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <HAL_CRCEx_Polynomial_Set+0x50>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	080036af 	.word	0x080036af
 8003624:	080036a9 	.word	0x080036a9
 8003628:	080036a9 	.word	0x080036a9
 800362c:	080036a9 	.word	0x080036a9
 8003630:	080036a9 	.word	0x080036a9
 8003634:	080036a9 	.word	0x080036a9
 8003638:	080036a9 	.word	0x080036a9
 800363c:	080036a9 	.word	0x080036a9
 8003640:	0800369d 	.word	0x0800369d
 8003644:	080036a9 	.word	0x080036a9
 8003648:	080036a9 	.word	0x080036a9
 800364c:	080036a9 	.word	0x080036a9
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036a9 	.word	0x080036a9
 8003658:	080036a9 	.word	0x080036a9
 800365c:	080036a9 	.word	0x080036a9
 8003660:	08003691 	.word	0x08003691
 8003664:	080036a9 	.word	0x080036a9
 8003668:	080036a9 	.word	0x080036a9
 800366c:	080036a9 	.word	0x080036a9
 8003670:	080036a9 	.word	0x080036a9
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036a9 	.word	0x080036a9
 800367c:	080036a9 	.word	0x080036a9
 8003680:	08003685 	.word	0x08003685
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b06      	cmp	r3, #6
 8003688:	d913      	bls.n	80036b2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800368e:	e010      	b.n	80036b2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b07      	cmp	r3, #7
 8003694:	d90f      	bls.n	80036b6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800369a:	e00c      	b.n	80036b6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	d90b      	bls.n	80036ba <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80036a6:	e008      	b.n	80036ba <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	75fb      	strb	r3, [r7, #23]
        break;
 80036ac:	e006      	b.n	80036bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80036ae:	bf00      	nop
 80036b0:	e004      	b.n	80036bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80036b2:	bf00      	nop
 80036b4:	e002      	b.n	80036bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80036b6:	bf00      	nop
 80036b8:	e000      	b.n	80036bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80036ba:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10d      	bne.n	80036de <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 0118 	bic.w	r1, r3, #24
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80036de:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e069      	b.n	80037d2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd f834 	bl	8000778 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6819      	ldr	r1, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b2a      	ldr	r3, [pc, #168]	@ (80037dc <HAL_DCMI_Init+0xf0>)
 8003732:	400b      	ands	r3, r1
 8003734:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6819      	ldr	r1, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800374a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003756:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003762:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800376e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800377a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b10      	cmp	r3, #16
 800378a:	d112      	bne.n	80037b2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7f1b      	ldrb	r3, [r3, #28]
 8003790:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7f5b      	ldrb	r3, [r3, #29]
 8003796:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003798:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	7f9b      	ldrb	r3, [r3, #30]
 800379e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80037a0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	7fdb      	ldrb	r3, [r3, #31]
 80037a8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80037ae:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80037b0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 021e 	orr.w	r2, r2, #30
 80037c0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	ffe0f007 	.word	0xffe0f007

080037e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037ec:	f7ff fae6 	bl	8002dbc <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e099      	b.n	8003930 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800381c:	e00f      	b.n	800383e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800381e:	f7ff facd 	bl	8002dbc <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b05      	cmp	r3, #5
 800382a:	d908      	bls.n	800383e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2203      	movs	r2, #3
 8003836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e078      	b.n	8003930 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e8      	bne.n	800381e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4b38      	ldr	r3, [pc, #224]	@ (8003938 <HAL_DMA_Init+0x158>)
 8003858:	4013      	ands	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800386a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	2b04      	cmp	r3, #4
 8003896:	d107      	bne.n	80038a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	4313      	orrs	r3, r2
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 0307 	bic.w	r3, r3, #7
 80038be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d117      	bne.n	8003902 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00e      	beq.n	8003902 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8bd 	bl	8003a64 <DMA_CheckFifoParam>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2240      	movs	r2, #64	@ 0x40
 80038f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80038fe:	2301      	movs	r3, #1
 8003900:	e016      	b.n	8003930 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f874 	bl	80039f8 <DMA_CalcBaseAndBitshift>
 8003910:	4603      	mov	r3, r0
 8003912:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	223f      	movs	r2, #63	@ 0x3f
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	f010803f 	.word	0xf010803f

0800393c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e050      	b.n	80039f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d101      	bne.n	800395e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	e048      	b.n	80039f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2200      	movs	r2, #0
 800397c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2200      	movs	r2, #0
 8003994:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2221      	movs	r2, #33	@ 0x21
 800399c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f82a 	bl	80039f8 <DMA_CalcBaseAndBitshift>
 80039a4:	4603      	mov	r3, r0
 80039a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ac:	223f      	movs	r2, #63	@ 0x3f
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	3b10      	subs	r3, #16
 8003a08:	4a13      	ldr	r2, [pc, #76]	@ (8003a58 <DMA_CalcBaseAndBitshift+0x60>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a12:	4a12      	ldr	r2, [pc, #72]	@ (8003a5c <DMA_CalcBaseAndBitshift+0x64>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d908      	bls.n	8003a38 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a60 <DMA_CalcBaseAndBitshift+0x68>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	1d1a      	adds	r2, r3, #4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a36:	e006      	b.n	8003a46 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <DMA_CalcBaseAndBitshift+0x68>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	aaaaaaab 	.word	0xaaaaaaab
 8003a5c:	080115f0 	.word	0x080115f0
 8003a60:	fffffc00 	.word	0xfffffc00

08003a64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11f      	bne.n	8003abe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d856      	bhi.n	8003b32 <DMA_CheckFifoParam+0xce>
 8003a84:	a201      	add	r2, pc, #4	@ (adr r2, 8003a8c <DMA_CheckFifoParam+0x28>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003aaf 	.word	0x08003aaf
 8003a94:	08003a9d 	.word	0x08003a9d
 8003a98:	08003b33 	.word	0x08003b33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d046      	beq.n	8003b36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e043      	b.n	8003b36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ab6:	d140      	bne.n	8003b3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003abc:	e03d      	b.n	8003b3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac6:	d121      	bne.n	8003b0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d837      	bhi.n	8003b3e <DMA_CheckFifoParam+0xda>
 8003ace:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <DMA_CheckFifoParam+0x70>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003aeb 	.word	0x08003aeb
 8003adc:	08003ae5 	.word	0x08003ae5
 8003ae0:	08003afd 	.word	0x08003afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae8:	e030      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d025      	beq.n	8003b42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afa:	e022      	b.n	8003b42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b04:	d11f      	bne.n	8003b46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b0a:	e01c      	b.n	8003b46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d903      	bls.n	8003b1a <DMA_CheckFifoParam+0xb6>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d003      	beq.n	8003b20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b18:	e018      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1e:	e015      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b30:	e00b      	b.n	8003b4a <DMA_CheckFifoParam+0xe6>
      break;
 8003b32:	bf00      	nop
 8003b34:	e00a      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b36:	bf00      	nop
 8003b38:	e008      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e006      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e004      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop

08003b5c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e039      	b.n	8003be2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fc fee8 	bl	8000958 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bac:	f023 0107 	bic.w	r1, r3, #7
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <HAL_DMA2D_Init+0x90>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68d1      	ldr	r1, [r2, #12]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	ffffc000 	.word	0xffffc000

08003bf0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d026      	beq.n	8003c60 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d021      	beq.n	8003c60 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2204      	movs	r2, #4
 8003c44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d026      	beq.n	8003cb8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d021      	beq.n	8003cb8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c82:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c90:	f043 0202 	orr.w	r2, r3, #2
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d026      	beq.n	8003d10 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d021      	beq.n	8003d10 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cda:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	f043 0204 	orr.w	r2, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d013      	beq.n	8003d42 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00e      	beq.n	8003d42 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d32:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f853 	bl	8003de8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d024      	beq.n	8003d96 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01f      	beq.n	8003d96 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d64:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01f      	beq.n	8003de0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01a      	beq.n	8003de0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003db8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f80e 	bl	8003dfc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_DMA2D_ConfigLayer+0x20>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e079      	b.n	8003f24 <HAL_DMA2D_ConfigLayer+0x114>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	3318      	adds	r3, #24
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	041b      	lsls	r3, r3, #16
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003e5a:	4b35      	ldr	r3, [pc, #212]	@ (8003f30 <HAL_DMA2D_ConfigLayer+0x120>)
 8003e5c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b0a      	cmp	r3, #10
 8003e64:	d003      	beq.n	8003e6e <HAL_DMA2D_ConfigLayer+0x5e>
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b09      	cmp	r3, #9
 8003e6c:	d107      	bne.n	8003e7e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	e005      	b.n	8003e8a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	061b      	lsls	r3, r3, #24
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d120      	bne.n	8003ed2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	ea02 0103 	and.w	r1, r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b0a      	cmp	r3, #10
 8003eb8:	d003      	beq.n	8003ec2 <HAL_DMA2D_ConfigLayer+0xb2>
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b09      	cmp	r3, #9
 8003ec0:	d127      	bne.n	8003f12 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003ece:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ed0:	e01f      	b.n	8003f12 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	ea02 0103 	and.w	r1, r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b0a      	cmp	r3, #10
 8003efa:	d003      	beq.n	8003f04 <HAL_DMA2D_ConfigLayer+0xf4>
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b09      	cmp	r3, #9
 8003f02:	d106      	bne.n	8003f12 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003f10:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	ff03000f 	.word	0xff03000f

08003f34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e086      	b.n	8004054 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2223      	movs	r2, #35	@ 0x23
 8003f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7fc fd71 	bl	8000a40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800405c <HAL_ETH_Init+0x128>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	4a3e      	ldr	r2, [pc, #248]	@ (800405c <HAL_ETH_Init+0x128>)
 8003f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800405c <HAL_ETH_Init+0x128>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003f76:	4b3a      	ldr	r3, [pc, #232]	@ (8004060 <HAL_ETH_Init+0x12c>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4a39      	ldr	r2, [pc, #228]	@ (8004060 <HAL_ETH_Init+0x12c>)
 8003f7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f80:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003f82:	4b37      	ldr	r3, [pc, #220]	@ (8004060 <HAL_ETH_Init+0x12c>)
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	4935      	ldr	r1, [pc, #212]	@ (8004060 <HAL_ETH_Init+0x12c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003f90:	4b33      	ldr	r3, [pc, #204]	@ (8004060 <HAL_ETH_Init+0x12c>)
 8003f92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003faa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fac:	f7fe ff06 	bl	8002dbc <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003fb2:	e011      	b.n	8003fd8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fb4:	f7fe ff02 	bl	8002dbc <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003fc2:	d909      	bls.n	8003fd8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	22e0      	movs	r2, #224	@ 0xe0
 8003fd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e03d      	b.n	8004054 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e4      	bne.n	8003fb4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f97a 	bl	80042e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fa25 	bl	8004440 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa7b 	bl	80044f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	461a      	mov	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f9e3 	bl	80043d0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004018:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b0f      	ldr	r3, [pc, #60]	@ (8004064 <HAL_ETH_Init+0x130>)
 8004028:	430b      	orrs	r3, r1
 800402a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800403e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2210      	movs	r2, #16
 800404e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40023800 	.word	0x40023800
 8004060:	40013800 	.word	0x40013800
 8004064:	00020060 	.word	0x00020060

08004068 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4b53      	ldr	r3, [pc, #332]	@ (80041cc <ETH_SetMACConfig+0x164>)
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	7b9b      	ldrb	r3, [r3, #14]
 8004086:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	7c12      	ldrb	r2, [r2, #16]
 800408c:	2a00      	cmp	r2, #0
 800408e:	d102      	bne.n	8004096 <ETH_SetMACConfig+0x2e>
 8004090:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004094:	e000      	b.n	8004098 <ETH_SetMACConfig+0x30>
 8004096:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004098:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	7c52      	ldrb	r2, [r2, #17]
 800409e:	2a00      	cmp	r2, #0
 80040a0:	d102      	bne.n	80040a8 <ETH_SetMACConfig+0x40>
 80040a2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80040a6:	e000      	b.n	80040aa <ETH_SetMACConfig+0x42>
 80040a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80040b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	7fdb      	ldrb	r3, [r3, #31]
 80040b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80040b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	7f92      	ldrb	r2, [r2, #30]
 80040c4:	2a00      	cmp	r2, #0
 80040c6:	d102      	bne.n	80040ce <ETH_SetMACConfig+0x66>
 80040c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040cc:	e000      	b.n	80040d0 <ETH_SetMACConfig+0x68>
 80040ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80040d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	7f1b      	ldrb	r3, [r3, #28]
 80040d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	791b      	ldrb	r3, [r3, #4]
 80040e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80040e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	d102      	bne.n	80040f8 <ETH_SetMACConfig+0x90>
 80040f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040f6:	e000      	b.n	80040fa <ETH_SetMACConfig+0x92>
 80040f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	7bdb      	ldrb	r3, [r3, #15]
 8004100:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004102:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004108:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004110:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004112:	4313      	orrs	r3, r2
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800412a:	2001      	movs	r0, #1
 800412c:	f7fe fe52 	bl	8002dd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004146:	4013      	ands	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800414e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004156:	2a00      	cmp	r2, #0
 8004158:	d101      	bne.n	800415e <ETH_SetMACConfig+0xf6>
 800415a:	2280      	movs	r2, #128	@ 0x80
 800415c:	e000      	b.n	8004160 <ETH_SetMACConfig+0xf8>
 800415e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004160:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004166:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800416e:	2a01      	cmp	r2, #1
 8004170:	d101      	bne.n	8004176 <ETH_SetMACConfig+0x10e>
 8004172:	2208      	movs	r2, #8
 8004174:	e000      	b.n	8004178 <ETH_SetMACConfig+0x110>
 8004176:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004178:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004180:	2a01      	cmp	r2, #1
 8004182:	d101      	bne.n	8004188 <ETH_SetMACConfig+0x120>
 8004184:	2204      	movs	r2, #4
 8004186:	e000      	b.n	800418a <ETH_SetMACConfig+0x122>
 8004188:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800418a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004192:	2a01      	cmp	r2, #1
 8004194:	d101      	bne.n	800419a <ETH_SetMACConfig+0x132>
 8004196:	2202      	movs	r2, #2
 8004198:	e000      	b.n	800419c <ETH_SetMACConfig+0x134>
 800419a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800419c:	4313      	orrs	r3, r2
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041b4:	2001      	movs	r0, #1
 80041b6:	f7fe fe0d 	bl	8002dd4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	619a      	str	r2, [r3, #24]
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	fd20810f 	.word	0xfd20810f

080041d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4b3d      	ldr	r3, [pc, #244]	@ (80042e0 <ETH_SetDMAConfig+0x110>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	7b1b      	ldrb	r3, [r3, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <ETH_SetDMAConfig+0x2c>
 80041f6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80041fa:	e000      	b.n	80041fe <ETH_SetDMAConfig+0x2e>
 80041fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	7b5b      	ldrb	r3, [r3, #13]
 8004202:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004204:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	7f52      	ldrb	r2, [r2, #29]
 800420a:	2a00      	cmp	r2, #0
 800420c:	d102      	bne.n	8004214 <ETH_SetDMAConfig+0x44>
 800420e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004212:	e000      	b.n	8004216 <ETH_SetDMAConfig+0x46>
 8004214:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004216:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	7b9b      	ldrb	r3, [r3, #14]
 800421c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800421e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004224:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	7f1b      	ldrb	r3, [r3, #28]
 800422a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800422c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	7f9b      	ldrb	r3, [r3, #30]
 8004232:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004234:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800423a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004242:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004244:	4313      	orrs	r3, r2
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004254:	461a      	mov	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004266:	2001      	movs	r0, #1
 8004268:	f7fe fdb4 	bl	8002dd4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004274:	461a      	mov	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	791b      	ldrb	r3, [r3, #4]
 800427e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004284:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800428a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004290:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004298:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800429a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80042a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042c4:	2001      	movs	r0, #1
 80042c6:	f7fe fd85 	bl	8002dd4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042d2:	461a      	mov	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6013      	str	r3, [r2, #0]
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	f8de3f23 	.word	0xf8de3f23

080042e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0a6      	sub	sp, #152	@ 0x98
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80042f8:	2300      	movs	r3, #0
 80042fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004308:	2300      	movs	r3, #0
 800430a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800431a:	2300      	movs	r3, #0
 800431c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004326:	2300      	movs	r3, #0
 8004328:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004330:	2300      	movs	r3, #0
 8004332:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800433a:	2300      	movs	r3, #0
 800433c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004340:	2300      	movs	r3, #0
 8004342:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800434c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004350:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004352:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004356:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800435e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fe7f 	bl	8004068 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800436a:	2301      	movs	r3, #1
 800436c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800436e:	2301      	movs	r3, #1
 8004370:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004378:	2301      	movs	r3, #1
 800437a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004386:	2300      	movs	r3, #0
 8004388:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800438c:	2300      	movs	r3, #0
 800438e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004396:	2301      	movs	r3, #1
 8004398:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800439a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800439e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80043a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80043a4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80043a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043aa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80043ba:	f107 0308 	add.w	r3, r7, #8
 80043be:	4619      	mov	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff05 	bl	80041d0 <ETH_SetDMAConfig>
}
 80043c6:	bf00      	nop
 80043c8:	3798      	adds	r7, #152	@ 0x98
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3305      	adds	r3, #5
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	3204      	adds	r2, #4
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	4b11      	ldr	r3, [pc, #68]	@ (8004438 <ETH_MACAddressConfig+0x68>)
 80043f2:	4413      	add	r3, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3303      	adds	r3, #3
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	061a      	lsls	r2, r3, #24
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3302      	adds	r3, #2
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3301      	adds	r3, #1
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	4313      	orrs	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	4b06      	ldr	r3, [pc, #24]	@ (800443c <ETH_MACAddressConfig+0x6c>)
 8004422:	4413      	add	r3, r2
 8004424:	461a      	mov	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6013      	str	r3, [r2, #0]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40028040 	.word	0x40028040
 800443c:	40028044 	.word	0x40028044

08004440 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	e03e      	b.n	80044cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68d9      	ldr	r1, [r3, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	440b      	add	r3, r1
 800445e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2200      	movs	r2, #0
 8004476:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	3206      	adds	r2, #6
 8004480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d80c      	bhi.n	80044b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68d9      	ldr	r1, [r3, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	440b      	add	r3, r1
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	e004      	b.n	80044ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	461a      	mov	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3301      	adds	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d9bd      	bls.n	800444e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e4:	611a      	str	r2, [r3, #16]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e048      	b.n	8004592 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6919      	ldr	r1, [r3, #16]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	440b      	add	r3, r1
 8004510:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2200      	movs	r2, #0
 800451c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2200      	movs	r2, #0
 8004522:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2200      	movs	r2, #0
 800452e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2200      	movs	r2, #0
 8004534:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800453c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	3212      	adds	r2, #18
 800455e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d80c      	bhi.n	8004582 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6919      	ldr	r1, [r3, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	440b      	add	r3, r1
 800457a:	461a      	mov	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	60da      	str	r2, [r3, #12]
 8004580:	e004      	b.n	800458c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d9b3      	bls.n	8004500 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045c2:	60da      	str	r2, [r3, #12]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	@ 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	e175      	b.n	80048dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045f0:	2201      	movs	r2, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	429a      	cmp	r2, r3
 800460a:	f040 8164 	bne.w	80048d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d005      	beq.n	8004626 <HAL_GPIO_Init+0x56>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d130      	bne.n	8004688 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	2203      	movs	r2, #3
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800465c:	2201      	movs	r2, #1
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 0201 	and.w	r2, r3, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b03      	cmp	r3, #3
 8004692:	d017      	beq.n	80046c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	2203      	movs	r2, #3
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d123      	bne.n	8004718 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	08da      	lsrs	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3208      	adds	r2, #8
 80046d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	220f      	movs	r2, #15
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	08da      	lsrs	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3208      	adds	r2, #8
 8004712:	69b9      	ldr	r1, [r7, #24]
 8004714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	2203      	movs	r2, #3
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0203 	and.w	r2, r3, #3
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80be 	beq.w	80048d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800475a:	4b66      	ldr	r3, [pc, #408]	@ (80048f4 <HAL_GPIO_Init+0x324>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	4a65      	ldr	r2, [pc, #404]	@ (80048f4 <HAL_GPIO_Init+0x324>)
 8004760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004764:	6453      	str	r3, [r2, #68]	@ 0x44
 8004766:	4b63      	ldr	r3, [pc, #396]	@ (80048f4 <HAL_GPIO_Init+0x324>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004772:	4a61      	ldr	r2, [pc, #388]	@ (80048f8 <HAL_GPIO_Init+0x328>)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	3302      	adds	r3, #2
 800477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	220f      	movs	r2, #15
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a58      	ldr	r2, [pc, #352]	@ (80048fc <HAL_GPIO_Init+0x32c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d037      	beq.n	800480e <HAL_GPIO_Init+0x23e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a57      	ldr	r2, [pc, #348]	@ (8004900 <HAL_GPIO_Init+0x330>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d031      	beq.n	800480a <HAL_GPIO_Init+0x23a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a56      	ldr	r2, [pc, #344]	@ (8004904 <HAL_GPIO_Init+0x334>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02b      	beq.n	8004806 <HAL_GPIO_Init+0x236>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a55      	ldr	r2, [pc, #340]	@ (8004908 <HAL_GPIO_Init+0x338>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d025      	beq.n	8004802 <HAL_GPIO_Init+0x232>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a54      	ldr	r2, [pc, #336]	@ (800490c <HAL_GPIO_Init+0x33c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01f      	beq.n	80047fe <HAL_GPIO_Init+0x22e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a53      	ldr	r2, [pc, #332]	@ (8004910 <HAL_GPIO_Init+0x340>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d019      	beq.n	80047fa <HAL_GPIO_Init+0x22a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a52      	ldr	r2, [pc, #328]	@ (8004914 <HAL_GPIO_Init+0x344>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_GPIO_Init+0x226>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a51      	ldr	r2, [pc, #324]	@ (8004918 <HAL_GPIO_Init+0x348>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00d      	beq.n	80047f2 <HAL_GPIO_Init+0x222>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a50      	ldr	r2, [pc, #320]	@ (800491c <HAL_GPIO_Init+0x34c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <HAL_GPIO_Init+0x21e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a4f      	ldr	r2, [pc, #316]	@ (8004920 <HAL_GPIO_Init+0x350>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_GPIO_Init+0x21a>
 80047e6:	2309      	movs	r3, #9
 80047e8:	e012      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047ea:	230a      	movs	r3, #10
 80047ec:	e010      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047ee:	2308      	movs	r3, #8
 80047f0:	e00e      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047f2:	2307      	movs	r3, #7
 80047f4:	e00c      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047f6:	2306      	movs	r3, #6
 80047f8:	e00a      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047fa:	2305      	movs	r3, #5
 80047fc:	e008      	b.n	8004810 <HAL_GPIO_Init+0x240>
 80047fe:	2304      	movs	r3, #4
 8004800:	e006      	b.n	8004810 <HAL_GPIO_Init+0x240>
 8004802:	2303      	movs	r3, #3
 8004804:	e004      	b.n	8004810 <HAL_GPIO_Init+0x240>
 8004806:	2302      	movs	r3, #2
 8004808:	e002      	b.n	8004810 <HAL_GPIO_Init+0x240>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_GPIO_Init+0x240>
 800480e:	2300      	movs	r3, #0
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	f002 0203 	and.w	r2, r2, #3
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	4093      	lsls	r3, r2
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004820:	4935      	ldr	r1, [pc, #212]	@ (80048f8 <HAL_GPIO_Init+0x328>)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	3302      	adds	r3, #2
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800482e:	4b3d      	ldr	r3, [pc, #244]	@ (8004924 <HAL_GPIO_Init+0x354>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004852:	4a34      	ldr	r2, [pc, #208]	@ (8004924 <HAL_GPIO_Init+0x354>)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004858:	4b32      	ldr	r3, [pc, #200]	@ (8004924 <HAL_GPIO_Init+0x354>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800487c:	4a29      	ldr	r2, [pc, #164]	@ (8004924 <HAL_GPIO_Init+0x354>)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004882:	4b28      	ldr	r3, [pc, #160]	@ (8004924 <HAL_GPIO_Init+0x354>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004924 <HAL_GPIO_Init+0x354>)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004924 <HAL_GPIO_Init+0x354>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048d0:	4a14      	ldr	r2, [pc, #80]	@ (8004924 <HAL_GPIO_Init+0x354>)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3301      	adds	r3, #1
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	f67f ae86 	bls.w	80045f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	3724      	adds	r7, #36	@ 0x24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40013800 	.word	0x40013800
 80048fc:	40020000 	.word	0x40020000
 8004900:	40020400 	.word	0x40020400
 8004904:	40020800 	.word	0x40020800
 8004908:	40020c00 	.word	0x40020c00
 800490c:	40021000 	.word	0x40021000
 8004910:	40021400 	.word	0x40021400
 8004914:	40021800 	.word	0x40021800
 8004918:	40021c00 	.word	0x40021c00
 800491c:	40022000 	.word	0x40022000
 8004920:	40022400 	.word	0x40022400
 8004924:	40013c00 	.word	0x40013c00

08004928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	887b      	ldrh	r3, [r7, #2]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
 8004944:	e001      	b.n	800494a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
 8004964:	4613      	mov	r3, r2
 8004966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004974:	e003      	b.n	800497e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	041a      	lsls	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	619a      	str	r2, [r3, #24]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b086      	sub	sp, #24
 800498e:	af02      	add	r7, sp, #8
 8004990:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e059      	b.n	8004a50 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f00c fa14 	bl	8010de4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2203      	movs	r2, #3
 80049c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049ca:	d102      	bne.n	80049d2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f008 fd1b 	bl	800d412 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	7c1a      	ldrb	r2, [r3, #16]
 80049e4:	f88d 2000 	strb.w	r2, [sp]
 80049e8:	3304      	adds	r3, #4
 80049ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049ec:	f008 fca6 	bl	800d33c <USB_CoreInit>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e026      	b.n	8004a50 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2101      	movs	r1, #1
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f008 fd13 	bl	800d434 <USB_SetCurrentMode>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e017      	b.n	8004a50 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	7c1a      	ldrb	r2, [r3, #16]
 8004a28:	f88d 2000 	strb.w	r2, [sp]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a30:	f008 feb6 	bl	800d7a0 <USB_HostInit>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e004      	b.n	8004a50 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b08b      	sub	sp, #44	@ 0x2c
 8004a5c:	af04      	add	r7, sp, #16
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	70fb      	strb	r3, [r7, #3]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	70bb      	strb	r3, [r7, #2]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004a72:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004a74:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_HCD_HC_Init+0x2c>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e09d      	b.n	8004bc0 <HAL_HCD_HC_Init+0x168>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3319      	adds	r3, #25
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	3314      	adds	r3, #20
 8004ab0:	787a      	ldrb	r2, [r7, #1]
 8004ab2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	3315      	adds	r3, #21
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3326      	adds	r3, #38	@ 0x26
 8004ad8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004adc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	78bb      	ldrb	r3, [r7, #2]
 8004ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ae6:	b2d8      	uxtb	r0, r3
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	3316      	adds	r3, #22
 8004af6:	4602      	mov	r2, r0
 8004af8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fbc8 	bl	8005294 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004b04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	da0a      	bge.n	8004b22 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	3317      	adds	r3, #23
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e009      	b.n	8004b36 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	3317      	adds	r3, #23
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f008 ff88 	bl	800da50 <USB_GetHostSpeed>
 8004b40:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004b42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d10b      	bne.n	8004b62 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004b4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_HCD_HC_Init+0x10a>
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2bbc      	cmp	r3, #188	@ 0xbc
 8004b5c:	d901      	bls.n	8004b62 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004b5e:	23bc      	movs	r3, #188	@ 0xbc
 8004b60:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004b62:	78fa      	ldrb	r2, [r7, #3]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	3318      	adds	r3, #24
 8004b72:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	b298      	uxth	r0, r3
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	3328      	adds	r3, #40	@ 0x28
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	787c      	ldrb	r4, [r7, #1]
 8004b9a:	78ba      	ldrb	r2, [r7, #2]
 8004b9c:	78f9      	ldrb	r1, [r7, #3]
 8004b9e:	9302      	str	r3, [sp, #8]
 8004ba0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	4623      	mov	r3, r4
 8004bae:	f008 ff77 	bl	800daa0 <USB_HC_Init>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd90      	pop	{r4, r7, pc}

08004bc8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_HCD_HC_Halt+0x1e>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e00f      	b.n	8004c06 <HAL_HCD_HC_Halt+0x3e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f009 fb09 	bl	800e20e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	70fb      	strb	r3, [r7, #3]
 8004c22:	460b      	mov	r3, r1
 8004c24:	70bb      	strb	r3, [r7, #2]
 8004c26:	4613      	mov	r3, r2
 8004c28:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	3317      	adds	r3, #23
 8004c3a:	78ba      	ldrb	r2, [r7, #2]
 8004c3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	3326      	adds	r3, #38	@ 0x26
 8004c4e:	787a      	ldrb	r2, [r7, #1]
 8004c50:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004c52:	7c3b      	ldrb	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d114      	bne.n	8004c82 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004c58:	78fa      	ldrb	r2, [r7, #3]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	332a      	adds	r3, #42	@ 0x2a
 8004c68:	2203      	movs	r2, #3
 8004c6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	3319      	adds	r3, #25
 8004c7c:	7f3a      	ldrb	r2, [r7, #28]
 8004c7e:	701a      	strb	r2, [r3, #0]
 8004c80:	e009      	b.n	8004c96 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	332a      	adds	r3, #42	@ 0x2a
 8004c92:	2202      	movs	r2, #2
 8004c94:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004c96:	787b      	ldrb	r3, [r7, #1]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	f200 8102 	bhi.w	8004ea2 <HAL_HCD_HC_SubmitRequest+0x292>
 8004c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004e8d 	.word	0x08004e8d
 8004cac:	08004d79 	.word	0x08004d79
 8004cb0:	08004e03 	.word	0x08004e03
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004cb4:	7c3b      	ldrb	r3, [r7, #16]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	f040 80f5 	bne.w	8004ea6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004cbc:	78bb      	ldrb	r3, [r7, #2]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d12d      	bne.n	8004d1e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004cc2:	8b3b      	ldrh	r3, [r7, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	333d      	adds	r3, #61	@ 0x3d
 8004cd8:	2201      	movs	r2, #1
 8004cda:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	333d      	adds	r3, #61	@ 0x3d
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	332a      	adds	r3, #42	@ 0x2a
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004d06:	e0ce      	b.n	8004ea6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d08:	78fa      	ldrb	r2, [r7, #3]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	332a      	adds	r3, #42	@ 0x2a
 8004d18:	2202      	movs	r2, #2
 8004d1a:	701a      	strb	r2, [r3, #0]
      break;
 8004d1c:	e0c3      	b.n	8004ea6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	331a      	adds	r3, #26
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	f040 80b8 	bne.w	8004ea6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	333c      	adds	r3, #60	@ 0x3c
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	332a      	adds	r3, #42	@ 0x2a
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
      break;
 8004d60:	e0a1      	b.n	8004ea6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	332a      	adds	r3, #42	@ 0x2a
 8004d72:	2202      	movs	r2, #2
 8004d74:	701a      	strb	r2, [r3, #0]
      break;
 8004d76:	e096      	b.n	8004ea6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004d78:	78bb      	ldrb	r3, [r7, #2]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d120      	bne.n	8004dc0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	333d      	adds	r3, #61	@ 0x3d
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d94:	78fa      	ldrb	r2, [r7, #3]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	332a      	adds	r3, #42	@ 0x2a
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004da8:	e07e      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	332a      	adds	r3, #42	@ 0x2a
 8004dba:	2202      	movs	r2, #2
 8004dbc:	701a      	strb	r2, [r3, #0]
      break;
 8004dbe:	e073      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	1a9b      	subs	r3, r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	333c      	adds	r3, #60	@ 0x3c
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	332a      	adds	r3, #42	@ 0x2a
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
      break;
 8004dea:	e05d      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	332a      	adds	r3, #42	@ 0x2a
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	701a      	strb	r2, [r3, #0]
      break;
 8004e00:	e052      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004e02:	78bb      	ldrb	r3, [r7, #2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d120      	bne.n	8004e4a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	333d      	adds	r3, #61	@ 0x3d
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	332a      	adds	r3, #42	@ 0x2a
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e32:	e039      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e34:	78fa      	ldrb	r2, [r7, #3]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	1a9b      	subs	r3, r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	332a      	adds	r3, #42	@ 0x2a
 8004e44:	2202      	movs	r2, #2
 8004e46:	701a      	strb	r2, [r3, #0]
      break;
 8004e48:	e02e      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	333c      	adds	r3, #60	@ 0x3c
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	332a      	adds	r3, #42	@ 0x2a
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
      break;
 8004e74:	e018      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	332a      	adds	r3, #42	@ 0x2a
 8004e86:	2202      	movs	r2, #2
 8004e88:	701a      	strb	r2, [r3, #0]
      break;
 8004e8a:	e00d      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	332a      	adds	r3, #42	@ 0x2a
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
      break;
 8004ea0:	e002      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e000      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004ea6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	332c      	adds	r3, #44	@ 0x2c
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	8b39      	ldrh	r1, [r7, #24]
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4403      	add	r3, r0
 8004ecc:	3334      	adds	r3, #52	@ 0x34
 8004ece:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	334c      	adds	r3, #76	@ 0x4c
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004ee4:	78fa      	ldrb	r2, [r7, #3]
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3338      	adds	r3, #56	@ 0x38
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	3315      	adds	r3, #21
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	334d      	adds	r3, #77	@ 0x4d
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	4613      	mov	r3, r2
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	3310      	adds	r3, #16
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	1d19      	adds	r1, r3, #4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	799b      	ldrb	r3, [r3, #6]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f008 fedc 	bl	800dcf8 <USB_HC_StartXfer>
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop

08004f4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f008 fbdc 	bl	800d720 <USB_GetMode>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	f040 80fb 	bne.w	8005166 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f008 fb9f 	bl	800d6b8 <USB_ReadInterrupts>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80f1 	beq.w	8005164 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f008 fb96 	bl	800d6b8 <USB_ReadInterrupts>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f96:	d104      	bne.n	8004fa2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004fa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f008 fb86 	bl	800d6b8 <USB_ReadInterrupts>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fb6:	d104      	bne.n	8004fc2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004fc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f008 fb76 	bl	800d6b8 <USB_ReadInterrupts>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fd6:	d104      	bne.n	8004fe2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004fe0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f008 fb66 	bl	800d6b8 <USB_ReadInterrupts>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d103      	bne.n	8004ffe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f008 fb58 	bl	800d6b8 <USB_ReadInterrupts>
 8005008:	4603      	mov	r3, r0
 800500a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800500e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005012:	d120      	bne.n	8005056 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800501c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d113      	bne.n	8005056 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800502e:	2110      	movs	r1, #16
 8005030:	6938      	ldr	r0, [r7, #16]
 8005032:	f008 fa4b 	bl	800d4cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f008 fa7a 	bl	800d530 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	7a5b      	ldrb	r3, [r3, #9]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d105      	bne.n	8005050 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2101      	movs	r1, #1
 800504a:	4618      	mov	r0, r3
 800504c:	f008 fc60 	bl	800d910 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f00b ff39 	bl	8010ec8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f008 fb2c 	bl	800d6b8 <USB_ReadInterrupts>
 8005060:	4603      	mov	r3, r0
 8005062:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005066:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800506a:	d102      	bne.n	8005072 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f001 fd33 	bl	8006ad8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f008 fb1e 	bl	800d6b8 <USB_ReadInterrupts>
 800507c:	4603      	mov	r3, r0
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b08      	cmp	r3, #8
 8005084:	d106      	bne.n	8005094 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f00b ff02 	bl	8010e90 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2208      	movs	r2, #8
 8005092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f008 fb0d 	bl	800d6b8 <USB_ReadInterrupts>
 800509e:	4603      	mov	r3, r0
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050a8:	d139      	bne.n	800511e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f009 f89c 	bl	800e1ec <USB_HC_ReadInterrupt>
 80050b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e025      	b.n	8005108 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d018      	beq.n	8005102 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050e6:	d106      	bne.n	80050f6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f905 	bl	80052fe <HCD_HC_IN_IRQHandler>
 80050f4:	e005      	b.n	8005102 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 ff67 	bl	8005fd0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	3301      	adds	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	795b      	ldrb	r3, [r3, #5]
 800510c:	461a      	mov	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4293      	cmp	r3, r2
 8005112:	d3d3      	bcc.n	80050bc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800511c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f008 fac8 	bl	800d6b8 <USB_ReadInterrupts>
 8005128:	4603      	mov	r3, r0
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b10      	cmp	r3, #16
 8005130:	d101      	bne.n	8005136 <HAL_HCD_IRQHandler+0x1ea>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_HCD_IRQHandler+0x1ec>
 8005136:	2300      	movs	r3, #0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d014      	beq.n	8005166 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0210 	bic.w	r2, r2, #16
 800514a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f001 fbe4 	bl	800691a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0210 	orr.w	r2, r2, #16
 8005160:	619a      	str	r2, [r3, #24]
 8005162:	e000      	b.n	8005166 <HAL_HCD_IRQHandler+0x21a>
      return;
 8005164:	bf00      	nop
    }
  }
}
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_HCD_Start+0x16>
 800517e:	2302      	movs	r3, #2
 8005180:	e013      	b.n	80051aa <HAL_HCD_Start+0x3e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2101      	movs	r1, #1
 8005190:	4618      	mov	r0, r3
 8005192:	f008 fc24 	bl	800d9de <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f008 f928 	bl	800d3f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_HCD_Stop+0x16>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e00d      	b.n	80051e4 <HAL_HCD_Stop+0x32>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f009 f977 	bl	800e4c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f008 fbc6 	bl	800d98a <USB_ResetPort>
 80051fe:	4603      	mov	r3, r0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	334c      	adds	r3, #76	@ 0x4c
 8005224:	781b      	ldrb	r3, [r3, #0]
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	460b      	mov	r3, r1
 800523c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800523e:	78fa      	ldrb	r2, [r7, #3]
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	3338      	adds	r3, #56	@ 0x38
 800524e:	681b      	ldr	r3, [r3, #0]
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4618      	mov	r0, r3
 800526a:	f008 fc08 	bl	800da7e <USB_GetCurrentFrame>
 800526e:	4603      	mov	r3, r0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f008 fbe3 	bl	800da50 <USB_GetHostSpeed>
 800528a:	4603      	mov	r3, r0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80052a0:	78fa      	ldrb	r2, [r7, #3]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	331a      	adds	r3, #26
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	331b      	adds	r3, #27
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	3325      	adds	r3, #37	@ 0x25
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	3324      	adds	r3, #36	@ 0x24
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b086      	sub	sp, #24
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f008 f9de 	bl	800d6de <USB_ReadChInterrupts>
 8005322:	4603      	mov	r3, r0
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b04      	cmp	r3, #4
 800532a:	d11a      	bne.n	8005362 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005338:	461a      	mov	r2, r3
 800533a:	2304      	movs	r3, #4
 800533c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800533e:	78fa      	ldrb	r2, [r7, #3]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	334d      	adds	r3, #77	@ 0x4d
 800534e:	2207      	movs	r2, #7
 8005350:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	4611      	mov	r1, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f008 ff57 	bl	800e20e <USB_HC_Halt>
 8005360:	e09e      	b.n	80054a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f008 f9b7 	bl	800d6de <USB_ReadChInterrupts>
 8005370:	4603      	mov	r3, r0
 8005372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800537a:	d11b      	bne.n	80053b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005388:	461a      	mov	r2, r3
 800538a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800538e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	1a9b      	subs	r3, r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	334d      	adds	r3, #77	@ 0x4d
 80053a0:	2208      	movs	r2, #8
 80053a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f008 ff2e 	bl	800e20e <USB_HC_Halt>
 80053b2:	e075      	b.n	80054a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	4611      	mov	r1, r2
 80053bc:	4618      	mov	r0, r3
 80053be:	f008 f98e 	bl	800d6de <USB_ReadChInterrupts>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d11a      	bne.n	8005402 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d8:	461a      	mov	r2, r3
 80053da:	2308      	movs	r3, #8
 80053dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80053de:	78fa      	ldrb	r2, [r7, #3]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	334d      	adds	r3, #77	@ 0x4d
 80053ee:	2206      	movs	r2, #6
 80053f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	78fa      	ldrb	r2, [r7, #3]
 80053f8:	4611      	mov	r1, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f008 ff07 	bl	800e20e <USB_HC_Halt>
 8005400:	e04e      	b.n	80054a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f008 f967 	bl	800d6de <USB_ReadChInterrupts>
 8005410:	4603      	mov	r3, r0
 8005412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541a:	d11b      	bne.n	8005454 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4413      	add	r3, r2
 8005424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005428:	461a      	mov	r2, r3
 800542a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800542e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	334d      	adds	r3, #77	@ 0x4d
 8005440:	2209      	movs	r2, #9
 8005442:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f008 fede 	bl	800e20e <USB_HC_Halt>
 8005452:	e025      	b.n	80054a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	78fa      	ldrb	r2, [r7, #3]
 800545a:	4611      	mov	r1, r2
 800545c:	4618      	mov	r0, r3
 800545e:	f008 f93e 	bl	800d6de <USB_ReadChInterrupts>
 8005462:	4603      	mov	r3, r0
 8005464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005468:	2b80      	cmp	r3, #128	@ 0x80
 800546a:	d119      	bne.n	80054a0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4413      	add	r3, r2
 8005474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005478:	461a      	mov	r2, r3
 800547a:	2380      	movs	r3, #128	@ 0x80
 800547c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	334d      	adds	r3, #77	@ 0x4d
 800548e:	2207      	movs	r2, #7
 8005490:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	4611      	mov	r1, r2
 800549a:	4618      	mov	r0, r3
 800549c:	f008 feb7 	bl	800e20e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	78fa      	ldrb	r2, [r7, #3]
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f008 f918 	bl	800d6de <USB_ReadChInterrupts>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b8:	d112      	bne.n	80054e0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	4611      	mov	r1, r2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f008 fea3 	bl	800e20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054d4:	461a      	mov	r2, r3
 80054d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054da:	6093      	str	r3, [r2, #8]
 80054dc:	f000 bd75 	b.w	8005fca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	4611      	mov	r1, r2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f008 f8f8 	bl	800d6de <USB_ReadChInterrupts>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	f040 8128 	bne.w	800574a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4413      	add	r3, r2
 8005502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005506:	461a      	mov	r2, r3
 8005508:	2320      	movs	r3, #32
 800550a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	331b      	adds	r3, #27
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d119      	bne.n	8005556 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	331b      	adds	r3, #27
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	440a      	add	r2, r1
 800554c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005554:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	799b      	ldrb	r3, [r3, #6]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01b      	beq.n	8005596 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	3330      	adds	r3, #48	@ 0x30
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	1ac9      	subs	r1, r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4403      	add	r3, r0
 8005592:	3338      	adds	r3, #56	@ 0x38
 8005594:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	334d      	adds	r3, #77	@ 0x4d
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3344      	adds	r3, #68	@ 0x44
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ca:	461a      	mov	r2, r3
 80055cc:	2301      	movs	r3, #1
 80055ce:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	3326      	adds	r3, #38	@ 0x26
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80055e6:	78fa      	ldrb	r2, [r7, #3]
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	3326      	adds	r3, #38	@ 0x26
 80055f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d110      	bne.n	800561e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	78fa      	ldrb	r2, [r7, #3]
 8005602:	4611      	mov	r1, r2
 8005604:	4618      	mov	r0, r3
 8005606:	f008 fe02 	bl	800e20e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005616:	461a      	mov	r2, r3
 8005618:	2310      	movs	r3, #16
 800561a:	6093      	str	r3, [r2, #8]
 800561c:	e03d      	b.n	800569a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	3326      	adds	r3, #38	@ 0x26
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b03      	cmp	r3, #3
 8005632:	d00a      	beq.n	800564a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	1a9b      	subs	r3, r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	3326      	adds	r3, #38	@ 0x26
 8005644:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005646:	2b01      	cmp	r3, #1
 8005648:	d127      	bne.n	800569a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4413      	add	r3, r2
 8005652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	78fa      	ldrb	r2, [r7, #3]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	440a      	add	r2, r1
 8005660:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005664:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005668:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800566a:	78fa      	ldrb	r2, [r7, #3]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	334c      	adds	r3, #76	@ 0x4c
 800567a:	2201      	movs	r2, #1
 800567c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	1a9b      	subs	r3, r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	334c      	adds	r3, #76	@ 0x4c
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f00b fc25 	bl	8010ee4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	799b      	ldrb	r3, [r3, #6]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d13b      	bne.n	800571a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	3338      	adds	r3, #56	@ 0x38
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4403      	add	r3, r0
 80056c2:	3328      	adds	r3, #40	@ 0x28
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	440b      	add	r3, r1
 80056c8:	1e59      	subs	r1, r3, #1
 80056ca:	78fa      	ldrb	r2, [r7, #3]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4403      	add	r3, r0
 80056d8:	3328      	adds	r3, #40	@ 0x28
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8470 	beq.w	8005fca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	333c      	adds	r3, #60	@ 0x3c
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	78fa      	ldrb	r2, [r7, #3]
 80056fe:	f083 0301 	eor.w	r3, r3, #1
 8005702:	b2d8      	uxtb	r0, r3
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	333c      	adds	r3, #60	@ 0x3c
 8005712:	4602      	mov	r2, r0
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	f000 bc58 	b.w	8005fca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800571a:	78fa      	ldrb	r2, [r7, #3]
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	1a9b      	subs	r3, r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	333c      	adds	r3, #60	@ 0x3c
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	78fa      	ldrb	r2, [r7, #3]
 800572e:	f083 0301 	eor.w	r3, r3, #1
 8005732:	b2d8      	uxtb	r0, r3
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	333c      	adds	r3, #60	@ 0x3c
 8005742:	4602      	mov	r2, r0
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	f000 bc40 	b.w	8005fca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	78fa      	ldrb	r2, [r7, #3]
 8005750:	4611      	mov	r1, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f007 ffc3 	bl	800d6de <USB_ReadChInterrupts>
 8005758:	4603      	mov	r3, r0
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b20      	cmp	r3, #32
 8005760:	d131      	bne.n	80057c6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4413      	add	r3, r2
 800576a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800576e:	461a      	mov	r2, r3
 8005770:	2320      	movs	r3, #32
 8005772:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005774:	78fa      	ldrb	r2, [r7, #3]
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	1a9b      	subs	r3, r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	331a      	adds	r3, #26
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	f040 841f 	bne.w	8005fca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	331b      	adds	r3, #27
 800579c:	2201      	movs	r2, #1
 800579e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	334d      	adds	r3, #77	@ 0x4d
 80057b0:	2203      	movs	r2, #3
 80057b2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	78fa      	ldrb	r2, [r7, #3]
 80057ba:	4611      	mov	r1, r2
 80057bc:	4618      	mov	r0, r3
 80057be:	f008 fd26 	bl	800e20e <USB_HC_Halt>
 80057c2:	f000 bc02 	b.w	8005fca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f007 ff85 	bl	800d6de <USB_ReadChInterrupts>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b02      	cmp	r3, #2
 80057dc:	f040 8305 	bne.w	8005dea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ec:	461a      	mov	r2, r3
 80057ee:	2302      	movs	r3, #2
 80057f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80057f2:	78fa      	ldrb	r2, [r7, #3]
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	4613      	mov	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	334d      	adds	r3, #77	@ 0x4d
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d114      	bne.n	8005832 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4613      	mov	r3, r2
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	334d      	adds	r3, #77	@ 0x4d
 8005818:	2202      	movs	r2, #2
 800581a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800581c:	78fa      	ldrb	r2, [r7, #3]
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	4613      	mov	r3, r2
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	334c      	adds	r3, #76	@ 0x4c
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e2cc      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005832:	78fa      	ldrb	r2, [r7, #3]
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	334d      	adds	r3, #77	@ 0x4d
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b06      	cmp	r3, #6
 8005846:	d114      	bne.n	8005872 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005848:	78fa      	ldrb	r2, [r7, #3]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	334d      	adds	r3, #77	@ 0x4d
 8005858:	2202      	movs	r2, #2
 800585a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	334c      	adds	r3, #76	@ 0x4c
 800586c:	2205      	movs	r2, #5
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e2ac      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	334d      	adds	r3, #77	@ 0x4d
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b07      	cmp	r3, #7
 8005886:	d00b      	beq.n	80058a0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005888:	78fa      	ldrb	r2, [r7, #3]
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	334d      	adds	r3, #77	@ 0x4d
 8005898:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800589a:	2b09      	cmp	r3, #9
 800589c:	f040 80a6 	bne.w	80059ec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058a0:	78fa      	ldrb	r2, [r7, #3]
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	334d      	adds	r3, #77	@ 0x4d
 80058b0:	2202      	movs	r2, #2
 80058b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80058b4:	78fa      	ldrb	r2, [r7, #3]
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	4613      	mov	r3, r2
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	3344      	adds	r3, #68	@ 0x44
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	1c59      	adds	r1, r3, #1
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4403      	add	r3, r0
 80058d4:	3344      	adds	r3, #68	@ 0x44
 80058d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	3344      	adds	r3, #68	@ 0x44
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d943      	bls.n	8005976 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4613      	mov	r3, r2
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	3344      	adds	r3, #68	@ 0x44
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005902:	78fa      	ldrb	r2, [r7, #3]
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	331a      	adds	r3, #26
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d123      	bne.n	8005960 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005918:	78fa      	ldrb	r2, [r7, #3]
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	331b      	adds	r3, #27
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800592c:	78fa      	ldrb	r2, [r7, #3]
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	331c      	adds	r3, #28
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4413      	add	r3, r2
 8005948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	440a      	add	r2, r1
 8005956:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800595a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800595e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	334c      	adds	r3, #76	@ 0x4c
 8005970:	2204      	movs	r2, #4
 8005972:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005974:	e229      	b.n	8005dca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	334c      	adds	r3, #76	@ 0x4c
 8005986:	2202      	movs	r2, #2
 8005988:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	3326      	adds	r3, #38	@ 0x26
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	3326      	adds	r3, #38	@ 0x26
 80059b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	f040 8209 	bne.w	8005dca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059e4:	461a      	mov	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059ea:	e1ee      	b.n	8005dca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	334d      	adds	r3, #77	@ 0x4d
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	f040 80c8 	bne.w	8005b94 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	334d      	adds	r3, #77	@ 0x4d
 8005a14:	2202      	movs	r2, #2
 8005a16:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	331b      	adds	r3, #27
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	f040 81ce 	bne.w	8005dcc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	4613      	mov	r3, r2
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3326      	adds	r3, #38	@ 0x26
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d16b      	bne.n	8005b1e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005a46:	78fa      	ldrb	r2, [r7, #3]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	3348      	adds	r3, #72	@ 0x48
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	1c59      	adds	r1, r3, #1
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4403      	add	r3, r0
 8005a66:	3348      	adds	r3, #72	@ 0x48
 8005a68:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	3348      	adds	r3, #72	@ 0x48
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d943      	bls.n	8005b08 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005a80:	78fa      	ldrb	r2, [r7, #3]
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	4613      	mov	r3, r2
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	3348      	adds	r3, #72	@ 0x48
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005a94:	78fa      	ldrb	r2, [r7, #3]
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	331b      	adds	r3, #27
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	4613      	mov	r3, r2
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	1a9b      	subs	r3, r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	3344      	adds	r3, #68	@ 0x44
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d809      	bhi.n	8005ad2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	331c      	adds	r3, #28
 8005ace:	2201      	movs	r2, #1
 8005ad0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005af2:	78fa      	ldrb	r2, [r7, #3]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	334c      	adds	r3, #76	@ 0x4c
 8005b02:	2204      	movs	r2, #4
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e014      	b.n	8005b32 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	334c      	adds	r3, #76	@ 0x4c
 8005b18:	2202      	movs	r2, #2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	e009      	b.n	8005b32 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	334c      	adds	r3, #76	@ 0x4c
 8005b2e:	2202      	movs	r2, #2
 8005b30:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b32:	78fa      	ldrb	r2, [r7, #3]
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	3326      	adds	r3, #38	@ 0x26
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	3326      	adds	r3, #38	@ 0x26
 8005b58:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	f040 8136 	bne.w	8005dcc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b76:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b7e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e11b      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	334d      	adds	r3, #77	@ 0x4d
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	f040 8081 	bne.w	8005cae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005bac:	78fa      	ldrb	r2, [r7, #3]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	334d      	adds	r3, #77	@ 0x4d
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005bc0:	78fa      	ldrb	r2, [r7, #3]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	331b      	adds	r3, #27
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	f040 80fa 	bne.w	8005dcc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005bd8:	78fa      	ldrb	r2, [r7, #3]
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	334c      	adds	r3, #76	@ 0x4c
 8005be8:	2202      	movs	r2, #2
 8005bea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c0a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c2a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	78fa      	ldrb	r2, [r7, #3]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c46:	f023 0320 	bic.w	r3, r3, #32
 8005c4a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c4c:	78fa      	ldrb	r2, [r7, #3]
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4613      	mov	r3, r2
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	3326      	adds	r3, #38	@ 0x26
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00b      	beq.n	8005c7a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	3326      	adds	r3, #38	@ 0x26
 8005c72:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	f040 80a9 	bne.w	8005dcc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c98:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	e08e      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	334d      	adds	r3, #77	@ 0x4d
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d143      	bne.n	8005d4c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005cc4:	78fa      	ldrb	r2, [r7, #3]
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	1a9b      	subs	r3, r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	334d      	adds	r3, #77	@ 0x4d
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	334c      	adds	r3, #76	@ 0x4c
 8005ce8:	2202      	movs	r2, #2
 8005cea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005cec:	78fa      	ldrb	r2, [r7, #3]
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	3326      	adds	r3, #38	@ 0x26
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3326      	adds	r3, #38	@ 0x26
 8005d12:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d159      	bne.n	8005dcc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d2e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d36:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d44:	461a      	mov	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e03f      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	334d      	adds	r3, #77	@ 0x4d
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d126      	bne.n	8005db0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	334d      	adds	r3, #77	@ 0x4d
 8005d72:	2202      	movs	r2, #2
 8005d74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005d76:	78fa      	ldrb	r2, [r7, #3]
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	1a9b      	subs	r3, r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	3344      	adds	r3, #68	@ 0x44
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	1c59      	adds	r1, r3, #1
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4403      	add	r3, r0
 8005d96:	3344      	adds	r3, #68	@ 0x44
 8005d98:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	334c      	adds	r3, #76	@ 0x4c
 8005daa:	2204      	movs	r2, #4
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	e00d      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	4613      	mov	r3, r2
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	334d      	adds	r3, #77	@ 0x4d
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	f000 8100 	beq.w	8005fc8 <HCD_HC_IN_IRQHandler+0xcca>
 8005dc8:	e000      	b.n	8005dcc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005dca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005dcc:	78fa      	ldrb	r2, [r7, #3]
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	334c      	adds	r3, #76	@ 0x4c
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f00b f87e 	bl	8010ee4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005de8:	e0ef      	b.n	8005fca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	4611      	mov	r1, r2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f007 fc73 	bl	800d6de <USB_ReadChInterrupts>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dfe:	2b40      	cmp	r3, #64	@ 0x40
 8005e00:	d12f      	bne.n	8005e62 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005e02:	78fb      	ldrb	r3, [r7, #3]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e0e:	461a      	mov	r2, r3
 8005e10:	2340      	movs	r3, #64	@ 0x40
 8005e12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005e14:	78fa      	ldrb	r2, [r7, #3]
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	1a9b      	subs	r3, r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	334d      	adds	r3, #77	@ 0x4d
 8005e24:	2205      	movs	r2, #5
 8005e26:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	1a9b      	subs	r3, r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	331a      	adds	r3, #26
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3344      	adds	r3, #68	@ 0x44
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	78fa      	ldrb	r2, [r7, #3]
 8005e58:	4611      	mov	r1, r2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f008 f9d7 	bl	800e20e <USB_HC_Halt>
 8005e60:	e0b3      	b.n	8005fca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	78fa      	ldrb	r2, [r7, #3]
 8005e68:	4611      	mov	r1, r2
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f007 fc37 	bl	800d6de <USB_ReadChInterrupts>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	f040 80a7 	bne.w	8005fca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	4613      	mov	r3, r2
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	1a9b      	subs	r3, r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	3326      	adds	r3, #38	@ 0x26
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d11b      	bne.n	8005eca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005e92:	78fa      	ldrb	r2, [r7, #3]
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	1a9b      	subs	r3, r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3344      	adds	r3, #68	@ 0x44
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	1a9b      	subs	r3, r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	334d      	adds	r3, #77	@ 0x4d
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f008 f9a3 	bl	800e20e <USB_HC_Halt>
 8005ec8:	e03f      	b.n	8005f4a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	3326      	adds	r3, #38	@ 0x26
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	3326      	adds	r3, #38	@ 0x26
 8005ef0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d129      	bne.n	8005f4a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	3344      	adds	r3, #68	@ 0x44
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	799b      	ldrb	r3, [r3, #6]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HCD_HC_IN_IRQHandler+0xc2a>
 8005f12:	78fa      	ldrb	r2, [r7, #3]
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	331b      	adds	r3, #27
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d110      	bne.n	8005f4a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005f28:	78fa      	ldrb	r2, [r7, #3]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	334d      	adds	r3, #77	@ 0x4d
 8005f38:	2204      	movs	r2, #4
 8005f3a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	78fa      	ldrb	r2, [r7, #3]
 8005f42:	4611      	mov	r1, r2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f008 f962 	bl	800e20e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005f4a:	78fa      	ldrb	r2, [r7, #3]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	331b      	adds	r3, #27
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d129      	bne.n	8005fb4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	331b      	adds	r3, #27
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f92:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	78fa      	ldrb	r2, [r7, #3]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fae:	f043 0320 	orr.w	r3, r3, #32
 8005fb2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2310      	movs	r3, #16
 8005fc4:	6093      	str	r3, [r2, #8]
 8005fc6:	e000      	b.n	8005fca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005fc8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	78fa      	ldrb	r2, [r7, #3]
 8005fec:	4611      	mov	r1, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f007 fb75 	bl	800d6de <USB_ReadChInterrupts>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d11b      	bne.n	8006036 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4413      	add	r3, r2
 8006006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800600a:	461a      	mov	r2, r3
 800600c:	2304      	movs	r3, #4
 800600e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	334d      	adds	r3, #77	@ 0x4d
 8006020:	2207      	movs	r2, #7
 8006022:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	78fa      	ldrb	r2, [r7, #3]
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f008 f8ee 	bl	800e20e <USB_HC_Halt>
 8006032:	f000 bc6f 	b.w	8006914 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f007 fb4d 	bl	800d6de <USB_ReadChInterrupts>
 8006044:	4603      	mov	r3, r0
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b20      	cmp	r3, #32
 800604c:	f040 8082 	bne.w	8006154 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605c:	461a      	mov	r2, r3
 800605e:	2320      	movs	r3, #32
 8006060:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	3319      	adds	r3, #25
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d124      	bne.n	80060c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006078:	78fa      	ldrb	r2, [r7, #3]
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	3319      	adds	r3, #25
 8006088:	2200      	movs	r2, #0
 800608a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800608c:	78fa      	ldrb	r2, [r7, #3]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	334c      	adds	r3, #76	@ 0x4c
 800609c:	2202      	movs	r2, #2
 800609e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	334d      	adds	r3, #77	@ 0x4d
 80060b0:	2203      	movs	r2, #3
 80060b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f008 f8a6 	bl	800e20e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	331a      	adds	r3, #26
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	f040 841d 	bne.w	8006914 <HCD_HC_OUT_IRQHandler+0x944>
 80060da:	78fa      	ldrb	r2, [r7, #3]
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	331b      	adds	r3, #27
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f040 8411 	bne.w	8006914 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80060f2:	78fa      	ldrb	r2, [r7, #3]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	4613      	mov	r3, r2
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	3326      	adds	r3, #38	@ 0x26
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d009      	beq.n	800611c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006108:	78fa      	ldrb	r2, [r7, #3]
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	4613      	mov	r3, r2
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	331b      	adds	r3, #27
 8006118:	2201      	movs	r2, #1
 800611a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	4613      	mov	r3, r2
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	334d      	adds	r3, #77	@ 0x4d
 800612c:	2203      	movs	r2, #3
 800612e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f008 f868 	bl	800e20e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	3344      	adds	r3, #68	@ 0x44
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	e3df      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	78fa      	ldrb	r2, [r7, #3]
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f007 fabe 	bl	800d6de <USB_ReadChInterrupts>
 8006162:	4603      	mov	r3, r0
 8006164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800616c:	d111      	bne.n	8006192 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800617a:	461a      	mov	r2, r3
 800617c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006180:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	78fa      	ldrb	r2, [r7, #3]
 8006188:	4611      	mov	r1, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f008 f83f 	bl	800e20e <USB_HC_Halt>
 8006190:	e3c0      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	4611      	mov	r1, r2
 800619a:	4618      	mov	r0, r3
 800619c:	f007 fa9f 	bl	800d6de <USB_ReadChInterrupts>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d168      	bne.n	800627c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80061aa:	78fa      	ldrb	r2, [r7, #3]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	3344      	adds	r3, #68	@ 0x44
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f007 fa89 	bl	800d6de <USB_ReadChInterrupts>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d2:	2b40      	cmp	r3, #64	@ 0x40
 80061d4:	d112      	bne.n	80061fc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	1a9b      	subs	r3, r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	3319      	adds	r3, #25
 80061e6:	2201      	movs	r2, #1
 80061e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f6:	461a      	mov	r2, r3
 80061f8:	2340      	movs	r3, #64	@ 0x40
 80061fa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	331b      	adds	r3, #27
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d019      	beq.n	8006246 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	331b      	adds	r3, #27
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	440a      	add	r2, r1
 800623c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006244:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006252:	461a      	mov	r2, r3
 8006254:	2301      	movs	r3, #1
 8006256:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006258:	78fa      	ldrb	r2, [r7, #3]
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	334d      	adds	r3, #77	@ 0x4d
 8006268:	2201      	movs	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	78fa      	ldrb	r2, [r7, #3]
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f007 ffca 	bl	800e20e <USB_HC_Halt>
 800627a:	e34b      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	78fa      	ldrb	r2, [r7, #3]
 8006282:	4611      	mov	r1, r2
 8006284:	4618      	mov	r0, r3
 8006286:	f007 fa2a 	bl	800d6de <USB_ReadChInterrupts>
 800628a:	4603      	mov	r3, r0
 800628c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006290:	2b40      	cmp	r3, #64	@ 0x40
 8006292:	d139      	bne.n	8006308 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	334d      	adds	r3, #77	@ 0x4d
 80062a4:	2205      	movs	r2, #5
 80062a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	331a      	adds	r3, #26
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	1a9b      	subs	r3, r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	3319      	adds	r3, #25
 80062ce:	2201      	movs	r2, #1
 80062d0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80062d2:	78fa      	ldrb	r2, [r7, #3]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	1a9b      	subs	r3, r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	3344      	adds	r3, #68	@ 0x44
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	78fa      	ldrb	r2, [r7, #3]
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f007 ff8d 	bl	800e20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006300:	461a      	mov	r2, r3
 8006302:	2340      	movs	r3, #64	@ 0x40
 8006304:	6093      	str	r3, [r2, #8]
 8006306:	e305      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f007 f9e4 	bl	800d6de <USB_ReadChInterrupts>
 8006316:	4603      	mov	r3, r0
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b08      	cmp	r3, #8
 800631e:	d11a      	bne.n	8006356 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800632c:	461a      	mov	r2, r3
 800632e:	2308      	movs	r3, #8
 8006330:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006332:	78fa      	ldrb	r2, [r7, #3]
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	334d      	adds	r3, #77	@ 0x4d
 8006342:	2206      	movs	r2, #6
 8006344:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	78fa      	ldrb	r2, [r7, #3]
 800634c:	4611      	mov	r1, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f007 ff5d 	bl	800e20e <USB_HC_Halt>
 8006354:	e2de      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	78fa      	ldrb	r2, [r7, #3]
 800635c:	4611      	mov	r1, r2
 800635e:	4618      	mov	r0, r3
 8006360:	f007 f9bd 	bl	800d6de <USB_ReadChInterrupts>
 8006364:	4603      	mov	r3, r0
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b10      	cmp	r3, #16
 800636c:	d144      	bne.n	80063f8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	3344      	adds	r3, #68	@ 0x44
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006382:	78fa      	ldrb	r2, [r7, #3]
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	1a9b      	subs	r3, r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	440b      	add	r3, r1
 8006390:	334d      	adds	r3, #77	@ 0x4d
 8006392:	2204      	movs	r2, #4
 8006394:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	3319      	adds	r3, #25
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d114      	bne.n	80063d6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80063ac:	78fa      	ldrb	r2, [r7, #3]
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	1a9b      	subs	r3, r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	3318      	adds	r3, #24
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80063c2:	78fa      	ldrb	r2, [r7, #3]
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	4613      	mov	r3, r2
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	3319      	adds	r3, #25
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f007 ff15 	bl	800e20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f0:	461a      	mov	r2, r3
 80063f2:	2310      	movs	r3, #16
 80063f4:	6093      	str	r3, [r2, #8]
 80063f6:	e28d      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	4611      	mov	r1, r2
 8006400:	4618      	mov	r0, r3
 8006402:	f007 f96c 	bl	800d6de <USB_ReadChInterrupts>
 8006406:	4603      	mov	r3, r0
 8006408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640c:	2b80      	cmp	r3, #128	@ 0x80
 800640e:	d169      	bne.n	80064e4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	799b      	ldrb	r3, [r3, #6]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d111      	bne.n	800643c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006418:	78fa      	ldrb	r2, [r7, #3]
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	4613      	mov	r3, r2
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	334d      	adds	r3, #77	@ 0x4d
 8006428:	2207      	movs	r2, #7
 800642a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	78fa      	ldrb	r2, [r7, #3]
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f007 feea 	bl	800e20e <USB_HC_Halt>
 800643a:	e049      	b.n	80064d0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800643c:	78fa      	ldrb	r2, [r7, #3]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4613      	mov	r3, r2
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	440b      	add	r3, r1
 800644a:	3344      	adds	r3, #68	@ 0x44
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	1c59      	adds	r1, r3, #1
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4613      	mov	r3, r2
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	1a9b      	subs	r3, r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4403      	add	r3, r0
 800645c:	3344      	adds	r3, #68	@ 0x44
 800645e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	4613      	mov	r3, r2
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	3344      	adds	r3, #68	@ 0x44
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b02      	cmp	r3, #2
 8006474:	d922      	bls.n	80064bc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006476:	78fa      	ldrb	r2, [r7, #3]
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	440b      	add	r3, r1
 8006484:	3344      	adds	r3, #68	@ 0x44
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800648a:	78fa      	ldrb	r2, [r7, #3]
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	1a9b      	subs	r3, r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	334c      	adds	r3, #76	@ 0x4c
 800649a:	2204      	movs	r2, #4
 800649c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800649e:	78fa      	ldrb	r2, [r7, #3]
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	1a9b      	subs	r3, r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	440b      	add	r3, r1
 80064ac:	334c      	adds	r3, #76	@ 0x4c
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f00a fd15 	bl	8010ee4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80064ba:	e009      	b.n	80064d0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	334c      	adds	r3, #76	@ 0x4c
 80064cc:	2202      	movs	r2, #2
 80064ce:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064dc:	461a      	mov	r2, r3
 80064de:	2380      	movs	r3, #128	@ 0x80
 80064e0:	6093      	str	r3, [r2, #8]
 80064e2:	e217      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	78fa      	ldrb	r2, [r7, #3]
 80064ea:	4611      	mov	r1, r2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f007 f8f6 	bl	800d6de <USB_ReadChInterrupts>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064fc:	d11b      	bne.n	8006536 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	334d      	adds	r3, #77	@ 0x4d
 800650e:	2209      	movs	r2, #9
 8006510:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	4611      	mov	r1, r2
 800651a:	4618      	mov	r0, r3
 800651c:	f007 fe77 	bl	800e20e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	4413      	add	r3, r2
 8006528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800652c:	461a      	mov	r2, r3
 800652e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006532:	6093      	str	r3, [r2, #8]
 8006534:	e1ee      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	4611      	mov	r1, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f007 f8cd 	bl	800d6de <USB_ReadChInterrupts>
 8006544:	4603      	mov	r3, r0
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b02      	cmp	r3, #2
 800654c:	f040 81df 	bne.w	800690e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4413      	add	r3, r2
 8006558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800655c:	461a      	mov	r2, r3
 800655e:	2302      	movs	r3, #2
 8006560:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006562:	78fa      	ldrb	r2, [r7, #3]
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	440b      	add	r3, r1
 8006570:	334d      	adds	r3, #77	@ 0x4d
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b01      	cmp	r3, #1
 8006576:	f040 8093 	bne.w	80066a0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	4613      	mov	r3, r2
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	1a9b      	subs	r3, r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	334d      	adds	r3, #77	@ 0x4d
 800658a:	2202      	movs	r2, #2
 800658c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800658e:	78fa      	ldrb	r2, [r7, #3]
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	334c      	adds	r3, #76	@ 0x4c
 800659e:	2201      	movs	r2, #1
 80065a0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80065a2:	78fa      	ldrb	r2, [r7, #3]
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	3326      	adds	r3, #38	@ 0x26
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d00b      	beq.n	80065d0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80065b8:	78fa      	ldrb	r2, [r7, #3]
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	3326      	adds	r3, #38	@ 0x26
 80065c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	f040 8190 	bne.w	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	799b      	ldrb	r3, [r3, #6]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d115      	bne.n	8006604 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	4613      	mov	r3, r2
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	1a9b      	subs	r3, r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	333d      	adds	r3, #61	@ 0x3d
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	78fa      	ldrb	r2, [r7, #3]
 80065ec:	f083 0301 	eor.w	r3, r3, #1
 80065f0:	b2d8      	uxtb	r0, r3
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	333d      	adds	r3, #61	@ 0x3d
 8006600:	4602      	mov	r2, r0
 8006602:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	799b      	ldrb	r3, [r3, #6]
 8006608:	2b01      	cmp	r3, #1
 800660a:	f040 8171 	bne.w	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
 800660e:	78fa      	ldrb	r2, [r7, #3]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	3334      	adds	r3, #52	@ 0x34
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 8165 	beq.w	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	1a9b      	subs	r3, r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	3334      	adds	r3, #52	@ 0x34
 8006636:	6819      	ldr	r1, [r3, #0]
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4403      	add	r3, r0
 8006646:	3328      	adds	r3, #40	@ 0x28
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	440b      	add	r3, r1
 800664c:	1e59      	subs	r1, r3, #1
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	1a9b      	subs	r3, r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4403      	add	r3, r0
 800665c:	3328      	adds	r3, #40	@ 0x28
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	fbb1 f3f3 	udiv	r3, r1, r3
 8006664:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 813f 	beq.w	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006672:	78fa      	ldrb	r2, [r7, #3]
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	333d      	adds	r3, #61	@ 0x3d
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	78fa      	ldrb	r2, [r7, #3]
 8006686:	f083 0301 	eor.w	r3, r3, #1
 800668a:	b2d8      	uxtb	r0, r3
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	333d      	adds	r3, #61	@ 0x3d
 800669a:	4602      	mov	r2, r0
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	e127      	b.n	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	4613      	mov	r3, r2
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	1a9b      	subs	r3, r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	334d      	adds	r3, #77	@ 0x4d
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d120      	bne.n	80066f8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	334d      	adds	r3, #77	@ 0x4d
 80066c6:	2202      	movs	r2, #2
 80066c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80066ca:	78fa      	ldrb	r2, [r7, #3]
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	331b      	adds	r3, #27
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	f040 8107 	bne.w	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80066e2:	78fa      	ldrb	r2, [r7, #3]
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	440b      	add	r3, r1
 80066f0:	334c      	adds	r3, #76	@ 0x4c
 80066f2:	2202      	movs	r2, #2
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	e0fb      	b.n	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4613      	mov	r3, r2
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	334d      	adds	r3, #77	@ 0x4d
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b04      	cmp	r3, #4
 800670c:	d13a      	bne.n	8006784 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	334d      	adds	r3, #77	@ 0x4d
 800671e:	2202      	movs	r2, #2
 8006720:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006722:	78fa      	ldrb	r2, [r7, #3]
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	334c      	adds	r3, #76	@ 0x4c
 8006732:	2202      	movs	r2, #2
 8006734:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006736:	78fa      	ldrb	r2, [r7, #3]
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	1a9b      	subs	r3, r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	440b      	add	r3, r1
 8006744:	331b      	adds	r3, #27
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b01      	cmp	r3, #1
 800674a:	f040 80d1 	bne.w	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800674e:	78fa      	ldrb	r2, [r7, #3]
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	331b      	adds	r3, #27
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4413      	add	r3, r2
 800676a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	78fa      	ldrb	r2, [r7, #3]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	440a      	add	r2, r1
 8006778:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800677c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006780:	6053      	str	r3, [r2, #4]
 8006782:	e0b5      	b.n	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006784:	78fa      	ldrb	r2, [r7, #3]
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	4613      	mov	r3, r2
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	1a9b      	subs	r3, r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	334d      	adds	r3, #77	@ 0x4d
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b05      	cmp	r3, #5
 8006798:	d114      	bne.n	80067c4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800679a:	78fa      	ldrb	r2, [r7, #3]
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	334d      	adds	r3, #77	@ 0x4d
 80067aa:	2202      	movs	r2, #2
 80067ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	334c      	adds	r3, #76	@ 0x4c
 80067be:	2202      	movs	r2, #2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	e095      	b.n	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	334d      	adds	r3, #77	@ 0x4d
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b06      	cmp	r3, #6
 80067d8:	d114      	bne.n	8006804 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80067da:	78fa      	ldrb	r2, [r7, #3]
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	334d      	adds	r3, #77	@ 0x4d
 80067ea:	2202      	movs	r2, #2
 80067ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	334c      	adds	r3, #76	@ 0x4c
 80067fe:	2205      	movs	r2, #5
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	e075      	b.n	80068f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006804:	78fa      	ldrb	r2, [r7, #3]
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	4613      	mov	r3, r2
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	1a9b      	subs	r3, r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	440b      	add	r3, r1
 8006812:	334d      	adds	r3, #77	@ 0x4d
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b07      	cmp	r3, #7
 8006818:	d00a      	beq.n	8006830 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	334d      	adds	r3, #77	@ 0x4d
 800682a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800682c:	2b09      	cmp	r3, #9
 800682e:	d170      	bne.n	8006912 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006830:	78fa      	ldrb	r2, [r7, #3]
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	4613      	mov	r3, r2
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	334d      	adds	r3, #77	@ 0x4d
 8006840:	2202      	movs	r2, #2
 8006842:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	4613      	mov	r3, r2
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	1a9b      	subs	r3, r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	3344      	adds	r3, #68	@ 0x44
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	1c59      	adds	r1, r3, #1
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4403      	add	r3, r0
 8006864:	3344      	adds	r3, #68	@ 0x44
 8006866:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	4613      	mov	r3, r2
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	3344      	adds	r3, #68	@ 0x44
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d914      	bls.n	80068a8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	3344      	adds	r3, #68	@ 0x44
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	334c      	adds	r3, #76	@ 0x4c
 80068a2:	2204      	movs	r2, #4
 80068a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80068a6:	e022      	b.n	80068ee <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80068a8:	78fa      	ldrb	r2, [r7, #3]
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	334c      	adds	r3, #76	@ 0x4c
 80068b8:	2202      	movs	r2, #2
 80068ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e8:	461a      	mov	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80068ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	4613      	mov	r3, r2
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	1a9b      	subs	r3, r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	440b      	add	r3, r1
 80068fe:	334c      	adds	r3, #76	@ 0x4c
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f00a faec 	bl	8010ee4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800690c:	e002      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800690e:	bf00      	nop
 8006910:	e000      	b.n	8006914 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8006912:	bf00      	nop
  }
}
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b08a      	sub	sp, #40	@ 0x28
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f003 030f 	and.w	r3, r3, #15
 800693a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	0c5b      	lsrs	r3, r3, #17
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	091b      	lsrs	r3, r3, #4
 800694a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800694e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d004      	beq.n	8006960 <HCD_RXQLVL_IRQHandler+0x46>
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b05      	cmp	r3, #5
 800695a:	f000 80b6 	beq.w	8006aca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800695e:	e0b7      	b.n	8006ad0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 80b3 	beq.w	8006ace <HCD_RXQLVL_IRQHandler+0x1b4>
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	4613      	mov	r3, r2
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	332c      	adds	r3, #44	@ 0x2c
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80a7 	beq.w	8006ace <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	4613      	mov	r3, r2
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	1a9b      	subs	r3, r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	3338      	adds	r3, #56	@ 0x38
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	18d1      	adds	r1, r2, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	4613      	mov	r3, r2
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4403      	add	r3, r0
 80069a4:	3334      	adds	r3, #52	@ 0x34
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4299      	cmp	r1, r3
 80069aa:	f200 8083 	bhi.w	8006ab4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	4613      	mov	r3, r2
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	1a9b      	subs	r3, r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	332c      	adds	r3, #44	@ 0x2c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	b292      	uxth	r2, r2
 80069c8:	4619      	mov	r1, r3
 80069ca:	f006 fe1d 	bl	800d608 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	4613      	mov	r3, r2
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	332c      	adds	r3, #44	@ 0x2c
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	18d1      	adds	r1, r2, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	4613      	mov	r3, r2
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4403      	add	r3, r0
 80069f2:	332c      	adds	r3, #44	@ 0x2c
 80069f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	4613      	mov	r3, r2
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	3338      	adds	r3, #56	@ 0x38
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	18d1      	adds	r1, r2, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4613      	mov	r3, r2
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4403      	add	r3, r0
 8006a1a:	3338      	adds	r3, #56	@ 0x38
 8006a1c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	0cdb      	lsrs	r3, r3, #19
 8006a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a32:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	1a9b      	subs	r3, r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	440b      	add	r3, r1
 8006a42:	3328      	adds	r3, #40	@ 0x28
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d13f      	bne.n	8006ace <HCD_RXQLVL_IRQHandler+0x1b4>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d03c      	beq.n	8006ace <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a6a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a72:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a80:	461a      	mov	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	1a9b      	subs	r3, r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	333c      	adds	r3, #60	@ 0x3c
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	f083 0301 	eor.w	r3, r3, #1
 8006a9c:	b2d8      	uxtb	r0, r3
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	333c      	adds	r3, #60	@ 0x3c
 8006aae:	4602      	mov	r2, r0
 8006ab0:	701a      	strb	r2, [r3, #0]
      break;
 8006ab2:	e00c      	b.n	8006ace <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	334c      	adds	r3, #76	@ 0x4c
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	701a      	strb	r2, [r3, #0]
      break;
 8006ac8:	e001      	b.n	8006ace <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006aca:	bf00      	nop
 8006acc:	e000      	b.n	8006ad0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006ace:	bf00      	nop
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	3728      	adds	r7, #40	@ 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006b04:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d10b      	bne.n	8006b28 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d102      	bne.n	8006b20 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f00a f9c6 	bl	8010eac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f043 0302 	orr.w	r3, r3, #2
 8006b26:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d132      	bne.n	8006b98 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f043 0308 	orr.w	r3, r3, #8
 8006b38:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d126      	bne.n	8006b92 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7a5b      	ldrb	r3, [r3, #9]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d113      	bne.n	8006b74 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b56:	d106      	bne.n	8006b66 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2102      	movs	r1, #2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f006 fed6 	bl	800d910 <USB_InitFSLSPClkSel>
 8006b64:	e011      	b.n	8006b8a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f006 fecf 	bl	800d910 <USB_InitFSLSPClkSel>
 8006b72:	e00a      	b.n	8006b8a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	79db      	ldrb	r3, [r3, #7]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d106      	bne.n	8006b8a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b82:	461a      	mov	r2, r3
 8006b84:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006b88:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f00a f9b8 	bl	8010f00 <HAL_HCD_PortEnabled_Callback>
 8006b90:	e002      	b.n	8006b98 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f00a f9c2 	bl	8010f1c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d103      	bne.n	8006baa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f043 0320 	orr.w	r3, r3, #32
 8006ba8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6013      	str	r3, [r2, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e08b      	b.n	8006cea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fa faea 	bl	80011c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2224      	movs	r2, #36	@ 0x24
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006c10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d107      	bne.n	8006c3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c36:	609a      	str	r2, [r3, #8]
 8006c38:	e006      	b.n	8006c48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006c46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d108      	bne.n	8006c62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c5e:	605a      	str	r2, [r3, #4]
 8006c60:	e007      	b.n	8006c72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6859      	ldr	r1, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf4 <HAL_I2C_Init+0x134>)
 8006c7e:	430b      	orrs	r3, r1
 8006c80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69d9      	ldr	r1, [r3, #28]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a1a      	ldr	r2, [r3, #32]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	02008000 	.word	0x02008000

08006cf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d138      	bne.n	8006d80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e032      	b.n	8006d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2224      	movs	r2, #36	@ 0x24
 8006d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0201 	bic.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6819      	ldr	r1, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e000      	b.n	8006d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d80:	2302      	movs	r3, #2
  }
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d139      	bne.n	8006e18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006dae:	2302      	movs	r3, #2
 8006db0:	e033      	b.n	8006e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2224      	movs	r2, #36	@ 0x24
 8006dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006de0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e000      	b.n	8006e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e18:	2302      	movs	r3, #2
  }
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
	...

08006e28 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e0bf      	b.n	8006fba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fa fae0 	bl	8001414 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006e6a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6999      	ldr	r1, [r3, #24]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e80:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6899      	ldr	r1, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8006fc4 <HAL_LTDC_Init+0x19c>)
 8006e9c:	400b      	ands	r3, r1
 8006e9e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	041b      	lsls	r3, r3, #16
 8006ea6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6899      	ldr	r1, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68d9      	ldr	r1, [r3, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8006fc4 <HAL_LTDC_Init+0x19c>)
 8006eca:	400b      	ands	r3, r1
 8006ecc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	041b      	lsls	r3, r3, #16
 8006ed4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68d9      	ldr	r1, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1a      	ldr	r2, [r3, #32]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6919      	ldr	r1, [r3, #16]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4b33      	ldr	r3, [pc, #204]	@ (8006fc4 <HAL_LTDC_Init+0x19c>)
 8006ef8:	400b      	ands	r3, r1
 8006efa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6919      	ldr	r1, [r3, #16]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6959      	ldr	r1, [r3, #20]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	4b27      	ldr	r3, [pc, #156]	@ (8006fc4 <HAL_LTDC_Init+0x19c>)
 8006f26:	400b      	ands	r3, r1
 8006f28:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6959      	ldr	r1, [r3, #20]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f4e:	021b      	lsls	r3, r3, #8
 8006f50:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006f58:	041b      	lsls	r3, r3, #16
 8006f5a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0206 	orr.w	r2, r2, #6
 8006f96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	f000f800 	.word	0xf000f800

08006fc8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fde:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 0304 	and.w	r3, r3, #4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d023      	beq.n	8007032 <HAL_LTDC_IRQHandler+0x6a>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01e      	beq.n	8007032 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0204 	bic.w	r2, r2, #4
 8007002:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2204      	movs	r2, #4
 800700a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007012:	f043 0201 	orr.w	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2204      	movs	r2, #4
 8007020:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f86f 	bl	8007110 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d023      	beq.n	8007084 <HAL_LTDC_IRQHandler+0xbc>
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01e      	beq.n	8007084 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0202 	bic.w	r2, r2, #2
 8007054:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2202      	movs	r2, #2
 800705c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007064:	f043 0202 	orr.w	r2, r3, #2
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2204      	movs	r2, #4
 8007072:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f846 	bl	8007110 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01b      	beq.n	80070c6 <HAL_LTDC_IRQHandler+0xfe>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d016      	beq.n	80070c6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0201 	bic.w	r2, r2, #1
 80070a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2201      	movs	r2, #1
 80070ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f82f 	bl	8007124 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01b      	beq.n	8007108 <HAL_LTDC_IRQHandler+0x140>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d016      	beq.n	8007108 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0208 	bic.w	r2, r2, #8
 80070e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2208      	movs	r2, #8
 80070f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f818 	bl	8007138 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800714c:	b5b0      	push	{r4, r5, r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800715e:	2b01      	cmp	r3, #1
 8007160:	d101      	bne.n	8007166 <HAL_LTDC_ConfigLayer+0x1a>
 8007162:	2302      	movs	r3, #2
 8007164:	e02c      	b.n	80071c0 <HAL_LTDC_ConfigLayer+0x74>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2202      	movs	r2, #2
 8007172:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2134      	movs	r1, #52	@ 0x34
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	4413      	add	r3, r2
 8007182:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	4614      	mov	r4, r2
 800718a:	461d      	mov	r5, r3
 800718c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800718e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f811 	bl	80071c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2201      	movs	r2, #1
 80071ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bdb0      	pop	{r4, r5, r7, pc}

080071c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b089      	sub	sp, #36	@ 0x24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	0c1b      	lsrs	r3, r3, #16
 80071e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071e4:	4413      	add	r3, r2
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	01db      	lsls	r3, r3, #7
 80071f4:	4413      	add	r3, r2
 80071f6:	3384      	adds	r3, #132	@ 0x84
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	4611      	mov	r1, r2
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	01d2      	lsls	r2, r2, #7
 8007204:	440a      	add	r2, r1
 8007206:	3284      	adds	r2, #132	@ 0x84
 8007208:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800720c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800721e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007220:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4619      	mov	r1, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	01db      	lsls	r3, r3, #7
 800722c:	440b      	add	r3, r1
 800722e:	3384      	adds	r3, #132	@ 0x84
 8007230:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007236:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007246:	4413      	add	r3, r2
 8007248:	041b      	lsls	r3, r3, #16
 800724a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	01db      	lsls	r3, r3, #7
 8007256:	4413      	add	r3, r2
 8007258:	3384      	adds	r3, #132	@ 0x84
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	4611      	mov	r1, r2
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	01d2      	lsls	r2, r2, #7
 8007266:	440a      	add	r2, r1
 8007268:	3284      	adds	r2, #132	@ 0x84
 800726a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800726e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800727e:	4413      	add	r3, r2
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4619      	mov	r1, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	01db      	lsls	r3, r3, #7
 800728c:	440b      	add	r3, r1
 800728e:	3384      	adds	r3, #132	@ 0x84
 8007290:	4619      	mov	r1, r3
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4313      	orrs	r3, r2
 8007296:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	01db      	lsls	r3, r3, #7
 80072a2:	4413      	add	r3, r2
 80072a4:	3384      	adds	r3, #132	@ 0x84
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	4611      	mov	r1, r2
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	01d2      	lsls	r2, r2, #7
 80072b2:	440a      	add	r2, r1
 80072b4:	3284      	adds	r2, #132	@ 0x84
 80072b6:	f023 0307 	bic.w	r3, r3, #7
 80072ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	461a      	mov	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	01db      	lsls	r3, r3, #7
 80072c6:	4413      	add	r3, r2
 80072c8:	3384      	adds	r3, #132	@ 0x84
 80072ca:	461a      	mov	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	061b      	lsls	r3, r3, #24
 80072ec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	01db      	lsls	r3, r3, #7
 80072f8:	4413      	add	r3, r2
 80072fa:	3384      	adds	r3, #132	@ 0x84
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	01db      	lsls	r3, r3, #7
 8007308:	4413      	add	r3, r2
 800730a:	3384      	adds	r3, #132	@ 0x84
 800730c:	461a      	mov	r2, r3
 800730e:	2300      	movs	r3, #0
 8007310:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007318:	461a      	mov	r2, r3
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	431a      	orrs	r2, r3
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	431a      	orrs	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4619      	mov	r1, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	01db      	lsls	r3, r3, #7
 800732c:	440b      	add	r3, r1
 800732e:	3384      	adds	r3, #132	@ 0x84
 8007330:	4619      	mov	r1, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	01db      	lsls	r3, r3, #7
 8007342:	4413      	add	r3, r2
 8007344:	3384      	adds	r3, #132	@ 0x84
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	4611      	mov	r1, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	01d2      	lsls	r2, r2, #7
 8007352:	440a      	add	r2, r1
 8007354:	3284      	adds	r2, #132	@ 0x84
 8007356:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800735a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	01db      	lsls	r3, r3, #7
 8007366:	4413      	add	r3, r2
 8007368:	3384      	adds	r3, #132	@ 0x84
 800736a:	461a      	mov	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	01db      	lsls	r3, r3, #7
 800737c:	4413      	add	r3, r2
 800737e:	3384      	adds	r3, #132	@ 0x84
 8007380:	69da      	ldr	r2, [r3, #28]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4619      	mov	r1, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	01db      	lsls	r3, r3, #7
 800738c:	440b      	add	r3, r1
 800738e:	3384      	adds	r3, #132	@ 0x84
 8007390:	4619      	mov	r1, r3
 8007392:	4b58      	ldr	r3, [pc, #352]	@ (80074f4 <LTDC_SetConfig+0x32c>)
 8007394:	4013      	ands	r3, r2
 8007396:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	69da      	ldr	r2, [r3, #28]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	68f9      	ldr	r1, [r7, #12]
 80073a2:	6809      	ldr	r1, [r1, #0]
 80073a4:	4608      	mov	r0, r1
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	01c9      	lsls	r1, r1, #7
 80073aa:	4401      	add	r1, r0
 80073ac:	3184      	adds	r1, #132	@ 0x84
 80073ae:	4313      	orrs	r3, r2
 80073b0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	01db      	lsls	r3, r3, #7
 80073bc:	4413      	add	r3, r2
 80073be:	3384      	adds	r3, #132	@ 0x84
 80073c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	01db      	lsls	r3, r3, #7
 80073cc:	4413      	add	r3, r2
 80073ce:	3384      	adds	r3, #132	@ 0x84
 80073d0:	461a      	mov	r2, r3
 80073d2:	2300      	movs	r3, #0
 80073d4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	01db      	lsls	r3, r3, #7
 80073e0:	4413      	add	r3, r2
 80073e2:	3384      	adds	r3, #132	@ 0x84
 80073e4:	461a      	mov	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ea:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80073f4:	2304      	movs	r3, #4
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	e01b      	b.n	8007432 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d102      	bne.n	8007408 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007402:	2303      	movs	r3, #3
 8007404:	61fb      	str	r3, [r7, #28]
 8007406:	e014      	b.n	8007432 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b04      	cmp	r3, #4
 800740e:	d00b      	beq.n	8007428 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007414:	2b02      	cmp	r3, #2
 8007416:	d007      	beq.n	8007428 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800741c:	2b03      	cmp	r3, #3
 800741e:	d003      	beq.n	8007428 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007424:	2b07      	cmp	r3, #7
 8007426:	d102      	bne.n	800742e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007428:	2302      	movs	r3, #2
 800742a:	61fb      	str	r3, [r7, #28]
 800742c:	e001      	b.n	8007432 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800742e:	2301      	movs	r3, #1
 8007430:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	01db      	lsls	r3, r3, #7
 800743c:	4413      	add	r3, r2
 800743e:	3384      	adds	r3, #132	@ 0x84
 8007440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	6812      	ldr	r2, [r2, #0]
 8007446:	4611      	mov	r1, r2
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	01d2      	lsls	r2, r2, #7
 800744c:	440a      	add	r2, r1
 800744e:	3284      	adds	r2, #132	@ 0x84
 8007450:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007454:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	fb02 f303 	mul.w	r3, r2, r3
 8007460:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6859      	ldr	r1, [r3, #4]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	1acb      	subs	r3, r1, r3
 800746c:	69f9      	ldr	r1, [r7, #28]
 800746e:	fb01 f303 	mul.w	r3, r1, r3
 8007472:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007474:	68f9      	ldr	r1, [r7, #12]
 8007476:	6809      	ldr	r1, [r1, #0]
 8007478:	4608      	mov	r0, r1
 800747a:	6879      	ldr	r1, [r7, #4]
 800747c:	01c9      	lsls	r1, r1, #7
 800747e:	4401      	add	r1, r0
 8007480:	3184      	adds	r1, #132	@ 0x84
 8007482:	4313      	orrs	r3, r2
 8007484:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	01db      	lsls	r3, r3, #7
 8007490:	4413      	add	r3, r2
 8007492:	3384      	adds	r3, #132	@ 0x84
 8007494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4619      	mov	r1, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	01db      	lsls	r3, r3, #7
 80074a0:	440b      	add	r3, r1
 80074a2:	3384      	adds	r3, #132	@ 0x84
 80074a4:	4619      	mov	r1, r3
 80074a6:	4b14      	ldr	r3, [pc, #80]	@ (80074f8 <LTDC_SetConfig+0x330>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	01db      	lsls	r3, r3, #7
 80074b6:	4413      	add	r3, r2
 80074b8:	3384      	adds	r3, #132	@ 0x84
 80074ba:	461a      	mov	r2, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	01db      	lsls	r3, r3, #7
 80074cc:	4413      	add	r3, r2
 80074ce:	3384      	adds	r3, #132	@ 0x84
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	6812      	ldr	r2, [r2, #0]
 80074d6:	4611      	mov	r1, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	01d2      	lsls	r2, r2, #7
 80074dc:	440a      	add	r2, r1
 80074de:	3284      	adds	r2, #132	@ 0x84
 80074e0:	f043 0301 	orr.w	r3, r3, #1
 80074e4:	6013      	str	r3, [r2, #0]
}
 80074e6:	bf00      	nop
 80074e8:	3724      	adds	r7, #36	@ 0x24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	fffff8f8 	.word	0xfffff8f8
 80074f8:	fffff800 	.word	0xfffff800

080074fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007500:	4b05      	ldr	r3, [pc, #20]	@ (8007518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a04      	ldr	r2, [pc, #16]	@ (8007518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800750a:	6013      	str	r3, [r2, #0]
}
 800750c:	bf00      	nop
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40007000 	.word	0x40007000

0800751c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007526:	4b23      	ldr	r3, [pc, #140]	@ (80075b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752a:	4a22      	ldr	r2, [pc, #136]	@ (80075b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800752c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007530:	6413      	str	r3, [r2, #64]	@ 0x40
 8007532:	4b20      	ldr	r3, [pc, #128]	@ (80075b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800753e:	4b1e      	ldr	r3, [pc, #120]	@ (80075b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a1d      	ldr	r2, [pc, #116]	@ (80075b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007548:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800754a:	f7fb fc37 	bl	8002dbc <HAL_GetTick>
 800754e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007550:	e009      	b.n	8007566 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007552:	f7fb fc33 	bl	8002dbc <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007560:	d901      	bls.n	8007566 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e022      	b.n	80075ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007566:	4b14      	ldr	r3, [pc, #80]	@ (80075b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800756e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007572:	d1ee      	bne.n	8007552 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007574:	4b10      	ldr	r3, [pc, #64]	@ (80075b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a0f      	ldr	r2, [pc, #60]	@ (80075b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800757a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800757e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007580:	f7fb fc1c 	bl	8002dbc <HAL_GetTick>
 8007584:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007586:	e009      	b.n	800759c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007588:	f7fb fc18 	bl	8002dbc <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007596:	d901      	bls.n	800759c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e007      	b.n	80075ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800759c:	4b06      	ldr	r3, [pc, #24]	@ (80075b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075a8:	d1ee      	bne.n	8007588 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40023800 	.word	0x40023800
 80075b8:	40007000 	.word	0x40007000

080075bc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80075c4:	f7fb fbfa 	bl	8002dbc <HAL_GetTick>
 80075c8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e067      	b.n	80076a4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10b      	bne.n	80075f8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7fa f903 	bl	80017f4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80075ee:	f241 3188 	movw	r1, #5000	@ 0x1388
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f85e 	bl	80076b4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	3b01      	subs	r3, #1
 8007608:	021a      	lsls	r2, r3, #8
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	2120      	movs	r1, #32
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f856 	bl	80076d0 <QSPI_WaitFlagStateUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007628:	7afb      	ldrb	r3, [r7, #11]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d135      	bne.n	800769a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	4b1d      	ldr	r3, [pc, #116]	@ (80076ac <HAL_QSPI_Init+0xf0>)
 8007636:	4013      	ands	r3, r2
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6852      	ldr	r2, [r2, #4]
 800763c:	0611      	lsls	r1, r2, #24
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	68d2      	ldr	r2, [r2, #12]
 8007642:	4311      	orrs	r1, r2
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	69d2      	ldr	r2, [r2, #28]
 8007648:	4311      	orrs	r1, r2
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	6a12      	ldr	r2, [r2, #32]
 800764e:	4311      	orrs	r1, r2
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6812      	ldr	r2, [r2, #0]
 8007654:	430b      	orrs	r3, r1
 8007656:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	4b14      	ldr	r3, [pc, #80]	@ (80076b0 <HAL_QSPI_Init+0xf4>)
 8007660:	4013      	ands	r3, r2
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6912      	ldr	r2, [r2, #16]
 8007666:	0411      	lsls	r1, r2, #16
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6952      	ldr	r2, [r2, #20]
 800766c:	4311      	orrs	r1, r2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6992      	ldr	r2, [r2, #24]
 8007672:	4311      	orrs	r1, r2
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	430b      	orrs	r3, r1
 800767a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80076a2:	7afb      	ldrb	r3, [r7, #11]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	00ffff2f 	.word	0x00ffff2f
 80076b0:	ffe0f8fe 	.word	0xffe0f8fe

080076b4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80076e0:	e01a      	b.n	8007718 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e8:	d016      	beq.n	8007718 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ea:	f7fb fb67 	bl	8002dbc <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d302      	bcc.n	8007700 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10b      	bne.n	8007718 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2204      	movs	r2, #4
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800770c:	f043 0201 	orr.w	r2, r3, #1
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e00e      	b.n	8007736 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4013      	ands	r3, r2
 8007722:	2b00      	cmp	r3, #0
 8007724:	bf14      	ite	ne
 8007726:	2301      	movne	r3, #1
 8007728:	2300      	moveq	r3, #0
 800772a:	b2db      	uxtb	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	429a      	cmp	r2, r3
 8007732:	d1d6      	bne.n	80076e2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007748:	2300      	movs	r3, #0
 800774a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e291      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 8087 	beq.w	8007872 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007764:	4b96      	ldr	r3, [pc, #600]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 030c 	and.w	r3, r3, #12
 800776c:	2b04      	cmp	r3, #4
 800776e:	d00c      	beq.n	800778a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007770:	4b93      	ldr	r3, [pc, #588]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f003 030c 	and.w	r3, r3, #12
 8007778:	2b08      	cmp	r3, #8
 800777a:	d112      	bne.n	80077a2 <HAL_RCC_OscConfig+0x62>
 800777c:	4b90      	ldr	r3, [pc, #576]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007788:	d10b      	bne.n	80077a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800778a:	4b8d      	ldr	r3, [pc, #564]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d06c      	beq.n	8007870 <HAL_RCC_OscConfig+0x130>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d168      	bne.n	8007870 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e26b      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077aa:	d106      	bne.n	80077ba <HAL_RCC_OscConfig+0x7a>
 80077ac:	4b84      	ldr	r3, [pc, #528]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a83      	ldr	r2, [pc, #524]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80077b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	e02e      	b.n	8007818 <HAL_RCC_OscConfig+0xd8>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10c      	bne.n	80077dc <HAL_RCC_OscConfig+0x9c>
 80077c2:	4b7f      	ldr	r3, [pc, #508]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a7e      	ldr	r2, [pc, #504]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80077c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	4b7c      	ldr	r3, [pc, #496]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a7b      	ldr	r2, [pc, #492]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80077d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	e01d      	b.n	8007818 <HAL_RCC_OscConfig+0xd8>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077e4:	d10c      	bne.n	8007800 <HAL_RCC_OscConfig+0xc0>
 80077e6:	4b76      	ldr	r3, [pc, #472]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a75      	ldr	r2, [pc, #468]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80077ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4b73      	ldr	r3, [pc, #460]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a72      	ldr	r2, [pc, #456]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80077f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e00b      	b.n	8007818 <HAL_RCC_OscConfig+0xd8>
 8007800:	4b6f      	ldr	r3, [pc, #444]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a6e      	ldr	r2, [pc, #440]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	4b6c      	ldr	r3, [pc, #432]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a6b      	ldr	r2, [pc, #428]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d013      	beq.n	8007848 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007820:	f7fb facc 	bl	8002dbc <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007828:	f7fb fac8 	bl	8002dbc <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b64      	cmp	r3, #100	@ 0x64
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e21f      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800783a:	4b61      	ldr	r3, [pc, #388]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0xe8>
 8007846:	e014      	b.n	8007872 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007848:	f7fb fab8 	bl	8002dbc <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007850:	f7fb fab4 	bl	8002dbc <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b64      	cmp	r3, #100	@ 0x64
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e20b      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007862:	4b57      	ldr	r3, [pc, #348]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f0      	bne.n	8007850 <HAL_RCC_OscConfig+0x110>
 800786e:	e000      	b.n	8007872 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d069      	beq.n	8007952 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800787e:	4b50      	ldr	r3, [pc, #320]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 030c 	and.w	r3, r3, #12
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00b      	beq.n	80078a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800788a:	4b4d      	ldr	r3, [pc, #308]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 030c 	and.w	r3, r3, #12
 8007892:	2b08      	cmp	r3, #8
 8007894:	d11c      	bne.n	80078d0 <HAL_RCC_OscConfig+0x190>
 8007896:	4b4a      	ldr	r3, [pc, #296]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d116      	bne.n	80078d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078a2:	4b47      	ldr	r3, [pc, #284]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <HAL_RCC_OscConfig+0x17a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d001      	beq.n	80078ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e1df      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ba:	4b41      	ldr	r3, [pc, #260]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	493d      	ldr	r1, [pc, #244]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ce:	e040      	b.n	8007952 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d023      	beq.n	8007920 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078d8:	4b39      	ldr	r3, [pc, #228]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a38      	ldr	r2, [pc, #224]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80078de:	f043 0301 	orr.w	r3, r3, #1
 80078e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e4:	f7fb fa6a 	bl	8002dbc <HAL_GetTick>
 80078e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078ea:	e008      	b.n	80078fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078ec:	f7fb fa66 	bl	8002dbc <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e1bd      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078fe:	4b30      	ldr	r3, [pc, #192]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0f0      	beq.n	80078ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800790a:	4b2d      	ldr	r3, [pc, #180]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	4929      	ldr	r1, [pc, #164]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 800791a:	4313      	orrs	r3, r2
 800791c:	600b      	str	r3, [r1, #0]
 800791e:	e018      	b.n	8007952 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007920:	4b27      	ldr	r3, [pc, #156]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a26      	ldr	r2, [pc, #152]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007926:	f023 0301 	bic.w	r3, r3, #1
 800792a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792c:	f7fb fa46 	bl	8002dbc <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007934:	f7fb fa42 	bl	8002dbc <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e199      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007946:	4b1e      	ldr	r3, [pc, #120]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1f0      	bne.n	8007934 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0308 	and.w	r3, r3, #8
 800795a:	2b00      	cmp	r3, #0
 800795c:	d038      	beq.n	80079d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d019      	beq.n	800799a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007966:	4b16      	ldr	r3, [pc, #88]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 8007968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800796a:	4a15      	ldr	r2, [pc, #84]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 800796c:	f043 0301 	orr.w	r3, r3, #1
 8007970:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007972:	f7fb fa23 	bl	8002dbc <HAL_GetTick>
 8007976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007978:	e008      	b.n	800798c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800797a:	f7fb fa1f 	bl	8002dbc <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d901      	bls.n	800798c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e176      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800798c:	4b0c      	ldr	r3, [pc, #48]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 800798e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0f0      	beq.n	800797a <HAL_RCC_OscConfig+0x23a>
 8007998:	e01a      	b.n	80079d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800799a:	4b09      	ldr	r3, [pc, #36]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 800799c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800799e:	4a08      	ldr	r2, [pc, #32]	@ (80079c0 <HAL_RCC_OscConfig+0x280>)
 80079a0:	f023 0301 	bic.w	r3, r3, #1
 80079a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a6:	f7fb fa09 	bl	8002dbc <HAL_GetTick>
 80079aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079ac:	e00a      	b.n	80079c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079ae:	f7fb fa05 	bl	8002dbc <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d903      	bls.n	80079c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e15c      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
 80079c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079c4:	4b91      	ldr	r3, [pc, #580]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 80079c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1ee      	bne.n	80079ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80a4 	beq.w	8007b26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079de:	4b8b      	ldr	r3, [pc, #556]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 80079e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10d      	bne.n	8007a06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ea:	4b88      	ldr	r3, [pc, #544]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ee:	4a87      	ldr	r2, [pc, #540]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 80079f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80079f6:	4b85      	ldr	r3, [pc, #532]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 80079f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079fe:	60bb      	str	r3, [r7, #8]
 8007a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a06:	4b82      	ldr	r3, [pc, #520]	@ (8007c10 <HAL_RCC_OscConfig+0x4d0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d118      	bne.n	8007a44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007a12:	4b7f      	ldr	r3, [pc, #508]	@ (8007c10 <HAL_RCC_OscConfig+0x4d0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a7e      	ldr	r2, [pc, #504]	@ (8007c10 <HAL_RCC_OscConfig+0x4d0>)
 8007a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a1e:	f7fb f9cd 	bl	8002dbc <HAL_GetTick>
 8007a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a24:	e008      	b.n	8007a38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a26:	f7fb f9c9 	bl	8002dbc <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b64      	cmp	r3, #100	@ 0x64
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e120      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a38:	4b75      	ldr	r3, [pc, #468]	@ (8007c10 <HAL_RCC_OscConfig+0x4d0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d0f0      	beq.n	8007a26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d106      	bne.n	8007a5a <HAL_RCC_OscConfig+0x31a>
 8007a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a50:	4a6e      	ldr	r2, [pc, #440]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a58:	e02d      	b.n	8007ab6 <HAL_RCC_OscConfig+0x376>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10c      	bne.n	8007a7c <HAL_RCC_OscConfig+0x33c>
 8007a62:	4b6a      	ldr	r3, [pc, #424]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a66:	4a69      	ldr	r2, [pc, #420]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a6e:	4b67      	ldr	r3, [pc, #412]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a72:	4a66      	ldr	r2, [pc, #408]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007a74:	f023 0304 	bic.w	r3, r3, #4
 8007a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a7a:	e01c      	b.n	8007ab6 <HAL_RCC_OscConfig+0x376>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b05      	cmp	r3, #5
 8007a82:	d10c      	bne.n	8007a9e <HAL_RCC_OscConfig+0x35e>
 8007a84:	4b61      	ldr	r3, [pc, #388]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a88:	4a60      	ldr	r2, [pc, #384]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007a8a:	f043 0304 	orr.w	r3, r3, #4
 8007a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a90:	4b5e      	ldr	r3, [pc, #376]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a94:	4a5d      	ldr	r2, [pc, #372]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007a96:	f043 0301 	orr.w	r3, r3, #1
 8007a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a9c:	e00b      	b.n	8007ab6 <HAL_RCC_OscConfig+0x376>
 8007a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007aa4:	f023 0301 	bic.w	r3, r3, #1
 8007aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007aaa:	4b58      	ldr	r3, [pc, #352]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aae:	4a57      	ldr	r2, [pc, #348]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007ab0:	f023 0304 	bic.w	r3, r3, #4
 8007ab4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d015      	beq.n	8007aea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007abe:	f7fb f97d 	bl	8002dbc <HAL_GetTick>
 8007ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ac4:	e00a      	b.n	8007adc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ac6:	f7fb f979 	bl	8002dbc <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e0ce      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007adc:	4b4b      	ldr	r3, [pc, #300]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0ee      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x386>
 8007ae8:	e014      	b.n	8007b14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aea:	f7fb f967 	bl	8002dbc <HAL_GetTick>
 8007aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007af0:	e00a      	b.n	8007b08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007af2:	f7fb f963 	bl	8002dbc <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d901      	bls.n	8007b08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e0b8      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b08:	4b40      	ldr	r3, [pc, #256]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1ee      	bne.n	8007af2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d105      	bne.n	8007b26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1e:	4a3b      	ldr	r2, [pc, #236]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007b20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b24:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 80a4 	beq.w	8007c78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b30:	4b36      	ldr	r3, [pc, #216]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 030c 	and.w	r3, r3, #12
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d06b      	beq.n	8007c14 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d149      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b44:	4b31      	ldr	r3, [pc, #196]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a30      	ldr	r2, [pc, #192]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b50:	f7fb f934 	bl	8002dbc <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b56:	e008      	b.n	8007b6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b58:	f7fb f930 	bl	8002dbc <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e087      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b6a:	4b28      	ldr	r3, [pc, #160]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1f0      	bne.n	8007b58 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69da      	ldr	r2, [r3, #28]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b84:	019b      	lsls	r3, r3, #6
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8c:	085b      	lsrs	r3, r3, #1
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	041b      	lsls	r3, r3, #16
 8007b92:	431a      	orrs	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b98:	061b      	lsls	r3, r3, #24
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007b9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ba2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ba4:	4b19      	ldr	r3, [pc, #100]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a18      	ldr	r2, [pc, #96]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb0:	f7fb f904 	bl	8002dbc <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bb8:	f7fb f900 	bl	8002dbc <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e057      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bca:	4b10      	ldr	r3, [pc, #64]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x478>
 8007bd6:	e04f      	b.n	8007c78 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be4:	f7fb f8ea 	bl	8002dbc <HAL_GetTick>
 8007be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bec:	f7fb f8e6 	bl	8002dbc <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e03d      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bfe:	4b03      	ldr	r3, [pc, #12]	@ (8007c0c <HAL_RCC_OscConfig+0x4cc>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f0      	bne.n	8007bec <HAL_RCC_OscConfig+0x4ac>
 8007c0a:	e035      	b.n	8007c78 <HAL_RCC_OscConfig+0x538>
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007c14:	4b1b      	ldr	r3, [pc, #108]	@ (8007c84 <HAL_RCC_OscConfig+0x544>)
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d028      	beq.n	8007c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d121      	bne.n	8007c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d11a      	bne.n	8007c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007c44:	4013      	ands	r3, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007c4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d111      	bne.n	8007c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5a:	085b      	lsrs	r3, r3, #1
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d107      	bne.n	8007c74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d001      	beq.n	8007c78 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	40023800 	.word	0x40023800

08007c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e0d0      	b.n	8007e42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8007e4c <HAL_RCC_ClockConfig+0x1c4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 030f 	and.w	r3, r3, #15
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d910      	bls.n	8007cd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cae:	4b67      	ldr	r3, [pc, #412]	@ (8007e4c <HAL_RCC_ClockConfig+0x1c4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f023 020f 	bic.w	r2, r3, #15
 8007cb6:	4965      	ldr	r1, [pc, #404]	@ (8007e4c <HAL_RCC_ClockConfig+0x1c4>)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cbe:	4b63      	ldr	r3, [pc, #396]	@ (8007e4c <HAL_RCC_ClockConfig+0x1c4>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d001      	beq.n	8007cd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e0b8      	b.n	8007e42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d020      	beq.n	8007d1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d005      	beq.n	8007cf4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ce8:	4b59      	ldr	r3, [pc, #356]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	4a58      	ldr	r2, [pc, #352]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007cee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007cf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0308 	and.w	r3, r3, #8
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d00:	4b53      	ldr	r3, [pc, #332]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	4a52      	ldr	r2, [pc, #328]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d0c:	4b50      	ldr	r3, [pc, #320]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	494d      	ldr	r1, [pc, #308]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d040      	beq.n	8007dac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d107      	bne.n	8007d42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d32:	4b47      	ldr	r3, [pc, #284]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d115      	bne.n	8007d6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e07f      	b.n	8007e42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d107      	bne.n	8007d5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d4a:	4b41      	ldr	r3, [pc, #260]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d109      	bne.n	8007d6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e073      	b.n	8007e42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e06b      	b.n	8007e42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d6a:	4b39      	ldr	r3, [pc, #228]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f023 0203 	bic.w	r2, r3, #3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	4936      	ldr	r1, [pc, #216]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7c:	f7fb f81e 	bl	8002dbc <HAL_GetTick>
 8007d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d82:	e00a      	b.n	8007d9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d84:	f7fb f81a 	bl	8002dbc <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e053      	b.n	8007e42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 020c 	and.w	r2, r3, #12
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d1eb      	bne.n	8007d84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007dac:	4b27      	ldr	r3, [pc, #156]	@ (8007e4c <HAL_RCC_ClockConfig+0x1c4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d210      	bcs.n	8007ddc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dba:	4b24      	ldr	r3, [pc, #144]	@ (8007e4c <HAL_RCC_ClockConfig+0x1c4>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f023 020f 	bic.w	r2, r3, #15
 8007dc2:	4922      	ldr	r1, [pc, #136]	@ (8007e4c <HAL_RCC_ClockConfig+0x1c4>)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dca:	4b20      	ldr	r3, [pc, #128]	@ (8007e4c <HAL_RCC_ClockConfig+0x1c4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 030f 	and.w	r3, r3, #15
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d001      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e032      	b.n	8007e42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d008      	beq.n	8007dfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007de8:	4b19      	ldr	r3, [pc, #100]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	4916      	ldr	r1, [pc, #88]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0308 	and.w	r3, r3, #8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e06:	4b12      	ldr	r3, [pc, #72]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	490e      	ldr	r1, [pc, #56]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e1a:	f000 f821 	bl	8007e60 <HAL_RCC_GetSysClockFreq>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	4b0b      	ldr	r3, [pc, #44]	@ (8007e50 <HAL_RCC_ClockConfig+0x1c8>)
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	091b      	lsrs	r3, r3, #4
 8007e26:	f003 030f 	and.w	r3, r3, #15
 8007e2a:	490a      	ldr	r1, [pc, #40]	@ (8007e54 <HAL_RCC_ClockConfig+0x1cc>)
 8007e2c:	5ccb      	ldrb	r3, [r1, r3]
 8007e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e32:	4a09      	ldr	r2, [pc, #36]	@ (8007e58 <HAL_RCC_ClockConfig+0x1d0>)
 8007e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007e36:	4b09      	ldr	r3, [pc, #36]	@ (8007e5c <HAL_RCC_ClockConfig+0x1d4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fa f92a 	bl	8002094 <HAL_InitTick>

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	40023c00 	.word	0x40023c00
 8007e50:	40023800 	.word	0x40023800
 8007e54:	080115d8 	.word	0x080115d8
 8007e58:	20000000 	.word	0x20000000
 8007e5c:	20000004 	.word	0x20000004

08007e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e64:	b090      	sub	sp, #64	@ 0x40
 8007e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e70:	2300      	movs	r3, #0
 8007e72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e78:	4b59      	ldr	r3, [pc, #356]	@ (8007fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f003 030c 	and.w	r3, r3, #12
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d00d      	beq.n	8007ea0 <HAL_RCC_GetSysClockFreq+0x40>
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	f200 80a1 	bhi.w	8007fcc <HAL_RCC_GetSysClockFreq+0x16c>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <HAL_RCC_GetSysClockFreq+0x34>
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d003      	beq.n	8007e9a <HAL_RCC_GetSysClockFreq+0x3a>
 8007e92:	e09b      	b.n	8007fcc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e94:	4b53      	ldr	r3, [pc, #332]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e98:	e09b      	b.n	8007fd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e9a:	4b53      	ldr	r3, [pc, #332]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e9e:	e098      	b.n	8007fd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8007fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ea8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007eaa:	4b4d      	ldr	r3, [pc, #308]	@ (8007fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d028      	beq.n	8007f08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8007fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	099b      	lsrs	r3, r3, #6
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	623b      	str	r3, [r7, #32]
 8007ec0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4b47      	ldr	r3, [pc, #284]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ecc:	fb03 f201 	mul.w	r2, r3, r1
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	fb00 f303 	mul.w	r3, r0, r3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	4a43      	ldr	r2, [pc, #268]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007eda:	fba0 1202 	umull	r1, r2, r0, r2
 8007ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ee0:	460a      	mov	r2, r1
 8007ee2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee6:	4413      	add	r3, r2
 8007ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eec:	2200      	movs	r2, #0
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	61fa      	str	r2, [r7, #28]
 8007ef2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ef6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007efa:	f7f8 f985 	bl	8000208 <__aeabi_uldivmod>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4613      	mov	r3, r2
 8007f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f06:	e053      	b.n	8007fb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f08:	4b35      	ldr	r3, [pc, #212]	@ (8007fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	099b      	lsrs	r3, r3, #6
 8007f0e:	2200      	movs	r2, #0
 8007f10:	613b      	str	r3, [r7, #16]
 8007f12:	617a      	str	r2, [r7, #20]
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007f1a:	f04f 0b00 	mov.w	fp, #0
 8007f1e:	4652      	mov	r2, sl
 8007f20:	465b      	mov	r3, fp
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f04f 0100 	mov.w	r1, #0
 8007f2a:	0159      	lsls	r1, r3, #5
 8007f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f30:	0150      	lsls	r0, r2, #5
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	ebb2 080a 	subs.w	r8, r2, sl
 8007f3a:	eb63 090b 	sbc.w	r9, r3, fp
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	f04f 0300 	mov.w	r3, #0
 8007f46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f52:	ebb2 0408 	subs.w	r4, r2, r8
 8007f56:	eb63 0509 	sbc.w	r5, r3, r9
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	f04f 0300 	mov.w	r3, #0
 8007f62:	00eb      	lsls	r3, r5, #3
 8007f64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f68:	00e2      	lsls	r2, r4, #3
 8007f6a:	4614      	mov	r4, r2
 8007f6c:	461d      	mov	r5, r3
 8007f6e:	eb14 030a 	adds.w	r3, r4, sl
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	eb45 030b 	adc.w	r3, r5, fp
 8007f78:	607b      	str	r3, [r7, #4]
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f86:	4629      	mov	r1, r5
 8007f88:	028b      	lsls	r3, r1, #10
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f90:	4621      	mov	r1, r4
 8007f92:	028a      	lsls	r2, r1, #10
 8007f94:	4610      	mov	r0, r2
 8007f96:	4619      	mov	r1, r3
 8007f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	60bb      	str	r3, [r7, #8]
 8007f9e:	60fa      	str	r2, [r7, #12]
 8007fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fa4:	f7f8 f930 	bl	8000208 <__aeabi_uldivmod>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4613      	mov	r3, r2
 8007fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	0c1b      	lsrs	r3, r3, #16
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	3301      	adds	r3, #1
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007fc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007fca:	e002      	b.n	8007fd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fcc:	4b05      	ldr	r3, [pc, #20]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007fce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3740      	adds	r7, #64	@ 0x40
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fde:	bf00      	nop
 8007fe0:	40023800 	.word	0x40023800
 8007fe4:	00f42400 	.word	0x00f42400
 8007fe8:	017d7840 	.word	0x017d7840

08007fec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ff0:	4b03      	ldr	r3, [pc, #12]	@ (8008000 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000000 	.word	0x20000000

08008004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008008:	f7ff fff0 	bl	8007fec <HAL_RCC_GetHCLKFreq>
 800800c:	4602      	mov	r2, r0
 800800e:	4b05      	ldr	r3, [pc, #20]	@ (8008024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	0a9b      	lsrs	r3, r3, #10
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	4903      	ldr	r1, [pc, #12]	@ (8008028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800801a:	5ccb      	ldrb	r3, [r1, r3]
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	bd80      	pop	{r7, pc}
 8008024:	40023800 	.word	0x40023800
 8008028:	080115e8 	.word	0x080115e8

0800802c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008030:	f7ff ffdc 	bl	8007fec <HAL_RCC_GetHCLKFreq>
 8008034:	4602      	mov	r2, r0
 8008036:	4b05      	ldr	r3, [pc, #20]	@ (800804c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	0b5b      	lsrs	r3, r3, #13
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	4903      	ldr	r1, [pc, #12]	@ (8008050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008042:	5ccb      	ldrb	r3, [r1, r3]
 8008044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008048:	4618      	mov	r0, r3
 800804a:	bd80      	pop	{r7, pc}
 800804c:	40023800 	.word	0x40023800
 8008050:	080115e8 	.word	0x080115e8

08008054 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	220f      	movs	r2, #15
 8008062:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008064:	4b12      	ldr	r3, [pc, #72]	@ (80080b0 <HAL_RCC_GetClockConfig+0x5c>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 0203 	and.w	r2, r3, #3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008070:	4b0f      	ldr	r3, [pc, #60]	@ (80080b0 <HAL_RCC_GetClockConfig+0x5c>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800807c:	4b0c      	ldr	r3, [pc, #48]	@ (80080b0 <HAL_RCC_GetClockConfig+0x5c>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008088:	4b09      	ldr	r3, [pc, #36]	@ (80080b0 <HAL_RCC_GetClockConfig+0x5c>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	08db      	lsrs	r3, r3, #3
 800808e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008096:	4b07      	ldr	r3, [pc, #28]	@ (80080b4 <HAL_RCC_GetClockConfig+0x60>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 020f 	and.w	r2, r3, #15
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	601a      	str	r2, [r3, #0]
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	40023800 	.word	0x40023800
 80080b4:	40023c00 	.word	0x40023c00

080080b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d012      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80080e0:	4b69      	ldr	r3, [pc, #420]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	4a68      	ldr	r2, [pc, #416]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80080ea:	6093      	str	r3, [r2, #8]
 80080ec:	4b66      	ldr	r3, [pc, #408]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f4:	4964      	ldr	r1, [pc, #400]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008102:	2301      	movs	r3, #1
 8008104:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d017      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008112:	4b5d      	ldr	r3, [pc, #372]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008118:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008120:	4959      	ldr	r1, [pc, #356]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008130:	d101      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008132:	2301      	movs	r3, #1
 8008134:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800813e:	2301      	movs	r3, #1
 8008140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d017      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800814e:	4b4e      	ldr	r3, [pc, #312]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008154:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815c:	494a      	ldr	r1, [pc, #296]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800815e:	4313      	orrs	r3, r2
 8008160:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800816c:	d101      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800816e:	2301      	movs	r3, #1
 8008170:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800817a:	2301      	movs	r3, #1
 800817c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800818a:	2301      	movs	r3, #1
 800818c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 808b 	beq.w	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800819c:	4b3a      	ldr	r3, [pc, #232]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800819e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a0:	4a39      	ldr	r2, [pc, #228]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80081a8:	4b37      	ldr	r3, [pc, #220]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081b4:	4b35      	ldr	r3, [pc, #212]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a34      	ldr	r2, [pc, #208]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081c0:	f7fa fdfc 	bl	8002dbc <HAL_GetTick>
 80081c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081c6:	e008      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081c8:	f7fa fdf8 	bl	8002dbc <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b64      	cmp	r3, #100	@ 0x64
 80081d4:	d901      	bls.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e357      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081da:	4b2c      	ldr	r3, [pc, #176]	@ (800828c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0f0      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081e6:	4b28      	ldr	r3, [pc, #160]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d035      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	429a      	cmp	r2, r3
 8008202:	d02e      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008204:	4b20      	ldr	r3, [pc, #128]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800820c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800820e:	4b1e      	ldr	r3, [pc, #120]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008212:	4a1d      	ldr	r2, [pc, #116]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008218:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800821a:	4b1b      	ldr	r3, [pc, #108]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800821c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821e:	4a1a      	ldr	r2, [pc, #104]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008224:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008226:	4a18      	ldr	r2, [pc, #96]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800822c:	4b16      	ldr	r3, [pc, #88]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800822e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b01      	cmp	r3, #1
 8008236:	d114      	bne.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008238:	f7fa fdc0 	bl	8002dbc <HAL_GetTick>
 800823c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800823e:	e00a      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008240:	f7fa fdbc 	bl	8002dbc <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800824e:	4293      	cmp	r3, r2
 8008250:	d901      	bls.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e319      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008256:	4b0c      	ldr	r3, [pc, #48]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0ee      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800826a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800826e:	d111      	bne.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008270:	4b05      	ldr	r3, [pc, #20]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800827c:	4b04      	ldr	r3, [pc, #16]	@ (8008290 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800827e:	400b      	ands	r3, r1
 8008280:	4901      	ldr	r1, [pc, #4]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008282:	4313      	orrs	r3, r2
 8008284:	608b      	str	r3, [r1, #8]
 8008286:	e00b      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008288:	40023800 	.word	0x40023800
 800828c:	40007000 	.word	0x40007000
 8008290:	0ffffcff 	.word	0x0ffffcff
 8008294:	4baa      	ldr	r3, [pc, #680]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	4aa9      	ldr	r2, [pc, #676]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800829a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800829e:	6093      	str	r3, [r2, #8]
 80082a0:	4ba7      	ldr	r3, [pc, #668]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ac:	49a4      	ldr	r1, [pc, #656]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0310 	and.w	r3, r3, #16
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d010      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082be:	4ba0      	ldr	r3, [pc, #640]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c4:	4a9e      	ldr	r2, [pc, #632]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80082ce:	4b9c      	ldr	r3, [pc, #624]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	4999      	ldr	r1, [pc, #612]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00a      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082ec:	4b94      	ldr	r3, [pc, #592]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082fa:	4991      	ldr	r1, [pc, #580]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00a      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800830e:	4b8c      	ldr	r3, [pc, #560]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008314:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800831c:	4988      	ldr	r1, [pc, #544]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800831e:	4313      	orrs	r3, r2
 8008320:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00a      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008330:	4b83      	ldr	r3, [pc, #524]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008336:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800833e:	4980      	ldr	r1, [pc, #512]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008340:	4313      	orrs	r3, r2
 8008342:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008352:	4b7b      	ldr	r3, [pc, #492]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008358:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008360:	4977      	ldr	r1, [pc, #476]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008362:	4313      	orrs	r3, r2
 8008364:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00a      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008374:	4b72      	ldr	r3, [pc, #456]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800837a:	f023 0203 	bic.w	r2, r3, #3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008382:	496f      	ldr	r1, [pc, #444]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008384:	4313      	orrs	r3, r2
 8008386:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008396:	4b6a      	ldr	r3, [pc, #424]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800839c:	f023 020c 	bic.w	r2, r3, #12
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083a4:	4966      	ldr	r1, [pc, #408]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00a      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083b8:	4b61      	ldr	r3, [pc, #388]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083c6:	495e      	ldr	r1, [pc, #376]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083da:	4b59      	ldr	r3, [pc, #356]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083e0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083e8:	4955      	ldr	r1, [pc, #340]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00a      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80083fc:	4b50      	ldr	r3, [pc, #320]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008402:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800840a:	494d      	ldr	r1, [pc, #308]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800840c:	4313      	orrs	r3, r2
 800840e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800841e:	4b48      	ldr	r3, [pc, #288]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008424:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842c:	4944      	ldr	r1, [pc, #272]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008440:	4b3f      	ldr	r3, [pc, #252]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008446:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800844e:	493c      	ldr	r1, [pc, #240]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008450:	4313      	orrs	r3, r2
 8008452:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008462:	4b37      	ldr	r3, [pc, #220]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008468:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008470:	4933      	ldr	r1, [pc, #204]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008472:	4313      	orrs	r3, r2
 8008474:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00a      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008484:	4b2e      	ldr	r3, [pc, #184]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008492:	492b      	ldr	r1, [pc, #172]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008494:	4313      	orrs	r3, r2
 8008496:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d011      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80084a6:	4b26      	ldr	r3, [pc, #152]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084b4:	4922      	ldr	r1, [pc, #136]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084c4:	d101      	bne.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80084c6:	2301      	movs	r3, #1
 80084c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80084d6:	2301      	movs	r3, #1
 80084d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084e6:	4b16      	ldr	r3, [pc, #88]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084f4:	4912      	ldr	r1, [pc, #72]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008508:	4b0d      	ldr	r3, [pc, #52]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800850e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008518:	4909      	ldr	r1, [pc, #36]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d006      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 80d9 	beq.w	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008534:	4b02      	ldr	r3, [pc, #8]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a01      	ldr	r2, [pc, #4]	@ (8008540 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800853e:	e001      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008540:	40023800 	.word	0x40023800
 8008544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008546:	f7fa fc39 	bl	8002dbc <HAL_GetTick>
 800854a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800854c:	e008      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800854e:	f7fa fc35 	bl	8002dbc <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	2b64      	cmp	r3, #100	@ 0x64
 800855a:	d901      	bls.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800855c:	2303      	movs	r3, #3
 800855e:	e194      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008560:	4b6c      	ldr	r3, [pc, #432]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1f0      	bne.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d021      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857c:	2b00      	cmp	r3, #0
 800857e:	d11d      	bne.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008580:	4b64      	ldr	r3, [pc, #400]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008586:	0c1b      	lsrs	r3, r3, #16
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800858e:	4b61      	ldr	r3, [pc, #388]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008594:	0e1b      	lsrs	r3, r3, #24
 8008596:	f003 030f 	and.w	r3, r3, #15
 800859a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	019a      	lsls	r2, r3, #6
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	041b      	lsls	r3, r3, #16
 80085a6:	431a      	orrs	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	061b      	lsls	r3, r3, #24
 80085ac:	431a      	orrs	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	071b      	lsls	r3, r3, #28
 80085b4:	4957      	ldr	r1, [pc, #348]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d004      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085d0:	d00a      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d02e      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085e6:	d129      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80085e8:	4b4a      	ldr	r3, [pc, #296]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	f003 0303 	and.w	r3, r3, #3
 80085f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80085f6:	4b47      	ldr	r3, [pc, #284]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085fc:	0f1b      	lsrs	r3, r3, #28
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	019a      	lsls	r2, r3, #6
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	041b      	lsls	r3, r3, #16
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	061b      	lsls	r3, r3, #24
 8008616:	431a      	orrs	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	071b      	lsls	r3, r3, #28
 800861c:	493d      	ldr	r1, [pc, #244]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800861e:	4313      	orrs	r3, r2
 8008620:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008624:	4b3b      	ldr	r3, [pc, #236]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800862a:	f023 021f 	bic.w	r2, r3, #31
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008632:	3b01      	subs	r3, #1
 8008634:	4937      	ldr	r1, [pc, #220]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008636:	4313      	orrs	r3, r2
 8008638:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01d      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008648:	4b32      	ldr	r3, [pc, #200]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800864a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800864e:	0e1b      	lsrs	r3, r3, #24
 8008650:	f003 030f 	and.w	r3, r3, #15
 8008654:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008656:	4b2f      	ldr	r3, [pc, #188]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800865c:	0f1b      	lsrs	r3, r3, #28
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	019a      	lsls	r2, r3, #6
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	041b      	lsls	r3, r3, #16
 8008670:	431a      	orrs	r2, r3
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	061b      	lsls	r3, r3, #24
 8008676:	431a      	orrs	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	071b      	lsls	r3, r3, #28
 800867c:	4925      	ldr	r1, [pc, #148]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800867e:	4313      	orrs	r3, r2
 8008680:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d011      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	019a      	lsls	r2, r3, #6
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	041b      	lsls	r3, r3, #16
 800869c:	431a      	orrs	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	061b      	lsls	r3, r3, #24
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	071b      	lsls	r3, r3, #28
 80086ac:	4919      	ldr	r1, [pc, #100]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086b4:	4b17      	ldr	r3, [pc, #92]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a16      	ldr	r2, [pc, #88]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c0:	f7fa fb7c 	bl	8002dbc <HAL_GetTick>
 80086c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086c6:	e008      	b.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086c8:	f7fa fb78 	bl	8002dbc <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b64      	cmp	r3, #100	@ 0x64
 80086d4:	d901      	bls.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e0d7      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086da:	4b0e      	ldr	r3, [pc, #56]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f0      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	f040 80cd 	bne.w	8008888 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80086ee:	4b09      	ldr	r3, [pc, #36]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a08      	ldr	r2, [pc, #32]	@ (8008714 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086fa:	f7fa fb5f 	bl	8002dbc <HAL_GetTick>
 80086fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008700:	e00a      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008702:	f7fa fb5b 	bl	8002dbc <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b64      	cmp	r3, #100	@ 0x64
 800870e:	d903      	bls.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e0ba      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008714:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008718:	4b5e      	ldr	r3, [pc, #376]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008724:	d0ed      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008736:	2b00      	cmp	r3, #0
 8008738:	d009      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008742:	2b00      	cmp	r3, #0
 8008744:	d02e      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d12a      	bne.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800874e:	4b51      	ldr	r3, [pc, #324]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008754:	0c1b      	lsrs	r3, r3, #16
 8008756:	f003 0303 	and.w	r3, r3, #3
 800875a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800875c:	4b4d      	ldr	r3, [pc, #308]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008762:	0f1b      	lsrs	r3, r3, #28
 8008764:	f003 0307 	and.w	r3, r3, #7
 8008768:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	019a      	lsls	r2, r3, #6
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	041b      	lsls	r3, r3, #16
 8008774:	431a      	orrs	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	061b      	lsls	r3, r3, #24
 800877c:	431a      	orrs	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	071b      	lsls	r3, r3, #28
 8008782:	4944      	ldr	r1, [pc, #272]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008784:	4313      	orrs	r3, r2
 8008786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800878a:	4b42      	ldr	r3, [pc, #264]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800878c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008790:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008798:	3b01      	subs	r3, #1
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	493d      	ldr	r1, [pc, #244]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d022      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b8:	d11d      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80087ba:	4b36      	ldr	r3, [pc, #216]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c0:	0e1b      	lsrs	r3, r3, #24
 80087c2:	f003 030f 	and.w	r3, r3, #15
 80087c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80087c8:	4b32      	ldr	r3, [pc, #200]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ce:	0f1b      	lsrs	r3, r3, #28
 80087d0:	f003 0307 	and.w	r3, r3, #7
 80087d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	019a      	lsls	r2, r3, #6
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	041b      	lsls	r3, r3, #16
 80087e2:	431a      	orrs	r2, r3
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	061b      	lsls	r3, r3, #24
 80087e8:	431a      	orrs	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	071b      	lsls	r3, r3, #28
 80087ee:	4929      	ldr	r1, [pc, #164]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0308 	and.w	r3, r3, #8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d028      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008802:	4b24      	ldr	r3, [pc, #144]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008808:	0e1b      	lsrs	r3, r3, #24
 800880a:	f003 030f 	and.w	r3, r3, #15
 800880e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008810:	4b20      	ldr	r3, [pc, #128]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008816:	0c1b      	lsrs	r3, r3, #16
 8008818:	f003 0303 	and.w	r3, r3, #3
 800881c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	019a      	lsls	r2, r3, #6
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	041b      	lsls	r3, r3, #16
 8008828:	431a      	orrs	r2, r3
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	061b      	lsls	r3, r3, #24
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	071b      	lsls	r3, r3, #28
 8008836:	4917      	ldr	r1, [pc, #92]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008838:	4313      	orrs	r3, r2
 800883a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800883e:	4b15      	ldr	r3, [pc, #84]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008844:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884c:	4911      	ldr	r1, [pc, #68]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800884e:	4313      	orrs	r3, r2
 8008850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008854:	4b0f      	ldr	r3, [pc, #60]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a0e      	ldr	r2, [pc, #56]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800885a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800885e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008860:	f7fa faac 	bl	8002dbc <HAL_GetTick>
 8008864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008866:	e008      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008868:	f7fa faa8 	bl	8002dbc <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b64      	cmp	r3, #100	@ 0x64
 8008874:	d901      	bls.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e007      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800887a:	4b06      	ldr	r3, [pc, #24]	@ (8008894 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008886:	d1ef      	bne.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3720      	adds	r7, #32
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	40023800 	.word	0x40023800

08008898 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80088b6:	f040 808d 	bne.w	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80088ba:	4b93      	ldr	r3, [pc, #588]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088c0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80088c8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088d0:	d07c      	beq.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088d8:	d87b      	bhi.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d004      	beq.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088e6:	d039      	beq.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80088e8:	e073      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80088ea:	4b87      	ldr	r3, [pc, #540]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d108      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80088f6:	4b84      	ldr	r3, [pc, #528]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088fe:	4a83      	ldr	r2, [pc, #524]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008900:	fbb2 f3f3 	udiv	r3, r2, r3
 8008904:	613b      	str	r3, [r7, #16]
 8008906:	e007      	b.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008908:	4b7f      	ldr	r3, [pc, #508]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008910:	4a7f      	ldr	r2, [pc, #508]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008912:	fbb2 f3f3 	udiv	r3, r2, r3
 8008916:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008918:	4b7b      	ldr	r3, [pc, #492]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800891a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891e:	0e1b      	lsrs	r3, r3, #24
 8008920:	f003 030f 	and.w	r3, r3, #15
 8008924:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008926:	4b78      	ldr	r3, [pc, #480]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800892c:	099b      	lsrs	r3, r3, #6
 800892e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	fb03 f202 	mul.w	r2, r3, r2
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008940:	4b71      	ldr	r3, [pc, #452]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008942:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008946:	0a1b      	lsrs	r3, r3, #8
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	3301      	adds	r3, #1
 800894e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	fbb2 f3f3 	udiv	r3, r2, r3
 8008958:	617b      	str	r3, [r7, #20]
        break;
 800895a:	e03b      	b.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800895c:	4b6a      	ldr	r3, [pc, #424]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d108      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008968:	4b67      	ldr	r3, [pc, #412]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008970:	4a66      	ldr	r2, [pc, #408]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008972:	fbb2 f3f3 	udiv	r3, r2, r3
 8008976:	613b      	str	r3, [r7, #16]
 8008978:	e007      	b.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800897a:	4b63      	ldr	r3, [pc, #396]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008982:	4a63      	ldr	r2, [pc, #396]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008984:	fbb2 f3f3 	udiv	r3, r2, r3
 8008988:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800898a:	4b5f      	ldr	r3, [pc, #380]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800898c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008990:	0e1b      	lsrs	r3, r3, #24
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008998:	4b5b      	ldr	r3, [pc, #364]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800899a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800899e:	099b      	lsrs	r3, r3, #6
 80089a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	fb03 f202 	mul.w	r2, r3, r2
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80089b2:	4b55      	ldr	r3, [pc, #340]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089b8:	f003 031f 	and.w	r3, r3, #31
 80089bc:	3301      	adds	r3, #1
 80089be:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c8:	617b      	str	r3, [r7, #20]
        break;
 80089ca:	e003      	b.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80089cc:	4b51      	ldr	r3, [pc, #324]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80089ce:	617b      	str	r3, [r7, #20]
        break;
 80089d0:	e000      	b.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80089d2:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089da:	f040 808d 	bne.w	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80089de:	4b4a      	ldr	r3, [pc, #296]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089e4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80089ec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089f4:	d07c      	beq.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089fc:	d87b      	bhi.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d004      	beq.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a0a:	d039      	beq.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008a0c:	e073      	b.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d108      	bne.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a22:	4a3a      	ldr	r2, [pc, #232]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a28:	613b      	str	r3, [r7, #16]
 8008a2a:	e007      	b.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008a2c:	4b36      	ldr	r3, [pc, #216]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a34:	4a36      	ldr	r2, [pc, #216]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008a3c:	4b32      	ldr	r3, [pc, #200]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a42:	0e1b      	lsrs	r3, r3, #24
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a50:	099b      	lsrs	r3, r3, #6
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	fb03 f202 	mul.w	r2, r3, r2
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a62:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008a64:	4b28      	ldr	r3, [pc, #160]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	3301      	adds	r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a7c:	617b      	str	r3, [r7, #20]
        break;
 8008a7e:	e03b      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008a80:	4b21      	ldr	r3, [pc, #132]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d108      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a94:	4a1d      	ldr	r2, [pc, #116]	@ (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9a:	613b      	str	r3, [r7, #16]
 8008a9c:	e007      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008aae:	4b16      	ldr	r3, [pc, #88]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ab4:	0e1b      	lsrs	r3, r3, #24
 8008ab6:	f003 030f 	and.w	r3, r3, #15
 8008aba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008abc:	4b12      	ldr	r3, [pc, #72]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ac2:	099b      	lsrs	r3, r3, #6
 8008ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	fb03 f202 	mul.w	r2, r3, r2
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008adc:	f003 031f 	and.w	r3, r3, #31
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aec:	617b      	str	r3, [r7, #20]
        break;
 8008aee:	e003      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008af0:	4b08      	ldr	r3, [pc, #32]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008af2:	617b      	str	r3, [r7, #20]
        break;
 8008af4:	e000      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8008af6:	bf00      	nop
      }
    }
  }

  return frequency;
 8008af8:	697b      	ldr	r3, [r7, #20]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40023800 	.word	0x40023800
 8008b0c:	00f42400 	.word	0x00f42400
 8008b10:	017d7840 	.word	0x017d7840
 8008b14:	00bb8000 	.word	0x00bb8000

08008b18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e071      	b.n	8008c12 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	7f5b      	ldrb	r3, [r3, #29]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d105      	bne.n	8008b44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7f8 ff8c 	bl	8001a5c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	2b10      	cmp	r3, #16
 8008b56:	d053      	beq.n	8008c00 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	22ca      	movs	r2, #202	@ 0xca
 8008b5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2253      	movs	r2, #83	@ 0x53
 8008b66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fac7 	bl	80090fc <RTC_EnterInitMode>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d12a      	bne.n	8008bce <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6899      	ldr	r1, [r3, #8]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b26      	ldr	r3, [pc, #152]	@ (8008c1c <HAL_RTC_Init+0x104>)
 8008b84:	400b      	ands	r3, r1
 8008b86:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6899      	ldr	r1, [r3, #8]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	68d2      	ldr	r2, [r2, #12]
 8008bae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6919      	ldr	r1, [r3, #16]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	041a      	lsls	r2, r3, #16
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fad0 	bl	800916a <RTC_ExitInitMode>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d110      	bne.n	8008bf6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0208 	bic.w	r2, r2, #8
 8008be2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	699a      	ldr	r2, [r3, #24]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	22ff      	movs	r2, #255	@ 0xff
 8008bfc:	625a      	str	r2, [r3, #36]	@ 0x24
 8008bfe:	e001      	b.n	8008c04 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d102      	bne.n	8008c10 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	ff8fffbf 	.word	0xff8fffbf

08008c20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c20:	b590      	push	{r4, r7, lr}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	7f1b      	ldrb	r3, [r3, #28]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d101      	bne.n	8008c3c <HAL_RTC_SetTime+0x1c>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	e085      	b.n	8008d48 <HAL_RTC_SetTime+0x128>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2202      	movs	r2, #2
 8008c46:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d126      	bne.n	8008c9c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d102      	bne.n	8008c62 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 faa4 	bl	80091b4 <RTC_ByteToBcd2>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fa9d 	bl	80091b4 <RTC_ByteToBcd2>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008c7e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	789b      	ldrb	r3, [r3, #2]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 fa95 	bl	80091b4 <RTC_ByteToBcd2>
 8008c8a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c8c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	78db      	ldrb	r3, [r3, #3]
 8008c94:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	e018      	b.n	8008cce <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2200      	movs	r2, #0
 8008cae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	785b      	ldrb	r3, [r3, #1]
 8008cba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008cbc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008cc2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	78db      	ldrb	r3, [r3, #3]
 8008cc8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	22ca      	movs	r2, #202	@ 0xca
 8008cd4:	625a      	str	r2, [r3, #36]	@ 0x24
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2253      	movs	r2, #83	@ 0x53
 8008cdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 fa0c 	bl	80090fc <RTC_EnterInitMode>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008ce8:	7cfb      	ldrb	r3, [r7, #19]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d11e      	bne.n	8008d2c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	6979      	ldr	r1, [r7, #20]
 8008cf4:	4b16      	ldr	r3, [pc, #88]	@ (8008d50 <HAL_RTC_SetTime+0x130>)
 8008cf6:	400b      	ands	r3, r1
 8008cf8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008d08:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6899      	ldr	r1, [r3, #8]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fa21 	bl	800916a <RTC_ExitInitMode>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008d2c:	7cfb      	ldrb	r3, [r7, #19]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d102      	bne.n	8008d38 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2201      	movs	r2, #1
 8008d36:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	22ff      	movs	r2, #255	@ 0xff
 8008d3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	771a      	strb	r2, [r3, #28]

  return status;
 8008d46:	7cfb      	ldrb	r3, [r7, #19]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	371c      	adds	r7, #28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd90      	pop	{r4, r7, pc}
 8008d50:	007f7f7f 	.word	0x007f7f7f

08008d54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d54:	b590      	push	{r4, r7, lr}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	7f1b      	ldrb	r3, [r3, #28]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d101      	bne.n	8008d70 <HAL_RTC_SetDate+0x1c>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e06f      	b.n	8008e50 <HAL_RTC_SetDate+0xfc>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2201      	movs	r2, #1
 8008d74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2202      	movs	r2, #2
 8008d7a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10e      	bne.n	8008da0 <HAL_RTC_SetDate+0x4c>
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	f003 0310 	and.w	r3, r3, #16
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d008      	beq.n	8008da0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	785b      	ldrb	r3, [r3, #1]
 8008d92:	f023 0310 	bic.w	r3, r3, #16
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	330a      	adds	r3, #10
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d11c      	bne.n	8008de0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	78db      	ldrb	r3, [r3, #3]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fa02 	bl	80091b4 <RTC_ByteToBcd2>
 8008db0:	4603      	mov	r3, r0
 8008db2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 f9fb 	bl	80091b4 <RTC_ByteToBcd2>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008dc2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	789b      	ldrb	r3, [r3, #2]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 f9f3 	bl	80091b4 <RTC_ByteToBcd2>
 8008dce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008dd0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	e00e      	b.n	8008dfe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	78db      	ldrb	r3, [r3, #3]
 8008de4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	785b      	ldrb	r3, [r3, #1]
 8008dea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008dec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008df2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	22ca      	movs	r2, #202	@ 0xca
 8008e04:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2253      	movs	r2, #83	@ 0x53
 8008e0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 f974 	bl	80090fc <RTC_EnterInitMode>
 8008e14:	4603      	mov	r3, r0
 8008e16:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008e18:	7cfb      	ldrb	r3, [r7, #19]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10a      	bne.n	8008e34 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	6979      	ldr	r1, [r7, #20]
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <HAL_RTC_SetDate+0x104>)
 8008e26:	400b      	ands	r3, r1
 8008e28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 f99d 	bl	800916a <RTC_ExitInitMode>
 8008e30:	4603      	mov	r3, r0
 8008e32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008e34:	7cfb      	ldrb	r3, [r7, #19]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	22ff      	movs	r2, #255	@ 0xff
 8008e46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	771a      	strb	r2, [r3, #28]

  return status;
 8008e4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	371c      	adds	r7, #28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd90      	pop	{r4, r7, pc}
 8008e58:	00ffff3f 	.word	0x00ffff3f

08008e5c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008e5c:	b590      	push	{r4, r7, lr}
 8008e5e:	b089      	sub	sp, #36	@ 0x24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	7f1b      	ldrb	r3, [r3, #28]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d101      	bne.n	8008e80 <HAL_RTC_SetAlarm+0x24>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	e113      	b.n	80090a8 <HAL_RTC_SetAlarm+0x24c>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d137      	bne.n	8008f02 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d102      	bne.n	8008ea6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f982 	bl	80091b4 <RTC_ByteToBcd2>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	785b      	ldrb	r3, [r3, #1]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 f97b 	bl	80091b4 <RTC_ByteToBcd2>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008ec2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	789b      	ldrb	r3, [r3, #2]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 f973 	bl	80091b4 <RTC_ByteToBcd2>
 8008ece:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ed0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	78db      	ldrb	r3, [r3, #3]
 8008ed8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008eda:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f965 	bl	80091b4 <RTC_ByteToBcd2>
 8008eea:	4603      	mov	r3, r0
 8008eec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008eee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008ef6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008efc:	4313      	orrs	r3, r2
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	e023      	b.n	8008f4a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2200      	movs	r2, #0
 8008f14:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	785b      	ldrb	r3, [r3, #1]
 8008f20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008f22:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008f28:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	78db      	ldrb	r3, [r3, #3]
 8008f2e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008f30:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f38:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008f3a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008f40:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008f46:	4313      	orrs	r3, r2
 8008f48:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008f52:	4313      	orrs	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	22ca      	movs	r2, #202	@ 0xca
 8008f5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2253      	movs	r2, #83	@ 0x53
 8008f64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f6e:	d148      	bne.n	8009002 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689a      	ldr	r2, [r3, #8]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f7e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f8e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008fa0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fa2:	f7f9 ff0b 	bl	8002dbc <HAL_GetTick>
 8008fa6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008fa8:	e013      	b.n	8008fd2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008faa:	f7f9 ff07 	bl	8002dbc <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fb8:	d90b      	bls.n	8008fd2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	22ff      	movs	r2, #255	@ 0xff
 8008fc0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2203      	movs	r2, #3
 8008fc6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e06a      	b.n	80090a8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0e4      	beq.n	8008faa <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689a      	ldr	r2, [r3, #8]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ffe:	609a      	str	r2, [r3, #8]
 8009000:	e047      	b.n	8009092 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009010:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009020:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	b2da      	uxtb	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009032:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009034:	f7f9 fec2 	bl	8002dbc <HAL_GetTick>
 8009038:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800903a:	e013      	b.n	8009064 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800903c:	f7f9 febe 	bl	8002dbc <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800904a:	d90b      	bls.n	8009064 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	22ff      	movs	r2, #255	@ 0xff
 8009052:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2203      	movs	r2, #3
 8009058:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e021      	b.n	80090a8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0e4      	beq.n	800903c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009090:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	22ff      	movs	r2, #255	@ 0xff
 8009098:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3724      	adds	r7, #36	@ 0x24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd90      	pop	{r4, r7, pc}

080090b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a0d      	ldr	r2, [pc, #52]	@ (80090f8 <HAL_RTC_WaitForSynchro+0x48>)
 80090c2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80090c4:	f7f9 fe7a 	bl	8002dbc <HAL_GetTick>
 80090c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80090ca:	e009      	b.n	80090e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090cc:	f7f9 fe76 	bl	8002dbc <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090da:	d901      	bls.n	80090e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e007      	b.n	80090f0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f003 0320 	and.w	r3, r3, #32
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0ee      	beq.n	80090cc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	0001ff5f 	.word	0x0001ff5f

080090fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	d122      	bne.n	8009160 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68da      	ldr	r2, [r3, #12]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009128:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800912a:	f7f9 fe47 	bl	8002dbc <HAL_GetTick>
 800912e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009130:	e00c      	b.n	800914c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009132:	f7f9 fe43 	bl	8002dbc <HAL_GetTick>
 8009136:	4602      	mov	r2, r0
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009140:	d904      	bls.n	800914c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2204      	movs	r2, #4
 8009146:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	d102      	bne.n	8009160 <RTC_EnterInitMode+0x64>
 800915a:	7bfb      	ldrb	r3, [r7, #15]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d1e8      	bne.n	8009132 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009184:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f003 0320 	and.w	r3, r3, #32
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10a      	bne.n	80091aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff ff8b 	bl	80090b0 <HAL_RTC_WaitForSynchro>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2204      	movs	r2, #4
 80091a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4603      	mov	r3, r0
 80091bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80091c2:	e005      	b.n	80091d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3301      	adds	r3, #1
 80091c8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80091ca:	79fb      	ldrb	r3, [r7, #7]
 80091cc:	3b0a      	subs	r3, #10
 80091ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	2b09      	cmp	r3, #9
 80091d4:	d8f6      	bhi.n	80091c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	011b      	lsls	r3, r3, #4
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	b2db      	uxtb	r3, r3
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	7f1b      	ldrb	r3, [r3, #28]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d101      	bne.n	800920c <HAL_RTCEx_SetTimeStamp+0x1c>
 8009208:	2302      	movs	r3, #2
 800920a:	e050      	b.n	80092ae <HAL_RTCEx_SetTimeStamp+0xbe>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2202      	movs	r2, #2
 8009216:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0206 	bic.w	r2, r2, #6
 8009226:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	430a      	orrs	r2, r1
 8009236:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	4b1f      	ldr	r3, [pc, #124]	@ (80092bc <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009240:	4013      	ands	r3, r2
 8009242:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	4313      	orrs	r3, r2
 800924a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	22ca      	movs	r2, #202	@ 0xca
 8009252:	625a      	str	r2, [r3, #36]	@ 0x24
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2253      	movs	r2, #83	@ 0x53
 800925a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	b2da      	uxtb	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009274:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	b2da      	uxtb	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8009286:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009296:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	22ff      	movs	r2, #255	@ 0xff
 800929e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2201      	movs	r2, #1
 80092a4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	371c      	adds	r7, #28
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	fffff7f7 	.word	0xfffff7f7

080092c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b088      	sub	sp, #32
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e156      	b.n	800958c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d106      	bne.n	80092f8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7f8 fc88 	bl	8001c08 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f95b 	bl	80095bc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	2b02      	cmp	r3, #2
 800930c:	d00c      	beq.n	8009328 <HAL_SAI_Init+0x68>
 800930e:	2b02      	cmp	r3, #2
 8009310:	d80d      	bhi.n	800932e <HAL_SAI_Init+0x6e>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <HAL_SAI_Init+0x5c>
 8009316:	2b01      	cmp	r3, #1
 8009318:	d003      	beq.n	8009322 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800931a:	e008      	b.n	800932e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800931c:	2300      	movs	r3, #0
 800931e:	61fb      	str	r3, [r7, #28]
      break;
 8009320:	e006      	b.n	8009330 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009322:	2310      	movs	r3, #16
 8009324:	61fb      	str	r3, [r7, #28]
      break;
 8009326:	e003      	b.n	8009330 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009328:	2320      	movs	r3, #32
 800932a:	61fb      	str	r3, [r7, #28]
      break;
 800932c:	e000      	b.n	8009330 <HAL_SAI_Init+0x70>
      break;
 800932e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	2b03      	cmp	r3, #3
 8009336:	d81e      	bhi.n	8009376 <HAL_SAI_Init+0xb6>
 8009338:	a201      	add	r2, pc, #4	@ (adr r2, 8009340 <HAL_SAI_Init+0x80>)
 800933a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933e:	bf00      	nop
 8009340:	08009351 	.word	0x08009351
 8009344:	08009357 	.word	0x08009357
 8009348:	0800935f 	.word	0x0800935f
 800934c:	08009367 	.word	0x08009367
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	617b      	str	r3, [r7, #20]
    }
    break;
 8009354:	e010      	b.n	8009378 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800935a:	617b      	str	r3, [r7, #20]
    }
    break;
 800935c:	e00c      	b.n	8009378 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800935e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009362:	617b      	str	r3, [r7, #20]
    }
    break;
 8009364:	e008      	b.n	8009378 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009366:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800936a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	f043 0301 	orr.w	r3, r3, #1
 8009372:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009374:	e000      	b.n	8009378 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009376:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a85      	ldr	r2, [pc, #532]	@ (8009594 <HAL_SAI_Init+0x2d4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d004      	beq.n	800938c <HAL_SAI_Init+0xcc>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a84      	ldr	r2, [pc, #528]	@ (8009598 <HAL_SAI_Init+0x2d8>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d103      	bne.n	8009394 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800938c:	4a83      	ldr	r2, [pc, #524]	@ (800959c <HAL_SAI_Init+0x2dc>)
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	e002      	b.n	800939a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009394:	4a82      	ldr	r2, [pc, #520]	@ (80095a0 <HAL_SAI_Init+0x2e0>)
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d04c      	beq.n	800943c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80093a2:	2300      	movs	r3, #0
 80093a4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a7a      	ldr	r2, [pc, #488]	@ (8009594 <HAL_SAI_Init+0x2d4>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d004      	beq.n	80093ba <HAL_SAI_Init+0xfa>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a78      	ldr	r2, [pc, #480]	@ (8009598 <HAL_SAI_Init+0x2d8>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d104      	bne.n	80093c4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80093ba:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80093be:	f7ff fa6b 	bl	8008898 <HAL_RCCEx_GetPeriphCLKFreq>
 80093c2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a76      	ldr	r2, [pc, #472]	@ (80095a4 <HAL_SAI_Init+0x2e4>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d004      	beq.n	80093d8 <HAL_SAI_Init+0x118>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a75      	ldr	r2, [pc, #468]	@ (80095a8 <HAL_SAI_Init+0x2e8>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d104      	bne.n	80093e2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80093d8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80093dc:	f7ff fa5c 	bl	8008898 <HAL_RCCEx_GetPeriphCLKFreq>
 80093e0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	4613      	mov	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	461a      	mov	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	025b      	lsls	r3, r3, #9
 80093f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4a6b      	ldr	r2, [pc, #428]	@ (80095ac <HAL_SAI_Init+0x2ec>)
 80093fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009402:	08da      	lsrs	r2, r3, #3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009408:	68f9      	ldr	r1, [r7, #12]
 800940a:	4b68      	ldr	r3, [pc, #416]	@ (80095ac <HAL_SAI_Init+0x2ec>)
 800940c:	fba3 2301 	umull	r2, r3, r3, r1
 8009410:	08da      	lsrs	r2, r3, #3
 8009412:	4613      	mov	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	1aca      	subs	r2, r1, r3
 800941c:	2a08      	cmp	r2, #8
 800941e:	d904      	bls.n	800942a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800942e:	2b04      	cmp	r3, #4
 8009430:	d104      	bne.n	800943c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	085a      	lsrs	r2, r3, #1
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d003      	beq.n	800944c <HAL_SAI_Init+0x18c>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	2b02      	cmp	r3, #2
 800944a:	d109      	bne.n	8009460 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009450:	2b01      	cmp	r3, #1
 8009452:	d101      	bne.n	8009458 <HAL_SAI_Init+0x198>
 8009454:	2300      	movs	r3, #0
 8009456:	e001      	b.n	800945c <HAL_SAI_Init+0x19c>
 8009458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800945c:	61bb      	str	r3, [r7, #24]
 800945e:	e008      	b.n	8009472 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009464:	2b01      	cmp	r3, #1
 8009466:	d102      	bne.n	800946e <HAL_SAI_Init+0x1ae>
 8009468:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800946c:	e000      	b.n	8009470 <HAL_SAI_Init+0x1b0>
 800946e:	2300      	movs	r3, #0
 8009470:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6819      	ldr	r1, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	4b4c      	ldr	r3, [pc, #304]	@ (80095b0 <HAL_SAI_Init+0x2f0>)
 800947e:	400b      	ands	r3, r1
 8009480:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6819      	ldr	r1, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009490:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009496:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949c:	431a      	orrs	r2, r3
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80094aa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80094b6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a1b      	ldr	r3, [r3, #32]
 80094bc:	051b      	lsls	r3, r3, #20
 80094be:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6859      	ldr	r1, [r3, #4]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	4b38      	ldr	r3, [pc, #224]	@ (80095b4 <HAL_SAI_Init+0x2f4>)
 80094d4:	400b      	ands	r3, r1
 80094d6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6859      	ldr	r1, [r3, #4]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699a      	ldr	r2, [r3, #24]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	431a      	orrs	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6899      	ldr	r1, [r3, #8]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	4b2d      	ldr	r3, [pc, #180]	@ (80095b8 <HAL_SAI_Init+0x2f8>)
 8009502:	400b      	ands	r3, r1
 8009504:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6899      	ldr	r1, [r3, #8]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009510:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009516:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800951c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8009522:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009528:	3b01      	subs	r3, #1
 800952a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800952c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68d9      	ldr	r1, [r3, #12]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009544:	400b      	ands	r3, r1
 8009546:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68d9      	ldr	r1, [r3, #12]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009556:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800955c:	041b      	lsls	r3, r3, #16
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009564:	3b01      	subs	r3, #1
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3720      	adds	r7, #32
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	40015804 	.word	0x40015804
 8009598:	40015824 	.word	0x40015824
 800959c:	40015800 	.word	0x40015800
 80095a0:	40015c00 	.word	0x40015c00
 80095a4:	40015c04 	.word	0x40015c04
 80095a8:	40015c24 	.word	0x40015c24
 80095ac:	cccccccd 	.word	0xcccccccd
 80095b0:	ff05c010 	.word	0xff05c010
 80095b4:	ffff1ff0 	.word	0xffff1ff0
 80095b8:	fff88000 	.word	0xfff88000

080095bc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80095c4:	4b17      	ldr	r3, [pc, #92]	@ (8009624 <SAI_Disable+0x68>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a17      	ldr	r2, [pc, #92]	@ (8009628 <SAI_Disable+0x6c>)
 80095ca:	fba2 2303 	umull	r2, r3, r2, r3
 80095ce:	0b1b      	lsrs	r3, r3, #12
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80095e6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	1e5a      	subs	r2, r3, #1
 80095ec:	60fa      	str	r2, [r7, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10a      	bne.n	8009608 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	72fb      	strb	r3, [r7, #11]
      break;
 8009606:	e006      	b.n	8009616 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1e8      	bne.n	80095e8 <SAI_Disable+0x2c>

  return status;
 8009616:	7afb      	ldrb	r3, [r7, #11]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	20000000 	.word	0x20000000
 8009628:	95cbec1b 	.word	0x95cbec1b

0800962c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e022      	b.n	8009684 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d105      	bne.n	8009656 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7f8 fb65 	bl	8001d20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2203      	movs	r2, #3
 800965a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f814 	bl	800968c <HAL_SD_InitCard>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e00a      	b.n	8009684 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800968c:	b5b0      	push	{r4, r5, r7, lr}
 800968e:	b08e      	sub	sp, #56	@ 0x38
 8009690:	af04      	add	r7, sp, #16
 8009692:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009694:	2300      	movs	r3, #0
 8009696:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009698:	2300      	movs	r3, #0
 800969a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800969c:	2300      	movs	r3, #0
 800969e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80096a0:	2300      	movs	r3, #0
 80096a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80096a4:	2300      	movs	r3, #0
 80096a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80096a8:	2376      	movs	r3, #118	@ 0x76
 80096aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681d      	ldr	r5, [r3, #0]
 80096b0:	466c      	mov	r4, sp
 80096b2:	f107 0314 	add.w	r3, r7, #20
 80096b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096be:	f107 0308 	add.w	r3, r7, #8
 80096c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096c4:	4628      	mov	r0, r5
 80096c6:	f003 f8c3 	bl	800c850 <SDMMC_Init>
 80096ca:	4603      	mov	r3, r0
 80096cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80096d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e059      	b.n	8009790 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096ea:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f003 f8f7 	bl	800c8e4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009704:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009706:	2002      	movs	r0, #2
 8009708:	f7f9 fb64 	bl	8002dd4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 ff01 	bl	800a514 <SD_PowerON>
 8009712:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00b      	beq.n	8009732 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e02e      	b.n	8009790 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fe20 	bl	800a378 <SD_InitCard>
 8009738:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00b      	beq.n	8009758 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	431a      	orrs	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e01b      	b.n	8009790 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009760:	4618      	mov	r0, r3
 8009762:	f003 f951 	bl	800ca08 <SDMMC_CmdBlockLength>
 8009766:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00f      	beq.n	800978e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a09      	ldr	r2, [pc, #36]	@ (8009798 <HAL_SD_InitCard+0x10c>)
 8009774:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	431a      	orrs	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e000      	b.n	8009790 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3728      	adds	r7, #40	@ 0x28
 8009794:	46bd      	mov	sp, r7
 8009796:	bdb0      	pop	{r4, r5, r7, pc}
 8009798:	004005ff 	.word	0x004005ff

0800979c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b092      	sub	sp, #72	@ 0x48
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80097aa:	f7f9 fb07 	bl	8002dbc <HAL_GetTick>
 80097ae:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d107      	bne.n	80097ce <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e1bd      	b.n	8009b4a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	f040 81b0 	bne.w	8009b3c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	441a      	add	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d907      	bls.n	8009800 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e1a4      	b.n	8009b4a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2203      	movs	r2, #3
 8009804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2200      	movs	r2, #0
 800980e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009814:	2b01      	cmp	r3, #1
 8009816:	d002      	beq.n	800981e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981a:	025b      	lsls	r3, r3, #9
 800981c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800981e:	f04f 33ff 	mov.w	r3, #4294967295
 8009822:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	025b      	lsls	r3, r3, #9
 8009828:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800982a:	2390      	movs	r3, #144	@ 0x90
 800982c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800982e:	2302      	movs	r3, #2
 8009830:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009832:	2300      	movs	r3, #0
 8009834:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009836:	2301      	movs	r3, #1
 8009838:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f107 0214 	add.w	r2, r7, #20
 8009842:	4611      	mov	r1, r2
 8009844:	4618      	mov	r0, r3
 8009846:	f003 f8b3 	bl	800c9b0 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d90a      	bls.n	8009866 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2202      	movs	r2, #2
 8009854:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800985c:	4618      	mov	r0, r3
 800985e:	f003 f917 	bl	800ca90 <SDMMC_CmdReadMultiBlock>
 8009862:	6478      	str	r0, [r7, #68]	@ 0x44
 8009864:	e009      	b.n	800987a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2201      	movs	r2, #1
 800986a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009872:	4618      	mov	r0, r3
 8009874:	f003 f8ea 	bl	800ca4c <SDMMC_CmdReadSingleBlock>
 8009878:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800987a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800987c:	2b00      	cmp	r3, #0
 800987e:	d012      	beq.n	80098a6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a7a      	ldr	r2, [pc, #488]	@ (8009a70 <HAL_SD_ReadBlocks+0x2d4>)
 8009886:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800988c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800988e:	431a      	orrs	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e151      	b.n	8009b4a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80098aa:	e061      	b.n	8009970 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d03c      	beq.n	8009934 <HAL_SD_ReadBlocks+0x198>
 80098ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d039      	beq.n	8009934 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80098c0:	2300      	movs	r3, #0
 80098c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80098c4:	e033      	b.n	800992e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f002 ffec 	bl	800c8a8 <SDMMC_ReadFIFO>
 80098d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80098d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80098da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098dc:	3301      	adds	r3, #1
 80098de:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80098e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e2:	3b01      	subs	r3, #1
 80098e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80098e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e8:	0a1b      	lsrs	r3, r3, #8
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80098f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f2:	3301      	adds	r3, #1
 80098f4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80098f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f8:	3b01      	subs	r3, #1
 80098fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80098fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fe:	0c1b      	lsrs	r3, r3, #16
 8009900:	b2da      	uxtb	r2, r3
 8009902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009904:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009908:	3301      	adds	r3, #1
 800990a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800990c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800990e:	3b01      	subs	r3, #1
 8009910:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009914:	0e1b      	lsrs	r3, r3, #24
 8009916:	b2da      	uxtb	r2, r3
 8009918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800991a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800991c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800991e:	3301      	adds	r3, #1
 8009920:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009924:	3b01      	subs	r3, #1
 8009926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8009928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800992a:	3301      	adds	r3, #1
 800992c:	643b      	str	r3, [r7, #64]	@ 0x40
 800992e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009930:	2b07      	cmp	r3, #7
 8009932:	d9c8      	bls.n	80098c6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009934:	f7f9 fa42 	bl	8002dbc <HAL_GetTick>
 8009938:	4602      	mov	r2, r0
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009940:	429a      	cmp	r2, r3
 8009942:	d902      	bls.n	800994a <HAL_SD_ReadBlocks+0x1ae>
 8009944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009946:	2b00      	cmp	r3, #0
 8009948:	d112      	bne.n	8009970 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a48      	ldr	r2, [pc, #288]	@ (8009a70 <HAL_SD_ReadBlocks+0x2d4>)
 8009950:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009956:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e0ec      	b.n	8009b4a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009976:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800997a:	2b00      	cmp	r3, #0
 800997c:	d096      	beq.n	80098ac <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009988:	2b00      	cmp	r3, #0
 800998a:	d022      	beq.n	80099d2 <HAL_SD_ReadBlocks+0x236>
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d91f      	bls.n	80099d2 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009996:	2b03      	cmp	r3, #3
 8009998:	d01b      	beq.n	80099d2 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4618      	mov	r0, r3
 80099a0:	f003 f8dc 	bl	800cb5c <SDMMC_CmdStopTransfer>
 80099a4:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80099a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d012      	beq.n	80099d2 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a2f      	ldr	r2, [pc, #188]	@ (8009a70 <HAL_SD_ReadBlocks+0x2d4>)
 80099b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ba:	431a      	orrs	r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e0bb      	b.n	8009b4a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d8:	f003 0308 	and.w	r3, r3, #8
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d012      	beq.n	8009a06 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a22      	ldr	r2, [pc, #136]	@ (8009a70 <HAL_SD_ReadBlocks+0x2d4>)
 80099e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ec:	f043 0208 	orr.w	r2, r3, #8
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e0a1      	b.n	8009b4a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a0c:	f003 0302 	and.w	r3, r3, #2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d012      	beq.n	8009a3a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a15      	ldr	r2, [pc, #84]	@ (8009a70 <HAL_SD_ReadBlocks+0x2d4>)
 8009a1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a20:	f043 0202 	orr.w	r2, r3, #2
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e087      	b.n	8009b4a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d064      	beq.n	8009b12 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a08      	ldr	r2, [pc, #32]	@ (8009a70 <HAL_SD_ReadBlocks+0x2d4>)
 8009a4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a54:	f043 0220 	orr.w	r2, r3, #32
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e06d      	b.n	8009b4a <HAL_SD_ReadBlocks+0x3ae>
 8009a6e:	bf00      	nop
 8009a70:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f002 ff15 	bl	800c8a8 <SDMMC_ReadFIFO>
 8009a7e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a86:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a90:	3b01      	subs	r3, #1
 8009a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a96:	0a1b      	lsrs	r3, r3, #8
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a9c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aac:	0c1b      	lsrs	r3, r3, #16
 8009aae:	b2da      	uxtb	r2, r3
 8009ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009abc:	3b01      	subs	r3, #1
 8009abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac2:	0e1b      	lsrs	r3, r3, #24
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009acc:	3301      	adds	r3, #1
 8009ace:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009ad6:	f7f9 f971 	bl	8002dbc <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d902      	bls.n	8009aec <HAL_SD_ReadBlocks+0x350>
 8009ae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d112      	bne.n	8009b12 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a18      	ldr	r2, [pc, #96]	@ (8009b54 <HAL_SD_ReadBlocks+0x3b8>)
 8009af2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e01b      	b.n	8009b4a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <HAL_SD_ReadBlocks+0x38a>
 8009b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1a6      	bne.n	8009a74 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009b2e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	e006      	b.n	8009b4a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b40:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
  }
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3748      	adds	r7, #72	@ 0x48
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	004005ff 	.word	0x004005ff

08009b58 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b092      	sub	sp, #72	@ 0x48
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009b66:	f7f9 f929 	bl	8002dbc <HAL_GetTick>
 8009b6a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d107      	bne.n	8009b8a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e165      	b.n	8009e56 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	f040 8158 	bne.w	8009e48 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	441a      	add	r2, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d907      	bls.n	8009bbc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e14c      	b.n	8009e56 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2203      	movs	r2, #3
 8009bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d002      	beq.n	8009bda <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd6:	025b      	lsls	r3, r3, #9
 8009bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bda:	f04f 33ff 	mov.w	r3, #4294967295
 8009bde:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	025b      	lsls	r3, r3, #9
 8009be4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009be6:	2390      	movs	r3, #144	@ 0x90
 8009be8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009bea:	2300      	movs	r3, #0
 8009bec:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f107 0218 	add.w	r2, r7, #24
 8009bfe:	4611      	mov	r1, r2
 8009c00:	4618      	mov	r0, r3
 8009c02:	f002 fed5 	bl	800c9b0 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d90a      	bls.n	8009c22 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2220      	movs	r2, #32
 8009c10:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f002 ff7d 	bl	800cb18 <SDMMC_CmdWriteMultiBlock>
 8009c1e:	6478      	str	r0, [r7, #68]	@ 0x44
 8009c20:	e009      	b.n	8009c36 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2210      	movs	r2, #16
 8009c26:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f002 ff50 	bl	800cad4 <SDMMC_CmdWriteSingleBlock>
 8009c34:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d012      	beq.n	8009c62 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a87      	ldr	r2, [pc, #540]	@ (8009e60 <HAL_SD_WriteBlocks+0x308>)
 8009c42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e0f9      	b.n	8009e56 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009c66:	e065      	b.n	8009d34 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d040      	beq.n	8009cf8 <HAL_SD_WriteBlocks+0x1a0>
 8009c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d03d      	beq.n	8009cf8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c80:	e037      	b.n	8009cf2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c90:	3b01      	subs	r3, #1
 8009c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	021a      	lsls	r2, r3, #8
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	041a      	lsls	r2, r3, #16
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cba:	3301      	adds	r3, #1
 8009cbc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	061a      	lsls	r2, r3, #24
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f107 0214 	add.w	r2, r7, #20
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f002 fdeb 	bl	800c8c2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cee:	3301      	adds	r3, #1
 8009cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cf4:	2b07      	cmp	r3, #7
 8009cf6:	d9c4      	bls.n	8009c82 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009cf8:	f7f9 f860 	bl	8002dbc <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d902      	bls.n	8009d0e <HAL_SD_WriteBlocks+0x1b6>
 8009d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d112      	bne.n	8009d34 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a53      	ldr	r2, [pc, #332]	@ (8009e60 <HAL_SD_WriteBlocks+0x308>)
 8009d14:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d1c:	431a      	orrs	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e090      	b.n	8009e56 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d3a:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d092      	beq.n	8009c68 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d022      	beq.n	8009d96 <HAL_SD_WriteBlocks+0x23e>
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d91f      	bls.n	8009d96 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d01b      	beq.n	8009d96 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f002 fefa 	bl	800cb5c <SDMMC_CmdStopTransfer>
 8009d68:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d012      	beq.n	8009d96 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a3a      	ldr	r2, [pc, #232]	@ (8009e60 <HAL_SD_WriteBlocks+0x308>)
 8009d76:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d7e:	431a      	orrs	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e05f      	b.n	8009e56 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d9c:	f003 0308 	and.w	r3, r3, #8
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d012      	beq.n	8009dca <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a2d      	ldr	r2, [pc, #180]	@ (8009e60 <HAL_SD_WriteBlocks+0x308>)
 8009daa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db0:	f043 0208 	orr.w	r2, r3, #8
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e045      	b.n	8009e56 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd0:	f003 0302 	and.w	r3, r3, #2
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d012      	beq.n	8009dfe <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a20      	ldr	r2, [pc, #128]	@ (8009e60 <HAL_SD_WriteBlocks+0x308>)
 8009dde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de4:	f043 0202 	orr.w	r2, r3, #2
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e02b      	b.n	8009e56 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e04:	f003 0310 	and.w	r3, r3, #16
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d012      	beq.n	8009e32 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a13      	ldr	r2, [pc, #76]	@ (8009e60 <HAL_SD_WriteBlocks+0x308>)
 8009e12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e18:	f043 0210 	orr.w	r2, r3, #16
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e011      	b.n	8009e56 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009e3a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	e006      	b.n	8009e56 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
  }
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3748      	adds	r7, #72	@ 0x48
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	004005ff 	.word	0x004005ff

08009e64 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e72:	0f9b      	lsrs	r3, r3, #30
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e7e:	0e9b      	lsrs	r3, r3, #26
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	f003 030f 	and.w	r3, r3, #15
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e90:	0e1b      	lsrs	r3, r3, #24
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 0303 	and.w	r3, r3, #3
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ea2:	0c1b      	lsrs	r3, r3, #16
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009eae:	0a1b      	lsrs	r3, r3, #8
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ec4:	0d1b      	lsrs	r3, r3, #20
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ed0:	0c1b      	lsrs	r3, r3, #16
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 030f 	and.w	r3, r3, #15
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ee2:	0bdb      	lsrs	r3, r3, #15
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ef4:	0b9b      	lsrs	r3, r3, #14
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	f003 0301 	and.w	r3, r3, #1
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f06:	0b5b      	lsrs	r3, r3, #13
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f18:	0b1b      	lsrs	r3, r3, #12
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d163      	bne.n	8009ffc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f38:	009a      	lsls	r2, r3, #2
 8009f3a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009f3e:	4013      	ands	r3, r2
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009f44:	0f92      	lsrs	r2, r2, #30
 8009f46:	431a      	orrs	r2, r3
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f50:	0edb      	lsrs	r3, r3, #27
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	f003 0307 	and.w	r3, r3, #7
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f62:	0e1b      	lsrs	r3, r3, #24
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f74:	0d5b      	lsrs	r3, r3, #21
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	f003 0307 	and.w	r3, r3, #7
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f86:	0c9b      	lsrs	r3, r3, #18
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	f003 0307 	and.w	r3, r3, #7
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f98:	0bdb      	lsrs	r3, r3, #15
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	f003 0307 	and.w	r3, r3, #7
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	7e1b      	ldrb	r3, [r3, #24]
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	3302      	adds	r3, #2
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009fc6:	fb03 f202 	mul.w	r2, r3, r2
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	7a1b      	ldrb	r3, [r3, #8]
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	f003 030f 	and.w	r3, r3, #15
 8009fd8:	2201      	movs	r2, #1
 8009fda:	409a      	lsls	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009fe8:	0a52      	lsrs	r2, r2, #9
 8009fea:	fb03 f202 	mul.w	r2, r3, r2
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ff8:	661a      	str	r2, [r3, #96]	@ 0x60
 8009ffa:	e031      	b.n	800a060 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a000:	2b01      	cmp	r3, #1
 800a002:	d11d      	bne.n	800a040 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a008:	041b      	lsls	r3, r3, #16
 800a00a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a012:	0c1b      	lsrs	r3, r3, #16
 800a014:	431a      	orrs	r2, r3
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	3301      	adds	r3, #1
 800a020:	029a      	lsls	r2, r3, #10
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a034:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a03e:	e00f      	b.n	800a060 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a58      	ldr	r2, [pc, #352]	@ (800a1a8 <HAL_SD_GetCardCSD+0x344>)
 800a046:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e09d      	b.n	800a19c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a064:	0b9b      	lsrs	r3, r3, #14
 800a066:	b2db      	uxtb	r3, r3
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a076:	09db      	lsrs	r3, r3, #7
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a098:	0fdb      	lsrs	r3, r3, #31
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0a4:	0f5b      	lsrs	r3, r3, #29
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	f003 0303 	and.w	r3, r3, #3
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0b6:	0e9b      	lsrs	r3, r3, #26
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0c8:	0d9b      	lsrs	r3, r3, #22
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	f003 030f 	and.w	r3, r3, #15
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0da:	0d5b      	lsrs	r3, r3, #21
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0f6:	0c1b      	lsrs	r3, r3, #16
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a10a:	0bdb      	lsrs	r3, r3, #15
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	f003 0301 	and.w	r3, r3, #1
 800a112:	b2da      	uxtb	r2, r3
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a11e:	0b9b      	lsrs	r3, r3, #14
 800a120:	b2db      	uxtb	r3, r3
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	b2da      	uxtb	r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a132:	0b5b      	lsrs	r3, r3, #13
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a146:	0b1b      	lsrs	r3, r3, #12
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a15a:	0a9b      	lsrs	r3, r3, #10
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f003 0303 	and.w	r3, r3, #3
 800a162:	b2da      	uxtb	r2, r3
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a16e:	0a1b      	lsrs	r3, r3, #8
 800a170:	b2db      	uxtb	r3, r3
 800a172:	f003 0303 	and.w	r3, r3, #3
 800a176:	b2da      	uxtb	r2, r3
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a182:	085b      	lsrs	r3, r3, #1
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	004005ff 	.word	0x004005ff

0800a1ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a204:	b5b0      	push	{r4, r5, r7, lr}
 800a206:	b08e      	sub	sp, #56	@ 0x38
 800a208:	af04      	add	r7, sp, #16
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2203      	movs	r2, #3
 800a218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a220:	2b03      	cmp	r3, #3
 800a222:	d02e      	beq.n	800a282 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a22a:	d106      	bne.n	800a23a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a230:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	639a      	str	r2, [r3, #56]	@ 0x38
 800a238:	e029      	b.n	800a28e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a240:	d10a      	bne.n	800a258 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fa1c 	bl	800a680 <SD_WideBus_Enable>
 800a248:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	431a      	orrs	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	639a      	str	r2, [r3, #56]	@ 0x38
 800a256:	e01a      	b.n	800a28e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fa59 	bl	800a716 <SD_WideBus_Disable>
 800a264:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	431a      	orrs	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	639a      	str	r2, [r3, #56]	@ 0x38
 800a272:	e00c      	b.n	800a28e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a278:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a280:	e005      	b.n	800a28e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a286:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00b      	beq.n	800a2ae <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a26      	ldr	r2, [pc, #152]	@ (800a334 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a29c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a2ac:	e01f      	b.n	800a2ee <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681d      	ldr	r5, [r3, #0]
 800a2d4:	466c      	mov	r4, sp
 800a2d6:	f107 0314 	add.w	r3, r7, #20
 800a2da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a2de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a2e2:	f107 0308 	add.w	r3, r7, #8
 800a2e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f002 fab1 	bl	800c850 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f002 fb86 	bl	800ca08 <SDMMC_CmdBlockLength>
 800a2fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00c      	beq.n	800a31e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a0a      	ldr	r2, [pc, #40]	@ (800a334 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a30a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800a326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3728      	adds	r7, #40	@ 0x28
 800a32e:	46bd      	mov	sp, r7
 800a330:	bdb0      	pop	{r4, r5, r7, pc}
 800a332:	bf00      	nop
 800a334:	004005ff 	.word	0x004005ff

0800a338 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a344:	f107 030c 	add.w	r3, r7, #12
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f970 	bl	800a630 <SD_SendStatus>
 800a350:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d005      	beq.n	800a364 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	0a5b      	lsrs	r3, r3, #9
 800a368:	f003 030f 	and.w	r3, r3, #15
 800a36c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a36e:	693b      	ldr	r3, [r7, #16]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a378:	b5b0      	push	{r4, r5, r7, lr}
 800a37a:	b094      	sub	sp, #80	@ 0x50
 800a37c:	af04      	add	r7, sp, #16
 800a37e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a380:	2301      	movs	r3, #1
 800a382:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4618      	mov	r0, r3
 800a38a:	f002 fab9 	bl	800c900 <SDMMC_GetPowerState>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a394:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a398:	e0b8      	b.n	800a50c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d02f      	beq.n	800a402 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f002 fce3 	bl	800cd72 <SDMMC_CmdSendCID>
 800a3ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <SD_InitCard+0x40>
    {
      return errorstate;
 800a3b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b6:	e0a9      	b.n	800a50c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f002 fae3 	bl	800c98a <SDMMC_GetResponse>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2104      	movs	r1, #4
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f002 fada 	bl	800c98a <SDMMC_GetResponse>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2108      	movs	r1, #8
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f002 fad1 	bl	800c98a <SDMMC_GetResponse>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	210c      	movs	r1, #12
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f002 fac8 	bl	800c98a <SDMMC_GetResponse>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a406:	2b03      	cmp	r3, #3
 800a408:	d00d      	beq.n	800a426 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f107 020e 	add.w	r2, r7, #14
 800a412:	4611      	mov	r1, r2
 800a414:	4618      	mov	r0, r3
 800a416:	f002 fce9 	bl	800cdec <SDMMC_CmdSetRelAdd>
 800a41a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a41c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <SD_InitCard+0xae>
    {
      return errorstate;
 800a422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a424:	e072      	b.n	800a50c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	d036      	beq.n	800a49c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a42e:	89fb      	ldrh	r3, [r7, #14]
 800a430:	461a      	mov	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a43e:	041b      	lsls	r3, r3, #16
 800a440:	4619      	mov	r1, r3
 800a442:	4610      	mov	r0, r2
 800a444:	f002 fcb3 	bl	800cdae <SDMMC_CmdSendCSD>
 800a448:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a452:	e05b      	b.n	800a50c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2100      	movs	r1, #0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f002 fa95 	bl	800c98a <SDMMC_GetResponse>
 800a460:	4602      	mov	r2, r0
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2104      	movs	r1, #4
 800a46c:	4618      	mov	r0, r3
 800a46e:	f002 fa8c 	bl	800c98a <SDMMC_GetResponse>
 800a472:	4602      	mov	r2, r0
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2108      	movs	r1, #8
 800a47e:	4618      	mov	r0, r3
 800a480:	f002 fa83 	bl	800c98a <SDMMC_GetResponse>
 800a484:	4602      	mov	r2, r0
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	210c      	movs	r1, #12
 800a490:	4618      	mov	r0, r3
 800a492:	f002 fa7a 	bl	800c98a <SDMMC_GetResponse>
 800a496:	4602      	mov	r2, r0
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2104      	movs	r1, #4
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f002 fa71 	bl	800c98a <SDMMC_GetResponse>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	0d1a      	lsrs	r2, r3, #20
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a4b0:	f107 0310 	add.w	r3, r7, #16
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff fcd4 	bl	8009e64 <HAL_SD_GetCardCSD>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a4c6:	e021      	b.n	800a50c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6819      	ldr	r1, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4d0:	041b      	lsls	r3, r3, #16
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	461c      	mov	r4, r3
 800a4d6:	4615      	mov	r5, r2
 800a4d8:	4622      	mov	r2, r4
 800a4da:	462b      	mov	r3, r5
 800a4dc:	4608      	mov	r0, r1
 800a4de:	f002 fb5f 	bl	800cba0 <SDMMC_CmdSelDesel>
 800a4e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <SD_InitCard+0x176>
  {
    return errorstate;
 800a4ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ec:	e00e      	b.n	800a50c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681d      	ldr	r5, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	466c      	mov	r4, sp
 800a4f6:	f103 0210 	add.w	r2, r3, #16
 800a4fa:	ca07      	ldmia	r2, {r0, r1, r2}
 800a4fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a500:	3304      	adds	r3, #4
 800a502:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a504:	4628      	mov	r0, r5
 800a506:	f002 f9a3 	bl	800c850 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3740      	adds	r7, #64	@ 0x40
 800a510:	46bd      	mov	sp, r7
 800a512:	bdb0      	pop	{r4, r5, r7, pc}

0800a514 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a51c:	2300      	movs	r3, #0
 800a51e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a520:	2300      	movs	r3, #0
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	2300      	movs	r3, #0
 800a526:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f002 fb5a 	bl	800cbe6 <SDMMC_CmdGoIdleState>
 800a532:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	e072      	b.n	800a624 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f002 fb6d 	bl	800cc22 <SDMMC_CmdOperCond>
 800a548:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00d      	beq.n	800a56c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f002 fb43 	bl	800cbe6 <SDMMC_CmdGoIdleState>
 800a560:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d004      	beq.n	800a572 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	e05b      	b.n	800a624 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a576:	2b01      	cmp	r3, #1
 800a578:	d137      	bne.n	800a5ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2100      	movs	r1, #0
 800a580:	4618      	mov	r0, r3
 800a582:	f002 fb6d 	bl	800cc60 <SDMMC_CmdAppCommand>
 800a586:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d02d      	beq.n	800a5ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a58e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a592:	e047      	b.n	800a624 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2100      	movs	r1, #0
 800a59a:	4618      	mov	r0, r3
 800a59c:	f002 fb60 	bl	800cc60 <SDMMC_CmdAppCommand>
 800a5a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <SD_PowerON+0x98>
    {
      return errorstate;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	e03b      	b.n	800a624 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	491e      	ldr	r1, [pc, #120]	@ (800a62c <SD_PowerON+0x118>)
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f002 fb76 	bl	800cca4 <SDMMC_CmdAppOperCommand>
 800a5b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a5c4:	e02e      	b.n	800a624 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f002 f9dc 	bl	800c98a <SDMMC_GetResponse>
 800a5d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	0fdb      	lsrs	r3, r3, #31
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d101      	bne.n	800a5e0 <SD_PowerON+0xcc>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e000      	b.n	800a5e2 <SD_PowerON+0xce>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	613b      	str	r3, [r7, #16]

    count++;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d802      	bhi.n	800a5fa <SD_PowerON+0xe6>
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0cc      	beq.n	800a594 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a600:	4293      	cmp	r3, r2
 800a602:	d902      	bls.n	800a60a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a604:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a608:	e00c      	b.n	800a624 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d003      	beq.n	800a61c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	645a      	str	r2, [r3, #68]	@ 0x44
 800a61a:	e002      	b.n	800a622 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	c1100000 	.word	0xc1100000

0800a630 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d102      	bne.n	800a646 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a640:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a644:	e018      	b.n	800a678 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a64e:	041b      	lsls	r3, r3, #16
 800a650:	4619      	mov	r1, r3
 800a652:	4610      	mov	r0, r2
 800a654:	f002 fbeb 	bl	800ce2e <SDMMC_CmdSendStatus>
 800a658:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	e009      	b.n	800a678 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2100      	movs	r1, #0
 800a66a:	4618      	mov	r0, r3
 800a66c:	f002 f98d 	bl	800c98a <SDMMC_GetResponse>
 800a670:	4602      	mov	r2, r0
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a688:	2300      	movs	r3, #0
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	2300      	movs	r3, #0
 800a68e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2100      	movs	r1, #0
 800a696:	4618      	mov	r0, r3
 800a698:	f002 f977 	bl	800c98a <SDMMC_GetResponse>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6a6:	d102      	bne.n	800a6ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a6a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a6ac:	e02f      	b.n	800a70e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a6ae:	f107 030c 	add.w	r3, r7, #12
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f879 	bl	800a7ac <SD_FindSCR>
 800a6ba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	e023      	b.n	800a70e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d01c      	beq.n	800a70a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6d8:	041b      	lsls	r3, r3, #16
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4610      	mov	r0, r2
 800a6de:	f002 fabf 	bl	800cc60 <SDMMC_CmdAppCommand>
 800a6e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	e00f      	b.n	800a70e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2102      	movs	r1, #2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f002 faf9 	bl	800ccec <SDMMC_CmdBusWidth>
 800a6fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	e003      	b.n	800a70e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a706:	2300      	movs	r3, #0
 800a708:	e001      	b.n	800a70e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a70a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b086      	sub	sp, #24
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a71e:	2300      	movs	r3, #0
 800a720:	60fb      	str	r3, [r7, #12]
 800a722:	2300      	movs	r3, #0
 800a724:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2100      	movs	r1, #0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f002 f92c 	bl	800c98a <SDMMC_GetResponse>
 800a732:	4603      	mov	r3, r0
 800a734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a73c:	d102      	bne.n	800a744 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a73e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a742:	e02f      	b.n	800a7a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a744:	f107 030c 	add.w	r3, r7, #12
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f82e 	bl	800a7ac <SD_FindSCR>
 800a750:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	e023      	b.n	800a7a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d01c      	beq.n	800a7a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a76e:	041b      	lsls	r3, r3, #16
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f002 fa74 	bl	800cc60 <SDMMC_CmdAppCommand>
 800a778:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	e00f      	b.n	800a7a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2100      	movs	r1, #0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f002 faae 	bl	800ccec <SDMMC_CmdBusWidth>
 800a790:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	e003      	b.n	800a7a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a79c:	2300      	movs	r3, #0
 800a79e:	e001      	b.n	800a7a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a7a0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a7ac:	b590      	push	{r4, r7, lr}
 800a7ae:	b08f      	sub	sp, #60	@ 0x3c
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a7b6:	f7f8 fb01 	bl	8002dbc <HAL_GetTick>
 800a7ba:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	60bb      	str	r3, [r7, #8]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2108      	movs	r1, #8
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f002 f918 	bl	800ca08 <SDMMC_CmdBlockLength>
 800a7d8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e2:	e0b2      	b.n	800a94a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ec:	041b      	lsls	r3, r3, #16
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f002 fa35 	bl	800cc60 <SDMMC_CmdAppCommand>
 800a7f6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a800:	e0a3      	b.n	800a94a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a802:	f04f 33ff 	mov.w	r3, #4294967295
 800a806:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a808:	2308      	movs	r3, #8
 800a80a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a80c:	2330      	movs	r3, #48	@ 0x30
 800a80e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a810:	2302      	movs	r3, #2
 800a812:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a814:	2300      	movs	r3, #0
 800a816:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a818:	2301      	movs	r3, #1
 800a81a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f107 0210 	add.w	r2, r7, #16
 800a824:	4611      	mov	r1, r2
 800a826:	4618      	mov	r0, r3
 800a828:	f002 f8c2 	bl	800c9b0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4618      	mov	r0, r3
 800a832:	f002 fa7d 	bl	800cd30 <SDMMC_CmdSendSCR>
 800a836:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d02a      	beq.n	800a894 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a840:	e083      	b.n	800a94a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00f      	beq.n	800a870 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6819      	ldr	r1, [r3, #0]
 800a854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	f107 0208 	add.w	r2, r7, #8
 800a85c:	18d4      	adds	r4, r2, r3
 800a85e:	4608      	mov	r0, r1
 800a860:	f002 f822 	bl	800c8a8 <SDMMC_ReadFIFO>
 800a864:	4603      	mov	r3, r0
 800a866:	6023      	str	r3, [r4, #0]
      index++;
 800a868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86a:	3301      	adds	r3, #1
 800a86c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a86e:	e006      	b.n	800a87e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d012      	beq.n	800a8a4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a87e:	f7f8 fa9d 	bl	8002dbc <HAL_GetTick>
 800a882:	4602      	mov	r2, r0
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88c:	d102      	bne.n	800a894 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a88e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a892:	e05a      	b.n	800a94a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a89a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0cf      	beq.n	800a842 <SD_FindSCR+0x96>
 800a8a2:	e000      	b.n	800a8a6 <SD_FindSCR+0xfa>
      break;
 800a8a4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ac:	f003 0308 	and.w	r3, r3, #8
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d005      	beq.n	800a8c0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2208      	movs	r2, #8
 800a8ba:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a8bc:	2308      	movs	r3, #8
 800a8be:	e044      	b.n	800a94a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c6:	f003 0302 	and.w	r3, r3, #2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d005      	beq.n	800a8da <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	e037      	b.n	800a94a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8e0:	f003 0320 	and.w	r3, r3, #32
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d005      	beq.n	800a8f4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	e02a      	b.n	800a94a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a8fc:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	061a      	lsls	r2, r3, #24
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	021b      	lsls	r3, r3, #8
 800a906:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a90a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	0a1b      	lsrs	r3, r3, #8
 800a910:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a914:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	0e1b      	lsrs	r3, r3, #24
 800a91a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a91e:	601a      	str	r2, [r3, #0]
    scr++;
 800a920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a922:	3304      	adds	r3, #4
 800a924:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	061a      	lsls	r2, r3, #24
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	021b      	lsls	r3, r3, #8
 800a92e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a932:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	0a1b      	lsrs	r3, r3, #8
 800a938:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a93c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	0e1b      	lsrs	r3, r3, #24
 800a942:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a946:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	373c      	adds	r7, #60	@ 0x3c
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd90      	pop	{r4, r7, pc}

0800a952 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b082      	sub	sp, #8
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	e025      	b.n	800a9b2 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d106      	bne.n	800a980 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7f6 f9d8 	bl	8000d30 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3304      	adds	r3, #4
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f001 fe96 	bl	800c6c4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6818      	ldr	r0, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	f001 feea 	bl	800c77c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e04c      	b.n	800aa68 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d106      	bne.n	800a9e8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7f7 fa2e 	bl	8001e44 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 0203 	bic.w	r2, r2, #3
 800a9fe:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	4b19      	ldr	r3, [pc, #100]	@ (800aa70 <HAL_SPDIFRX_Init+0xb4>)
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800aa18:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800aa1e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800aa24:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800aa2a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800aa30:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800aa36:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800aa3c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800aa42:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800aa48:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	fff88407 	.word	0xfff88407

0800aa74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e09d      	b.n	800abc2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d108      	bne.n	800aaa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa96:	d009      	beq.n	800aaac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	61da      	str	r2, [r3, #28]
 800aa9e:	e005      	b.n	800aaac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d106      	bne.n	800aacc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7f7 fa5e 	bl	8001f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aae2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aaec:	d902      	bls.n	800aaf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]
 800aaf2:	e002      	b.n	800aafa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aaf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aaf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ab02:	d007      	beq.n	800ab14 <HAL_SPI_Init+0xa0>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ab0c:	d002      	beq.n	800ab14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ab24:	431a      	orrs	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	f003 0302 	and.w	r3, r3, #2
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	431a      	orrs	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab42:	431a      	orrs	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a1b      	ldr	r3, [r3, #32]
 800ab52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab56:	ea42 0103 	orr.w	r1, r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	430a      	orrs	r2, r1
 800ab68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	0c1b      	lsrs	r3, r3, #16
 800ab70:	f003 0204 	and.w	r2, r3, #4
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab78:	f003 0310 	and.w	r3, r3, #16
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab82:	f003 0308 	and.w	r3, r3, #8
 800ab86:	431a      	orrs	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ab90:	ea42 0103 	orr.w	r1, r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	69da      	ldr	r2, [r3, #28]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800abb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e049      	b.n	800ac70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d106      	bne.n	800abf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7f7 fe15 	bl	8002820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2202      	movs	r2, #2
 800abfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3304      	adds	r3, #4
 800ac06:	4619      	mov	r1, r3
 800ac08:	4610      	mov	r0, r2
 800ac0a:	f000 fc11 	bl	800b430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d001      	beq.n	800ac90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e054      	b.n	800ad3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2202      	movs	r2, #2
 800ac94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68da      	ldr	r2, [r3, #12]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f042 0201 	orr.w	r2, r2, #1
 800aca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a26      	ldr	r2, [pc, #152]	@ (800ad48 <HAL_TIM_Base_Start_IT+0xd0>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d022      	beq.n	800acf8 <HAL_TIM_Base_Start_IT+0x80>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acba:	d01d      	beq.n	800acf8 <HAL_TIM_Base_Start_IT+0x80>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a22      	ldr	r2, [pc, #136]	@ (800ad4c <HAL_TIM_Base_Start_IT+0xd4>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d018      	beq.n	800acf8 <HAL_TIM_Base_Start_IT+0x80>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a21      	ldr	r2, [pc, #132]	@ (800ad50 <HAL_TIM_Base_Start_IT+0xd8>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d013      	beq.n	800acf8 <HAL_TIM_Base_Start_IT+0x80>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a1f      	ldr	r2, [pc, #124]	@ (800ad54 <HAL_TIM_Base_Start_IT+0xdc>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d00e      	beq.n	800acf8 <HAL_TIM_Base_Start_IT+0x80>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a1e      	ldr	r2, [pc, #120]	@ (800ad58 <HAL_TIM_Base_Start_IT+0xe0>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d009      	beq.n	800acf8 <HAL_TIM_Base_Start_IT+0x80>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a1c      	ldr	r2, [pc, #112]	@ (800ad5c <HAL_TIM_Base_Start_IT+0xe4>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d004      	beq.n	800acf8 <HAL_TIM_Base_Start_IT+0x80>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a1b      	ldr	r2, [pc, #108]	@ (800ad60 <HAL_TIM_Base_Start_IT+0xe8>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d115      	bne.n	800ad24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	689a      	ldr	r2, [r3, #8]
 800acfe:	4b19      	ldr	r3, [pc, #100]	@ (800ad64 <HAL_TIM_Base_Start_IT+0xec>)
 800ad00:	4013      	ands	r3, r2
 800ad02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b06      	cmp	r3, #6
 800ad08:	d015      	beq.n	800ad36 <HAL_TIM_Base_Start_IT+0xbe>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad10:	d011      	beq.n	800ad36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f042 0201 	orr.w	r2, r2, #1
 800ad20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad22:	e008      	b.n	800ad36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f042 0201 	orr.w	r2, r2, #1
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	e000      	b.n	800ad38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	40010000 	.word	0x40010000
 800ad4c:	40000400 	.word	0x40000400
 800ad50:	40000800 	.word	0x40000800
 800ad54:	40000c00 	.word	0x40000c00
 800ad58:	40010400 	.word	0x40010400
 800ad5c:	40014000 	.word	0x40014000
 800ad60:	40001800 	.word	0x40001800
 800ad64:	00010007 	.word	0x00010007

0800ad68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e049      	b.n	800ae0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d106      	bne.n	800ad94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7f7 fdb4 	bl	80028fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2202      	movs	r2, #2
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3304      	adds	r3, #4
 800ada4:	4619      	mov	r1, r3
 800ada6:	4610      	mov	r0, r2
 800ada8:	f000 fb42 	bl	800b430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d020      	beq.n	800ae7a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f003 0302 	and.w	r3, r3, #2
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d01b      	beq.n	800ae7a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f06f 0202 	mvn.w	r2, #2
 800ae4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	f003 0303 	and.w	r3, r3, #3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d003      	beq.n	800ae68 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fac7 	bl	800b3f4 <HAL_TIM_IC_CaptureCallback>
 800ae66:	e005      	b.n	800ae74 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fab9 	bl	800b3e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 faca 	bl	800b408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	f003 0304 	and.w	r3, r3, #4
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d020      	beq.n	800aec6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f003 0304 	and.w	r3, r3, #4
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d01b      	beq.n	800aec6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f06f 0204 	mvn.w	r2, #4
 800ae96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 faa1 	bl	800b3f4 <HAL_TIM_IC_CaptureCallback>
 800aeb2:	e005      	b.n	800aec0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fa93 	bl	800b3e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 faa4 	bl	800b408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	f003 0308 	and.w	r3, r3, #8
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d020      	beq.n	800af12 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f003 0308 	and.w	r3, r3, #8
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d01b      	beq.n	800af12 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f06f 0208 	mvn.w	r2, #8
 800aee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2204      	movs	r2, #4
 800aee8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	69db      	ldr	r3, [r3, #28]
 800aef0:	f003 0303 	and.w	r3, r3, #3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fa7b 	bl	800b3f4 <HAL_TIM_IC_CaptureCallback>
 800aefe:	e005      	b.n	800af0c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fa6d 	bl	800b3e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fa7e 	bl	800b408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	f003 0310 	and.w	r3, r3, #16
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d020      	beq.n	800af5e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f003 0310 	and.w	r3, r3, #16
 800af22:	2b00      	cmp	r3, #0
 800af24:	d01b      	beq.n	800af5e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f06f 0210 	mvn.w	r2, #16
 800af2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2208      	movs	r2, #8
 800af34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	69db      	ldr	r3, [r3, #28]
 800af3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fa55 	bl	800b3f4 <HAL_TIM_IC_CaptureCallback>
 800af4a:	e005      	b.n	800af58 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fa47 	bl	800b3e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fa58 	bl	800b408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00c      	beq.n	800af82 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d007      	beq.n	800af82 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f06f 0201 	mvn.w	r2, #1
 800af7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7f6 fbf5 	bl	800176c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d104      	bne.n	800af96 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00c      	beq.n	800afb0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d007      	beq.n	800afb0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800afa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fefa 	bl	800bda4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00c      	beq.n	800afd4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d007      	beq.n	800afd4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800afcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fef2 	bl	800bdb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00c      	beq.n	800aff8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d007      	beq.n	800aff8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fa12 	bl	800b41c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	f003 0320 	and.w	r3, r3, #32
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00c      	beq.n	800b01c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f003 0320 	and.w	r3, r3, #32
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d007      	beq.n	800b01c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f06f 0220 	mvn.w	r2, #32
 800b014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 feba 	bl	800bd90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b01c:	bf00      	nop
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d101      	bne.n	800b042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b03e:	2302      	movs	r3, #2
 800b040:	e0ff      	b.n	800b242 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b14      	cmp	r3, #20
 800b04e:	f200 80f0 	bhi.w	800b232 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b052:	a201      	add	r2, pc, #4	@ (adr r2, 800b058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b058:	0800b0ad 	.word	0x0800b0ad
 800b05c:	0800b233 	.word	0x0800b233
 800b060:	0800b233 	.word	0x0800b233
 800b064:	0800b233 	.word	0x0800b233
 800b068:	0800b0ed 	.word	0x0800b0ed
 800b06c:	0800b233 	.word	0x0800b233
 800b070:	0800b233 	.word	0x0800b233
 800b074:	0800b233 	.word	0x0800b233
 800b078:	0800b12f 	.word	0x0800b12f
 800b07c:	0800b233 	.word	0x0800b233
 800b080:	0800b233 	.word	0x0800b233
 800b084:	0800b233 	.word	0x0800b233
 800b088:	0800b16f 	.word	0x0800b16f
 800b08c:	0800b233 	.word	0x0800b233
 800b090:	0800b233 	.word	0x0800b233
 800b094:	0800b233 	.word	0x0800b233
 800b098:	0800b1b1 	.word	0x0800b1b1
 800b09c:	0800b233 	.word	0x0800b233
 800b0a0:	0800b233 	.word	0x0800b233
 800b0a4:	0800b233 	.word	0x0800b233
 800b0a8:	0800b1f1 	.word	0x0800b1f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68b9      	ldr	r1, [r7, #8]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f000 fa68 	bl	800b588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	699a      	ldr	r2, [r3, #24]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f042 0208 	orr.w	r2, r2, #8
 800b0c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	699a      	ldr	r2, [r3, #24]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f022 0204 	bic.w	r2, r2, #4
 800b0d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	6999      	ldr	r1, [r3, #24]
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	691a      	ldr	r2, [r3, #16]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	619a      	str	r2, [r3, #24]
      break;
 800b0ea:	e0a5      	b.n	800b238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68b9      	ldr	r1, [r7, #8]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 faba 	bl	800b66c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	699a      	ldr	r2, [r3, #24]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	699a      	ldr	r2, [r3, #24]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6999      	ldr	r1, [r3, #24]
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	021a      	lsls	r2, r3, #8
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	619a      	str	r2, [r3, #24]
      break;
 800b12c:	e084      	b.n	800b238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68b9      	ldr	r1, [r7, #8]
 800b134:	4618      	mov	r0, r3
 800b136:	f000 fb11 	bl	800b75c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69da      	ldr	r2, [r3, #28]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f042 0208 	orr.w	r2, r2, #8
 800b148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	69da      	ldr	r2, [r3, #28]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f022 0204 	bic.w	r2, r2, #4
 800b158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	69d9      	ldr	r1, [r3, #28]
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	691a      	ldr	r2, [r3, #16]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	430a      	orrs	r2, r1
 800b16a:	61da      	str	r2, [r3, #28]
      break;
 800b16c:	e064      	b.n	800b238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68b9      	ldr	r1, [r7, #8]
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fb67 	bl	800b848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	69da      	ldr	r2, [r3, #28]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69da      	ldr	r2, [r3, #28]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	69d9      	ldr	r1, [r3, #28]
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	021a      	lsls	r2, r3, #8
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	61da      	str	r2, [r3, #28]
      break;
 800b1ae:	e043      	b.n	800b238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68b9      	ldr	r1, [r7, #8]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 fb9e 	bl	800b8f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f042 0208 	orr.w	r2, r2, #8
 800b1ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f022 0204 	bic.w	r2, r2, #4
 800b1da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	691a      	ldr	r2, [r3, #16]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	430a      	orrs	r2, r1
 800b1ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b1ee:	e023      	b.n	800b238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68b9      	ldr	r1, [r7, #8]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 fbd0 	bl	800b99c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b20a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b21a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	021a      	lsls	r2, r3, #8
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b230:	e002      	b.n	800b238 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	75fb      	strb	r3, [r7, #23]
      break;
 800b236:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b240:	7dfb      	ldrb	r3, [r7, #23]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop

0800b24c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b256:	2300      	movs	r3, #0
 800b258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b260:	2b01      	cmp	r3, #1
 800b262:	d101      	bne.n	800b268 <HAL_TIM_ConfigClockSource+0x1c>
 800b264:	2302      	movs	r3, #2
 800b266:	e0b4      	b.n	800b3d2 <HAL_TIM_ConfigClockSource+0x186>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2202      	movs	r2, #2
 800b274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	4b56      	ldr	r3, [pc, #344]	@ (800b3dc <HAL_TIM_ConfigClockSource+0x190>)
 800b284:	4013      	ands	r3, r2
 800b286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b28e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2a0:	d03e      	beq.n	800b320 <HAL_TIM_ConfigClockSource+0xd4>
 800b2a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2a6:	f200 8087 	bhi.w	800b3b8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2ae:	f000 8086 	beq.w	800b3be <HAL_TIM_ConfigClockSource+0x172>
 800b2b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2b6:	d87f      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2b8:	2b70      	cmp	r3, #112	@ 0x70
 800b2ba:	d01a      	beq.n	800b2f2 <HAL_TIM_ConfigClockSource+0xa6>
 800b2bc:	2b70      	cmp	r3, #112	@ 0x70
 800b2be:	d87b      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2c0:	2b60      	cmp	r3, #96	@ 0x60
 800b2c2:	d050      	beq.n	800b366 <HAL_TIM_ConfigClockSource+0x11a>
 800b2c4:	2b60      	cmp	r3, #96	@ 0x60
 800b2c6:	d877      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2c8:	2b50      	cmp	r3, #80	@ 0x50
 800b2ca:	d03c      	beq.n	800b346 <HAL_TIM_ConfigClockSource+0xfa>
 800b2cc:	2b50      	cmp	r3, #80	@ 0x50
 800b2ce:	d873      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2d0:	2b40      	cmp	r3, #64	@ 0x40
 800b2d2:	d058      	beq.n	800b386 <HAL_TIM_ConfigClockSource+0x13a>
 800b2d4:	2b40      	cmp	r3, #64	@ 0x40
 800b2d6:	d86f      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2d8:	2b30      	cmp	r3, #48	@ 0x30
 800b2da:	d064      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x15a>
 800b2dc:	2b30      	cmp	r3, #48	@ 0x30
 800b2de:	d86b      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2e0:	2b20      	cmp	r3, #32
 800b2e2:	d060      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x15a>
 800b2e4:	2b20      	cmp	r3, #32
 800b2e6:	d867      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d05c      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x15a>
 800b2ec:	2b10      	cmp	r3, #16
 800b2ee:	d05a      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x15a>
 800b2f0:	e062      	b.n	800b3b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b302:	f000 fc19 	bl	800bb38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	609a      	str	r2, [r3, #8]
      break;
 800b31e:	e04f      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b330:	f000 fc02 	bl	800bb38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	689a      	ldr	r2, [r3, #8]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b342:	609a      	str	r2, [r3, #8]
      break;
 800b344:	e03c      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b352:	461a      	mov	r2, r3
 800b354:	f000 fb76 	bl	800ba44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2150      	movs	r1, #80	@ 0x50
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 fbcf 	bl	800bb02 <TIM_ITRx_SetConfig>
      break;
 800b364:	e02c      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b372:	461a      	mov	r2, r3
 800b374:	f000 fb95 	bl	800baa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2160      	movs	r1, #96	@ 0x60
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fbbf 	bl	800bb02 <TIM_ITRx_SetConfig>
      break;
 800b384:	e01c      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b392:	461a      	mov	r2, r3
 800b394:	f000 fb56 	bl	800ba44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2140      	movs	r1, #64	@ 0x40
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fbaf 	bl	800bb02 <TIM_ITRx_SetConfig>
      break;
 800b3a4:	e00c      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	f000 fba6 	bl	800bb02 <TIM_ITRx_SetConfig>
      break;
 800b3b6:	e003      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b3bc:	e000      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b3be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	fffeff88 	.word	0xfffeff88

0800b3e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a46      	ldr	r2, [pc, #280]	@ (800b55c <TIM_Base_SetConfig+0x12c>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d013      	beq.n	800b470 <TIM_Base_SetConfig+0x40>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b44e:	d00f      	beq.n	800b470 <TIM_Base_SetConfig+0x40>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a43      	ldr	r2, [pc, #268]	@ (800b560 <TIM_Base_SetConfig+0x130>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d00b      	beq.n	800b470 <TIM_Base_SetConfig+0x40>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a42      	ldr	r2, [pc, #264]	@ (800b564 <TIM_Base_SetConfig+0x134>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d007      	beq.n	800b470 <TIM_Base_SetConfig+0x40>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a41      	ldr	r2, [pc, #260]	@ (800b568 <TIM_Base_SetConfig+0x138>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d003      	beq.n	800b470 <TIM_Base_SetConfig+0x40>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a40      	ldr	r2, [pc, #256]	@ (800b56c <TIM_Base_SetConfig+0x13c>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d108      	bne.n	800b482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4313      	orrs	r3, r2
 800b480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a35      	ldr	r2, [pc, #212]	@ (800b55c <TIM_Base_SetConfig+0x12c>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d02b      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b490:	d027      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a32      	ldr	r2, [pc, #200]	@ (800b560 <TIM_Base_SetConfig+0x130>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d023      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a31      	ldr	r2, [pc, #196]	@ (800b564 <TIM_Base_SetConfig+0x134>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d01f      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a30      	ldr	r2, [pc, #192]	@ (800b568 <TIM_Base_SetConfig+0x138>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d01b      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a2f      	ldr	r2, [pc, #188]	@ (800b56c <TIM_Base_SetConfig+0x13c>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d017      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a2e      	ldr	r2, [pc, #184]	@ (800b570 <TIM_Base_SetConfig+0x140>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d013      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a2d      	ldr	r2, [pc, #180]	@ (800b574 <TIM_Base_SetConfig+0x144>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d00f      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a2c      	ldr	r2, [pc, #176]	@ (800b578 <TIM_Base_SetConfig+0x148>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d00b      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a2b      	ldr	r2, [pc, #172]	@ (800b57c <TIM_Base_SetConfig+0x14c>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d007      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a2a      	ldr	r2, [pc, #168]	@ (800b580 <TIM_Base_SetConfig+0x150>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d003      	beq.n	800b4e2 <TIM_Base_SetConfig+0xb2>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a29      	ldr	r2, [pc, #164]	@ (800b584 <TIM_Base_SetConfig+0x154>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d108      	bne.n	800b4f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	689a      	ldr	r2, [r3, #8]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a10      	ldr	r2, [pc, #64]	@ (800b55c <TIM_Base_SetConfig+0x12c>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d003      	beq.n	800b528 <TIM_Base_SetConfig+0xf8>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a12      	ldr	r2, [pc, #72]	@ (800b56c <TIM_Base_SetConfig+0x13c>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d103      	bne.n	800b530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	691a      	ldr	r2, [r3, #16]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d105      	bne.n	800b54e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	f023 0201 	bic.w	r2, r3, #1
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	611a      	str	r2, [r3, #16]
  }
}
 800b54e:	bf00      	nop
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	40010000 	.word	0x40010000
 800b560:	40000400 	.word	0x40000400
 800b564:	40000800 	.word	0x40000800
 800b568:	40000c00 	.word	0x40000c00
 800b56c:	40010400 	.word	0x40010400
 800b570:	40014000 	.word	0x40014000
 800b574:	40014400 	.word	0x40014400
 800b578:	40014800 	.word	0x40014800
 800b57c:	40001800 	.word	0x40001800
 800b580:	40001c00 	.word	0x40001c00
 800b584:	40002000 	.word	0x40002000

0800b588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a1b      	ldr	r3, [r3, #32]
 800b59c:	f023 0201 	bic.w	r2, r3, #1
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	4b2b      	ldr	r3, [pc, #172]	@ (800b660 <TIM_OC1_SetConfig+0xd8>)
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f023 0303 	bic.w	r3, r3, #3
 800b5be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f023 0302 	bic.w	r3, r3, #2
 800b5d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a21      	ldr	r2, [pc, #132]	@ (800b664 <TIM_OC1_SetConfig+0xdc>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d003      	beq.n	800b5ec <TIM_OC1_SetConfig+0x64>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a20      	ldr	r2, [pc, #128]	@ (800b668 <TIM_OC1_SetConfig+0xe0>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d10c      	bne.n	800b606 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f023 0308 	bic.w	r3, r3, #8
 800b5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f023 0304 	bic.w	r3, r3, #4
 800b604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a16      	ldr	r2, [pc, #88]	@ (800b664 <TIM_OC1_SetConfig+0xdc>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d003      	beq.n	800b616 <TIM_OC1_SetConfig+0x8e>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a15      	ldr	r2, [pc, #84]	@ (800b668 <TIM_OC1_SetConfig+0xe0>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d111      	bne.n	800b63a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b61c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	693a      	ldr	r2, [r7, #16]
 800b636:	4313      	orrs	r3, r2
 800b638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	621a      	str	r2, [r3, #32]
}
 800b654:	bf00      	nop
 800b656:	371c      	adds	r7, #28
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	fffeff8f 	.word	0xfffeff8f
 800b664:	40010000 	.word	0x40010000
 800b668:	40010400 	.word	0x40010400

0800b66c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	f023 0210 	bic.w	r2, r3, #16
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	4b2e      	ldr	r3, [pc, #184]	@ (800b750 <TIM_OC2_SetConfig+0xe4>)
 800b698:	4013      	ands	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	021b      	lsls	r3, r3, #8
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	f023 0320 	bic.w	r3, r3, #32
 800b6b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	011b      	lsls	r3, r3, #4
 800b6be:	697a      	ldr	r2, [r7, #20]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a23      	ldr	r2, [pc, #140]	@ (800b754 <TIM_OC2_SetConfig+0xe8>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d003      	beq.n	800b6d4 <TIM_OC2_SetConfig+0x68>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a22      	ldr	r2, [pc, #136]	@ (800b758 <TIM_OC2_SetConfig+0xec>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d10d      	bne.n	800b6f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	697a      	ldr	r2, [r7, #20]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a18      	ldr	r2, [pc, #96]	@ (800b754 <TIM_OC2_SetConfig+0xe8>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d003      	beq.n	800b700 <TIM_OC2_SetConfig+0x94>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a17      	ldr	r2, [pc, #92]	@ (800b758 <TIM_OC2_SetConfig+0xec>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d113      	bne.n	800b728 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b70e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	4313      	orrs	r3, r2
 800b71a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	4313      	orrs	r3, r2
 800b726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	621a      	str	r2, [r3, #32]
}
 800b742:	bf00      	nop
 800b744:	371c      	adds	r7, #28
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	feff8fff 	.word	0xfeff8fff
 800b754:	40010000 	.word	0x40010000
 800b758:	40010400 	.word	0x40010400

0800b75c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b087      	sub	sp, #28
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a1b      	ldr	r3, [r3, #32]
 800b76a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a1b      	ldr	r3, [r3, #32]
 800b770:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	69db      	ldr	r3, [r3, #28]
 800b782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	4b2d      	ldr	r3, [pc, #180]	@ (800b83c <TIM_OC3_SetConfig+0xe0>)
 800b788:	4013      	ands	r3, r2
 800b78a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f023 0303 	bic.w	r3, r3, #3
 800b792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b7a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	021b      	lsls	r3, r3, #8
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a22      	ldr	r2, [pc, #136]	@ (800b840 <TIM_OC3_SetConfig+0xe4>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d003      	beq.n	800b7c2 <TIM_OC3_SetConfig+0x66>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a21      	ldr	r2, [pc, #132]	@ (800b844 <TIM_OC3_SetConfig+0xe8>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d10d      	bne.n	800b7de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b7c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	021b      	lsls	r3, r3, #8
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b7dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a17      	ldr	r2, [pc, #92]	@ (800b840 <TIM_OC3_SetConfig+0xe4>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d003      	beq.n	800b7ee <TIM_OC3_SetConfig+0x92>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a16      	ldr	r2, [pc, #88]	@ (800b844 <TIM_OC3_SetConfig+0xe8>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d113      	bne.n	800b816 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b7fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	011b      	lsls	r3, r3, #4
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	4313      	orrs	r3, r2
 800b808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	011b      	lsls	r3, r3, #4
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	4313      	orrs	r3, r2
 800b814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	621a      	str	r2, [r3, #32]
}
 800b830:	bf00      	nop
 800b832:	371c      	adds	r7, #28
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	fffeff8f 	.word	0xfffeff8f
 800b840:	40010000 	.word	0x40010000
 800b844:	40010400 	.word	0x40010400

0800b848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a1b      	ldr	r3, [r3, #32]
 800b85c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	4b1e      	ldr	r3, [pc, #120]	@ (800b8ec <TIM_OC4_SetConfig+0xa4>)
 800b874:	4013      	ands	r3, r2
 800b876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	021b      	lsls	r3, r3, #8
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4313      	orrs	r3, r2
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	031b      	lsls	r3, r3, #12
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a13      	ldr	r2, [pc, #76]	@ (800b8f0 <TIM_OC4_SetConfig+0xa8>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d003      	beq.n	800b8b0 <TIM_OC4_SetConfig+0x68>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a12      	ldr	r2, [pc, #72]	@ (800b8f4 <TIM_OC4_SetConfig+0xac>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d109      	bne.n	800b8c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	019b      	lsls	r3, r3, #6
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	621a      	str	r2, [r3, #32]
}
 800b8de:	bf00      	nop
 800b8e0:	371c      	adds	r7, #28
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	feff8fff 	.word	0xfeff8fff
 800b8f0:	40010000 	.word	0x40010000
 800b8f4:	40010400 	.word	0x40010400

0800b8f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b087      	sub	sp, #28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a1b      	ldr	r3, [r3, #32]
 800b90c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	4b1b      	ldr	r3, [pc, #108]	@ (800b990 <TIM_OC5_SetConfig+0x98>)
 800b924:	4013      	ands	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	4313      	orrs	r3, r2
 800b930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b938:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	041b      	lsls	r3, r3, #16
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	4313      	orrs	r3, r2
 800b944:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4a12      	ldr	r2, [pc, #72]	@ (800b994 <TIM_OC5_SetConfig+0x9c>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d003      	beq.n	800b956 <TIM_OC5_SetConfig+0x5e>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4a11      	ldr	r2, [pc, #68]	@ (800b998 <TIM_OC5_SetConfig+0xa0>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d109      	bne.n	800b96a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b95c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	695b      	ldr	r3, [r3, #20]
 800b962:	021b      	lsls	r3, r3, #8
 800b964:	697a      	ldr	r2, [r7, #20]
 800b966:	4313      	orrs	r3, r2
 800b968:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	685a      	ldr	r2, [r3, #4]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	621a      	str	r2, [r3, #32]
}
 800b984:	bf00      	nop
 800b986:	371c      	adds	r7, #28
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	fffeff8f 	.word	0xfffeff8f
 800b994:	40010000 	.word	0x40010000
 800b998:	40010400 	.word	0x40010400

0800b99c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a1b      	ldr	r3, [r3, #32]
 800b9aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a1b      	ldr	r3, [r3, #32]
 800b9b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	4b1c      	ldr	r3, [pc, #112]	@ (800ba38 <TIM_OC6_SetConfig+0x9c>)
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	021b      	lsls	r3, r3, #8
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b9de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	051b      	lsls	r3, r3, #20
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a13      	ldr	r2, [pc, #76]	@ (800ba3c <TIM_OC6_SetConfig+0xa0>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d003      	beq.n	800b9fc <TIM_OC6_SetConfig+0x60>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a12      	ldr	r2, [pc, #72]	@ (800ba40 <TIM_OC6_SetConfig+0xa4>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d109      	bne.n	800ba10 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	029b      	lsls	r3, r3, #10
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	621a      	str	r2, [r3, #32]
}
 800ba2a:	bf00      	nop
 800ba2c:	371c      	adds	r7, #28
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	feff8fff 	.word	0xfeff8fff
 800ba3c:	40010000 	.word	0x40010000
 800ba40:	40010400 	.word	0x40010400

0800ba44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b087      	sub	sp, #28
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6a1b      	ldr	r3, [r3, #32]
 800ba54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6a1b      	ldr	r3, [r3, #32]
 800ba5a:	f023 0201 	bic.w	r2, r3, #1
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ba6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	011b      	lsls	r3, r3, #4
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	f023 030a 	bic.w	r3, r3, #10
 800ba80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	621a      	str	r2, [r3, #32]
}
 800ba96:	bf00      	nop
 800ba98:	371c      	adds	r7, #28
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b087      	sub	sp, #28
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	60b9      	str	r1, [r7, #8]
 800baac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6a1b      	ldr	r3, [r3, #32]
 800bab8:	f023 0210 	bic.w	r2, r3, #16
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bacc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	031b      	lsls	r3, r3, #12
 800bad2:	693a      	ldr	r2, [r7, #16]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bade:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	011b      	lsls	r3, r3, #4
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	621a      	str	r2, [r3, #32]
}
 800baf6:	bf00      	nop
 800baf8:	371c      	adds	r7, #28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b085      	sub	sp, #20
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	f043 0307 	orr.w	r3, r3, #7
 800bb24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	609a      	str	r2, [r3, #8]
}
 800bb2c:	bf00      	nop
 800bb2e:	3714      	adds	r7, #20
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	021a      	lsls	r2, r3, #8
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	431a      	orrs	r2, r3
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	697a      	ldr	r2, [r7, #20]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	609a      	str	r2, [r3, #8]
}
 800bb6c:	bf00      	nop
 800bb6e:	371c      	adds	r7, #28
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d101      	bne.n	800bb90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	e06d      	b.n	800bc6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a30      	ldr	r2, [pc, #192]	@ (800bc78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d004      	beq.n	800bbc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a2f      	ldr	r2, [pc, #188]	@ (800bc7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d108      	bne.n	800bbd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bbca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a20      	ldr	r2, [pc, #128]	@ (800bc78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d022      	beq.n	800bc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc02:	d01d      	beq.n	800bc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a1d      	ldr	r2, [pc, #116]	@ (800bc80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d018      	beq.n	800bc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a1c      	ldr	r2, [pc, #112]	@ (800bc84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d013      	beq.n	800bc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a1a      	ldr	r2, [pc, #104]	@ (800bc88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d00e      	beq.n	800bc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a15      	ldr	r2, [pc, #84]	@ (800bc7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d009      	beq.n	800bc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a16      	ldr	r2, [pc, #88]	@ (800bc8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d004      	beq.n	800bc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a15      	ldr	r2, [pc, #84]	@ (800bc90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d10c      	bne.n	800bc5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	40010000 	.word	0x40010000
 800bc7c:	40010400 	.word	0x40010400
 800bc80:	40000400 	.word	0x40000400
 800bc84:	40000800 	.word	0x40000800
 800bc88:	40000c00 	.word	0x40000c00
 800bc8c:	40014000 	.word	0x40014000
 800bc90:	40001800 	.word	0x40001800

0800bc94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d101      	bne.n	800bcb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bcac:	2302      	movs	r3, #2
 800bcae:	e065      	b.n	800bd7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	041b      	lsls	r3, r3, #16
 800bd26:	4313      	orrs	r3, r2
 800bd28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a16      	ldr	r2, [pc, #88]	@ (800bd88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d004      	beq.n	800bd3e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a14      	ldr	r2, [pc, #80]	@ (800bd8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d115      	bne.n	800bd6a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd48:	051b      	lsls	r3, r3, #20
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	69db      	ldr	r3, [r3, #28]
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	40010000 	.word	0x40010000
 800bd8c:	40010400 	.word	0x40010400

0800bd90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd98:	bf00      	nop
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d101      	bne.n	800bdde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
 800bddc:	e040      	b.n	800be60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d106      	bne.n	800bdf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7f6 fed2 	bl	8002b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2224      	movs	r2, #36	@ 0x24
 800bdf8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f022 0201 	bic.w	r2, r2, #1
 800be08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d002      	beq.n	800be18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fa8c 	bl	800c330 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 f825 	bl	800be68 <UART_SetConfig>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b01      	cmp	r3, #1
 800be22:	d101      	bne.n	800be28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	e01b      	b.n	800be60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	689a      	ldr	r2, [r3, #8]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f042 0201 	orr.w	r2, r2, #1
 800be56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fb0b 	bl	800c474 <UART_CheckIdleState>
 800be5e:	4603      	mov	r3, r0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b088      	sub	sp, #32
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be70:	2300      	movs	r3, #0
 800be72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	689a      	ldr	r2, [r3, #8]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	691b      	ldr	r3, [r3, #16]
 800be7c:	431a      	orrs	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	695b      	ldr	r3, [r3, #20]
 800be82:	431a      	orrs	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	69db      	ldr	r3, [r3, #28]
 800be88:	4313      	orrs	r3, r2
 800be8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	4ba6      	ldr	r3, [pc, #664]	@ (800c12c <UART_SetConfig+0x2c4>)
 800be94:	4013      	ands	r3, r2
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	6812      	ldr	r2, [r2, #0]
 800be9a:	6979      	ldr	r1, [r7, #20]
 800be9c:	430b      	orrs	r3, r1
 800be9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68da      	ldr	r2, [r3, #12]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	699b      	ldr	r3, [r3, #24]
 800beba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a94      	ldr	r2, [pc, #592]	@ (800c130 <UART_SetConfig+0x2c8>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d120      	bne.n	800bf26 <UART_SetConfig+0xbe>
 800bee4:	4b93      	ldr	r3, [pc, #588]	@ (800c134 <UART_SetConfig+0x2cc>)
 800bee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beea:	f003 0303 	and.w	r3, r3, #3
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d816      	bhi.n	800bf20 <UART_SetConfig+0xb8>
 800bef2:	a201      	add	r2, pc, #4	@ (adr r2, 800bef8 <UART_SetConfig+0x90>)
 800bef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef8:	0800bf09 	.word	0x0800bf09
 800befc:	0800bf15 	.word	0x0800bf15
 800bf00:	0800bf0f 	.word	0x0800bf0f
 800bf04:	0800bf1b 	.word	0x0800bf1b
 800bf08:	2301      	movs	r3, #1
 800bf0a:	77fb      	strb	r3, [r7, #31]
 800bf0c:	e150      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bf0e:	2302      	movs	r3, #2
 800bf10:	77fb      	strb	r3, [r7, #31]
 800bf12:	e14d      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bf14:	2304      	movs	r3, #4
 800bf16:	77fb      	strb	r3, [r7, #31]
 800bf18:	e14a      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bf1a:	2308      	movs	r3, #8
 800bf1c:	77fb      	strb	r3, [r7, #31]
 800bf1e:	e147      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bf20:	2310      	movs	r3, #16
 800bf22:	77fb      	strb	r3, [r7, #31]
 800bf24:	e144      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a83      	ldr	r2, [pc, #524]	@ (800c138 <UART_SetConfig+0x2d0>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d132      	bne.n	800bf96 <UART_SetConfig+0x12e>
 800bf30:	4b80      	ldr	r3, [pc, #512]	@ (800c134 <UART_SetConfig+0x2cc>)
 800bf32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf36:	f003 030c 	and.w	r3, r3, #12
 800bf3a:	2b0c      	cmp	r3, #12
 800bf3c:	d828      	bhi.n	800bf90 <UART_SetConfig+0x128>
 800bf3e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf44 <UART_SetConfig+0xdc>)
 800bf40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf44:	0800bf79 	.word	0x0800bf79
 800bf48:	0800bf91 	.word	0x0800bf91
 800bf4c:	0800bf91 	.word	0x0800bf91
 800bf50:	0800bf91 	.word	0x0800bf91
 800bf54:	0800bf85 	.word	0x0800bf85
 800bf58:	0800bf91 	.word	0x0800bf91
 800bf5c:	0800bf91 	.word	0x0800bf91
 800bf60:	0800bf91 	.word	0x0800bf91
 800bf64:	0800bf7f 	.word	0x0800bf7f
 800bf68:	0800bf91 	.word	0x0800bf91
 800bf6c:	0800bf91 	.word	0x0800bf91
 800bf70:	0800bf91 	.word	0x0800bf91
 800bf74:	0800bf8b 	.word	0x0800bf8b
 800bf78:	2300      	movs	r3, #0
 800bf7a:	77fb      	strb	r3, [r7, #31]
 800bf7c:	e118      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bf7e:	2302      	movs	r3, #2
 800bf80:	77fb      	strb	r3, [r7, #31]
 800bf82:	e115      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bf84:	2304      	movs	r3, #4
 800bf86:	77fb      	strb	r3, [r7, #31]
 800bf88:	e112      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bf8a:	2308      	movs	r3, #8
 800bf8c:	77fb      	strb	r3, [r7, #31]
 800bf8e:	e10f      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bf90:	2310      	movs	r3, #16
 800bf92:	77fb      	strb	r3, [r7, #31]
 800bf94:	e10c      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a68      	ldr	r2, [pc, #416]	@ (800c13c <UART_SetConfig+0x2d4>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d120      	bne.n	800bfe2 <UART_SetConfig+0x17a>
 800bfa0:	4b64      	ldr	r3, [pc, #400]	@ (800c134 <UART_SetConfig+0x2cc>)
 800bfa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfa6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bfaa:	2b30      	cmp	r3, #48	@ 0x30
 800bfac:	d013      	beq.n	800bfd6 <UART_SetConfig+0x16e>
 800bfae:	2b30      	cmp	r3, #48	@ 0x30
 800bfb0:	d814      	bhi.n	800bfdc <UART_SetConfig+0x174>
 800bfb2:	2b20      	cmp	r3, #32
 800bfb4:	d009      	beq.n	800bfca <UART_SetConfig+0x162>
 800bfb6:	2b20      	cmp	r3, #32
 800bfb8:	d810      	bhi.n	800bfdc <UART_SetConfig+0x174>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <UART_SetConfig+0x15c>
 800bfbe:	2b10      	cmp	r3, #16
 800bfc0:	d006      	beq.n	800bfd0 <UART_SetConfig+0x168>
 800bfc2:	e00b      	b.n	800bfdc <UART_SetConfig+0x174>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	77fb      	strb	r3, [r7, #31]
 800bfc8:	e0f2      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bfca:	2302      	movs	r3, #2
 800bfcc:	77fb      	strb	r3, [r7, #31]
 800bfce:	e0ef      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bfd0:	2304      	movs	r3, #4
 800bfd2:	77fb      	strb	r3, [r7, #31]
 800bfd4:	e0ec      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bfd6:	2308      	movs	r3, #8
 800bfd8:	77fb      	strb	r3, [r7, #31]
 800bfda:	e0e9      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bfdc:	2310      	movs	r3, #16
 800bfde:	77fb      	strb	r3, [r7, #31]
 800bfe0:	e0e6      	b.n	800c1b0 <UART_SetConfig+0x348>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a56      	ldr	r2, [pc, #344]	@ (800c140 <UART_SetConfig+0x2d8>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d120      	bne.n	800c02e <UART_SetConfig+0x1c6>
 800bfec:	4b51      	ldr	r3, [pc, #324]	@ (800c134 <UART_SetConfig+0x2cc>)
 800bfee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bff2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bff6:	2bc0      	cmp	r3, #192	@ 0xc0
 800bff8:	d013      	beq.n	800c022 <UART_SetConfig+0x1ba>
 800bffa:	2bc0      	cmp	r3, #192	@ 0xc0
 800bffc:	d814      	bhi.n	800c028 <UART_SetConfig+0x1c0>
 800bffe:	2b80      	cmp	r3, #128	@ 0x80
 800c000:	d009      	beq.n	800c016 <UART_SetConfig+0x1ae>
 800c002:	2b80      	cmp	r3, #128	@ 0x80
 800c004:	d810      	bhi.n	800c028 <UART_SetConfig+0x1c0>
 800c006:	2b00      	cmp	r3, #0
 800c008:	d002      	beq.n	800c010 <UART_SetConfig+0x1a8>
 800c00a:	2b40      	cmp	r3, #64	@ 0x40
 800c00c:	d006      	beq.n	800c01c <UART_SetConfig+0x1b4>
 800c00e:	e00b      	b.n	800c028 <UART_SetConfig+0x1c0>
 800c010:	2300      	movs	r3, #0
 800c012:	77fb      	strb	r3, [r7, #31]
 800c014:	e0cc      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c016:	2302      	movs	r3, #2
 800c018:	77fb      	strb	r3, [r7, #31]
 800c01a:	e0c9      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c01c:	2304      	movs	r3, #4
 800c01e:	77fb      	strb	r3, [r7, #31]
 800c020:	e0c6      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c022:	2308      	movs	r3, #8
 800c024:	77fb      	strb	r3, [r7, #31]
 800c026:	e0c3      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c028:	2310      	movs	r3, #16
 800c02a:	77fb      	strb	r3, [r7, #31]
 800c02c:	e0c0      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a44      	ldr	r2, [pc, #272]	@ (800c144 <UART_SetConfig+0x2dc>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d125      	bne.n	800c084 <UART_SetConfig+0x21c>
 800c038:	4b3e      	ldr	r3, [pc, #248]	@ (800c134 <UART_SetConfig+0x2cc>)
 800c03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c03e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c046:	d017      	beq.n	800c078 <UART_SetConfig+0x210>
 800c048:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c04c:	d817      	bhi.n	800c07e <UART_SetConfig+0x216>
 800c04e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c052:	d00b      	beq.n	800c06c <UART_SetConfig+0x204>
 800c054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c058:	d811      	bhi.n	800c07e <UART_SetConfig+0x216>
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <UART_SetConfig+0x1fe>
 800c05e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c062:	d006      	beq.n	800c072 <UART_SetConfig+0x20a>
 800c064:	e00b      	b.n	800c07e <UART_SetConfig+0x216>
 800c066:	2300      	movs	r3, #0
 800c068:	77fb      	strb	r3, [r7, #31]
 800c06a:	e0a1      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c06c:	2302      	movs	r3, #2
 800c06e:	77fb      	strb	r3, [r7, #31]
 800c070:	e09e      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c072:	2304      	movs	r3, #4
 800c074:	77fb      	strb	r3, [r7, #31]
 800c076:	e09b      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c078:	2308      	movs	r3, #8
 800c07a:	77fb      	strb	r3, [r7, #31]
 800c07c:	e098      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c07e:	2310      	movs	r3, #16
 800c080:	77fb      	strb	r3, [r7, #31]
 800c082:	e095      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a2f      	ldr	r2, [pc, #188]	@ (800c148 <UART_SetConfig+0x2e0>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d125      	bne.n	800c0da <UART_SetConfig+0x272>
 800c08e:	4b29      	ldr	r3, [pc, #164]	@ (800c134 <UART_SetConfig+0x2cc>)
 800c090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c094:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c098:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c09c:	d017      	beq.n	800c0ce <UART_SetConfig+0x266>
 800c09e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c0a2:	d817      	bhi.n	800c0d4 <UART_SetConfig+0x26c>
 800c0a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0a8:	d00b      	beq.n	800c0c2 <UART_SetConfig+0x25a>
 800c0aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0ae:	d811      	bhi.n	800c0d4 <UART_SetConfig+0x26c>
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d003      	beq.n	800c0bc <UART_SetConfig+0x254>
 800c0b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0b8:	d006      	beq.n	800c0c8 <UART_SetConfig+0x260>
 800c0ba:	e00b      	b.n	800c0d4 <UART_SetConfig+0x26c>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	77fb      	strb	r3, [r7, #31]
 800c0c0:	e076      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	77fb      	strb	r3, [r7, #31]
 800c0c6:	e073      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c0c8:	2304      	movs	r3, #4
 800c0ca:	77fb      	strb	r3, [r7, #31]
 800c0cc:	e070      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c0ce:	2308      	movs	r3, #8
 800c0d0:	77fb      	strb	r3, [r7, #31]
 800c0d2:	e06d      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c0d4:	2310      	movs	r3, #16
 800c0d6:	77fb      	strb	r3, [r7, #31]
 800c0d8:	e06a      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a1b      	ldr	r2, [pc, #108]	@ (800c14c <UART_SetConfig+0x2e4>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d138      	bne.n	800c156 <UART_SetConfig+0x2ee>
 800c0e4:	4b13      	ldr	r3, [pc, #76]	@ (800c134 <UART_SetConfig+0x2cc>)
 800c0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c0ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c0f2:	d017      	beq.n	800c124 <UART_SetConfig+0x2bc>
 800c0f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c0f8:	d82a      	bhi.n	800c150 <UART_SetConfig+0x2e8>
 800c0fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0fe:	d00b      	beq.n	800c118 <UART_SetConfig+0x2b0>
 800c100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c104:	d824      	bhi.n	800c150 <UART_SetConfig+0x2e8>
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <UART_SetConfig+0x2aa>
 800c10a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c10e:	d006      	beq.n	800c11e <UART_SetConfig+0x2b6>
 800c110:	e01e      	b.n	800c150 <UART_SetConfig+0x2e8>
 800c112:	2300      	movs	r3, #0
 800c114:	77fb      	strb	r3, [r7, #31]
 800c116:	e04b      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c118:	2302      	movs	r3, #2
 800c11a:	77fb      	strb	r3, [r7, #31]
 800c11c:	e048      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c11e:	2304      	movs	r3, #4
 800c120:	77fb      	strb	r3, [r7, #31]
 800c122:	e045      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c124:	2308      	movs	r3, #8
 800c126:	77fb      	strb	r3, [r7, #31]
 800c128:	e042      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c12a:	bf00      	nop
 800c12c:	efff69f3 	.word	0xefff69f3
 800c130:	40011000 	.word	0x40011000
 800c134:	40023800 	.word	0x40023800
 800c138:	40004400 	.word	0x40004400
 800c13c:	40004800 	.word	0x40004800
 800c140:	40004c00 	.word	0x40004c00
 800c144:	40005000 	.word	0x40005000
 800c148:	40011400 	.word	0x40011400
 800c14c:	40007800 	.word	0x40007800
 800c150:	2310      	movs	r3, #16
 800c152:	77fb      	strb	r3, [r7, #31]
 800c154:	e02c      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a72      	ldr	r2, [pc, #456]	@ (800c324 <UART_SetConfig+0x4bc>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d125      	bne.n	800c1ac <UART_SetConfig+0x344>
 800c160:	4b71      	ldr	r3, [pc, #452]	@ (800c328 <UART_SetConfig+0x4c0>)
 800c162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c166:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c16a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c16e:	d017      	beq.n	800c1a0 <UART_SetConfig+0x338>
 800c170:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c174:	d817      	bhi.n	800c1a6 <UART_SetConfig+0x33e>
 800c176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c17a:	d00b      	beq.n	800c194 <UART_SetConfig+0x32c>
 800c17c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c180:	d811      	bhi.n	800c1a6 <UART_SetConfig+0x33e>
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <UART_SetConfig+0x326>
 800c186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c18a:	d006      	beq.n	800c19a <UART_SetConfig+0x332>
 800c18c:	e00b      	b.n	800c1a6 <UART_SetConfig+0x33e>
 800c18e:	2300      	movs	r3, #0
 800c190:	77fb      	strb	r3, [r7, #31]
 800c192:	e00d      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c194:	2302      	movs	r3, #2
 800c196:	77fb      	strb	r3, [r7, #31]
 800c198:	e00a      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c19a:	2304      	movs	r3, #4
 800c19c:	77fb      	strb	r3, [r7, #31]
 800c19e:	e007      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c1a0:	2308      	movs	r3, #8
 800c1a2:	77fb      	strb	r3, [r7, #31]
 800c1a4:	e004      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c1a6:	2310      	movs	r3, #16
 800c1a8:	77fb      	strb	r3, [r7, #31]
 800c1aa:	e001      	b.n	800c1b0 <UART_SetConfig+0x348>
 800c1ac:	2310      	movs	r3, #16
 800c1ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1b8:	d15b      	bne.n	800c272 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c1ba:	7ffb      	ldrb	r3, [r7, #31]
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d828      	bhi.n	800c212 <UART_SetConfig+0x3aa>
 800c1c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c1c8 <UART_SetConfig+0x360>)
 800c1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c6:	bf00      	nop
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1f5 	.word	0x0800c1f5
 800c1d0:	0800c1fd 	.word	0x0800c1fd
 800c1d4:	0800c213 	.word	0x0800c213
 800c1d8:	0800c203 	.word	0x0800c203
 800c1dc:	0800c213 	.word	0x0800c213
 800c1e0:	0800c213 	.word	0x0800c213
 800c1e4:	0800c213 	.word	0x0800c213
 800c1e8:	0800c20b 	.word	0x0800c20b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1ec:	f7fb ff0a 	bl	8008004 <HAL_RCC_GetPCLK1Freq>
 800c1f0:	61b8      	str	r0, [r7, #24]
        break;
 800c1f2:	e013      	b.n	800c21c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1f4:	f7fb ff1a 	bl	800802c <HAL_RCC_GetPCLK2Freq>
 800c1f8:	61b8      	str	r0, [r7, #24]
        break;
 800c1fa:	e00f      	b.n	800c21c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1fc:	4b4b      	ldr	r3, [pc, #300]	@ (800c32c <UART_SetConfig+0x4c4>)
 800c1fe:	61bb      	str	r3, [r7, #24]
        break;
 800c200:	e00c      	b.n	800c21c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c202:	f7fb fe2d 	bl	8007e60 <HAL_RCC_GetSysClockFreq>
 800c206:	61b8      	str	r0, [r7, #24]
        break;
 800c208:	e008      	b.n	800c21c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c20a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c20e:	61bb      	str	r3, [r7, #24]
        break;
 800c210:	e004      	b.n	800c21c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c212:	2300      	movs	r3, #0
 800c214:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	77bb      	strb	r3, [r7, #30]
        break;
 800c21a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d074      	beq.n	800c30c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	005a      	lsls	r2, r3, #1
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	085b      	lsrs	r3, r3, #1
 800c22c:	441a      	add	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	fbb2 f3f3 	udiv	r3, r2, r3
 800c236:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	2b0f      	cmp	r3, #15
 800c23c:	d916      	bls.n	800c26c <UART_SetConfig+0x404>
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c244:	d212      	bcs.n	800c26c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	b29b      	uxth	r3, r3
 800c24a:	f023 030f 	bic.w	r3, r3, #15
 800c24e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	085b      	lsrs	r3, r3, #1
 800c254:	b29b      	uxth	r3, r3
 800c256:	f003 0307 	and.w	r3, r3, #7
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	89fb      	ldrh	r3, [r7, #14]
 800c25e:	4313      	orrs	r3, r2
 800c260:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	89fa      	ldrh	r2, [r7, #14]
 800c268:	60da      	str	r2, [r3, #12]
 800c26a:	e04f      	b.n	800c30c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	77bb      	strb	r3, [r7, #30]
 800c270:	e04c      	b.n	800c30c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c272:	7ffb      	ldrb	r3, [r7, #31]
 800c274:	2b08      	cmp	r3, #8
 800c276:	d828      	bhi.n	800c2ca <UART_SetConfig+0x462>
 800c278:	a201      	add	r2, pc, #4	@ (adr r2, 800c280 <UART_SetConfig+0x418>)
 800c27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27e:	bf00      	nop
 800c280:	0800c2a5 	.word	0x0800c2a5
 800c284:	0800c2ad 	.word	0x0800c2ad
 800c288:	0800c2b5 	.word	0x0800c2b5
 800c28c:	0800c2cb 	.word	0x0800c2cb
 800c290:	0800c2bb 	.word	0x0800c2bb
 800c294:	0800c2cb 	.word	0x0800c2cb
 800c298:	0800c2cb 	.word	0x0800c2cb
 800c29c:	0800c2cb 	.word	0x0800c2cb
 800c2a0:	0800c2c3 	.word	0x0800c2c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2a4:	f7fb feae 	bl	8008004 <HAL_RCC_GetPCLK1Freq>
 800c2a8:	61b8      	str	r0, [r7, #24]
        break;
 800c2aa:	e013      	b.n	800c2d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2ac:	f7fb febe 	bl	800802c <HAL_RCC_GetPCLK2Freq>
 800c2b0:	61b8      	str	r0, [r7, #24]
        break;
 800c2b2:	e00f      	b.n	800c2d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c32c <UART_SetConfig+0x4c4>)
 800c2b6:	61bb      	str	r3, [r7, #24]
        break;
 800c2b8:	e00c      	b.n	800c2d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2ba:	f7fb fdd1 	bl	8007e60 <HAL_RCC_GetSysClockFreq>
 800c2be:	61b8      	str	r0, [r7, #24]
        break;
 800c2c0:	e008      	b.n	800c2d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2c6:	61bb      	str	r3, [r7, #24]
        break;
 800c2c8:	e004      	b.n	800c2d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	77bb      	strb	r3, [r7, #30]
        break;
 800c2d2:	bf00      	nop
    }

    if (pclk != 0U)
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d018      	beq.n	800c30c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	085a      	lsrs	r2, r3, #1
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	441a      	add	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	2b0f      	cmp	r3, #15
 800c2f2:	d909      	bls.n	800c308 <UART_SetConfig+0x4a0>
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2fa:	d205      	bcs.n	800c308 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	60da      	str	r2, [r3, #12]
 800c306:	e001      	b.n	800c30c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c318:	7fbb      	ldrb	r3, [r7, #30]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3720      	adds	r7, #32
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	40007c00 	.word	0x40007c00
 800c328:	40023800 	.word	0x40023800
 800c32c:	00f42400 	.word	0x00f42400

0800c330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c33c:	f003 0308 	and.w	r3, r3, #8
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00a      	beq.n	800c35a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	430a      	orrs	r2, r1
 800c358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00a      	beq.n	800c37c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	430a      	orrs	r2, r1
 800c37a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c380:	f003 0302 	and.w	r3, r3, #2
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00a      	beq.n	800c39e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	430a      	orrs	r2, r1
 800c39c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a2:	f003 0304 	and.w	r3, r3, #4
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00a      	beq.n	800c3c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	430a      	orrs	r2, r1
 800c3be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c4:	f003 0310 	and.w	r3, r3, #16
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00a      	beq.n	800c3e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	430a      	orrs	r2, r1
 800c3e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3e6:	f003 0320 	and.w	r3, r3, #32
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00a      	beq.n	800c404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	430a      	orrs	r2, r1
 800c402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d01a      	beq.n	800c446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	430a      	orrs	r2, r1
 800c424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c42a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c42e:	d10a      	bne.n	800c446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	430a      	orrs	r2, r1
 800c444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c44a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00a      	beq.n	800c468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	430a      	orrs	r2, r1
 800c466:	605a      	str	r2, [r3, #4]
  }
}
 800c468:	bf00      	nop
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b08c      	sub	sp, #48	@ 0x30
 800c478:	af02      	add	r7, sp, #8
 800c47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c484:	f7f6 fc9a 	bl	8002dbc <HAL_GetTick>
 800c488:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 0308 	and.w	r3, r3, #8
 800c494:	2b08      	cmp	r3, #8
 800c496:	d12e      	bne.n	800c4f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c498:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c49c:	9300      	str	r3, [sp, #0]
 800c49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f83b 	bl	800c522 <UART_WaitOnFlagUntilTimeout>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d021      	beq.n	800c4f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	e853 3f00 	ldrex	r3, [r3]
 800c4be:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4c6:	623b      	str	r3, [r7, #32]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	6a3b      	ldr	r3, [r7, #32]
 800c4d0:	61fb      	str	r3, [r7, #28]
 800c4d2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d4:	69b9      	ldr	r1, [r7, #24]
 800c4d6:	69fa      	ldr	r2, [r7, #28]
 800c4d8:	e841 2300 	strex	r3, r2, [r1]
 800c4dc:	617b      	str	r3, [r7, #20]
   return(result);
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1e6      	bne.n	800c4b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2220      	movs	r2, #32
 800c4e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e011      	b.n	800c51a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2220      	movs	r2, #32
 800c4fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2220      	movs	r2, #32
 800c500:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3728      	adds	r7, #40	@ 0x28
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b084      	sub	sp, #16
 800c526:	af00      	add	r7, sp, #0
 800c528:	60f8      	str	r0, [r7, #12]
 800c52a:	60b9      	str	r1, [r7, #8]
 800c52c:	603b      	str	r3, [r7, #0]
 800c52e:	4613      	mov	r3, r2
 800c530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c532:	e04f      	b.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c53a:	d04b      	beq.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c53c:	f7f6 fc3e 	bl	8002dbc <HAL_GetTick>
 800c540:	4602      	mov	r2, r0
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	69ba      	ldr	r2, [r7, #24]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d302      	bcc.n	800c552 <UART_WaitOnFlagUntilTimeout+0x30>
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c552:	2303      	movs	r3, #3
 800c554:	e04e      	b.n	800c5f4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 0304 	and.w	r3, r3, #4
 800c560:	2b00      	cmp	r3, #0
 800c562:	d037      	beq.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	2b80      	cmp	r3, #128	@ 0x80
 800c568:	d034      	beq.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	2b40      	cmp	r3, #64	@ 0x40
 800c56e:	d031      	beq.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	f003 0308 	and.w	r3, r3, #8
 800c57a:	2b08      	cmp	r3, #8
 800c57c:	d110      	bne.n	800c5a0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2208      	movs	r2, #8
 800c584:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f000 f838 	bl	800c5fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2208      	movs	r2, #8
 800c590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	e029      	b.n	800c5f4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	69db      	ldr	r3, [r3, #28]
 800c5a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c5aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c5ae:	d111      	bne.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c5b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f000 f81e 	bl	800c5fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2220      	movs	r2, #32
 800c5c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e00f      	b.n	800c5f4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	69da      	ldr	r2, [r3, #28]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	4013      	ands	r3, r2
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	bf0c      	ite	eq
 800c5e4:	2301      	moveq	r3, #1
 800c5e6:	2300      	movne	r3, #0
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d0a0      	beq.n	800c534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b095      	sub	sp, #84	@ 0x54
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c60c:	e853 3f00 	ldrex	r3, [r3]
 800c610:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c618:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c622:	643b      	str	r3, [r7, #64]	@ 0x40
 800c624:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c626:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c628:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c62a:	e841 2300 	strex	r3, r2, [r1]
 800c62e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1e6      	bne.n	800c604 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	3308      	adds	r3, #8
 800c63c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	e853 3f00 	ldrex	r3, [r3]
 800c644:	61fb      	str	r3, [r7, #28]
   return(result);
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	f023 0301 	bic.w	r3, r3, #1
 800c64c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	3308      	adds	r3, #8
 800c654:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c658:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c65c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c65e:	e841 2300 	strex	r3, r2, [r1]
 800c662:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1e5      	bne.n	800c636 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d118      	bne.n	800c6a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	e853 3f00 	ldrex	r3, [r3]
 800c67e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	f023 0310 	bic.w	r3, r3, #16
 800c686:	647b      	str	r3, [r7, #68]	@ 0x44
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	461a      	mov	r2, r3
 800c68e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c690:	61bb      	str	r3, [r7, #24]
 800c692:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c694:	6979      	ldr	r1, [r7, #20]
 800c696:	69ba      	ldr	r2, [r7, #24]
 800c698:	e841 2300 	strex	r3, r2, [r1]
 800c69c:	613b      	str	r3, [r7, #16]
   return(result);
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1e6      	bne.n	800c672 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c6b8:	bf00      	nop
 800c6ba:	3754      	adds	r7, #84	@ 0x54
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d121      	bne.n	800c71a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	4b27      	ldr	r3, [pc, #156]	@ (800c778 <FMC_SDRAM_Init+0xb4>)
 800c6dc:	4013      	ands	r3, r2
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	6851      	ldr	r1, [r2, #4]
 800c6e2:	683a      	ldr	r2, [r7, #0]
 800c6e4:	6892      	ldr	r2, [r2, #8]
 800c6e6:	4311      	orrs	r1, r2
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	68d2      	ldr	r2, [r2, #12]
 800c6ec:	4311      	orrs	r1, r2
 800c6ee:	683a      	ldr	r2, [r7, #0]
 800c6f0:	6912      	ldr	r2, [r2, #16]
 800c6f2:	4311      	orrs	r1, r2
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	6952      	ldr	r2, [r2, #20]
 800c6f8:	4311      	orrs	r1, r2
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	6992      	ldr	r2, [r2, #24]
 800c6fe:	4311      	orrs	r1, r2
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	69d2      	ldr	r2, [r2, #28]
 800c704:	4311      	orrs	r1, r2
 800c706:	683a      	ldr	r2, [r7, #0]
 800c708:	6a12      	ldr	r2, [r2, #32]
 800c70a:	4311      	orrs	r1, r2
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c710:	430a      	orrs	r2, r1
 800c712:	431a      	orrs	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	601a      	str	r2, [r3, #0]
 800c718:	e026      	b.n	800c768 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	69d9      	ldr	r1, [r3, #28]
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	6a1b      	ldr	r3, [r3, #32]
 800c72a:	4319      	orrs	r1, r3
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c730:	430b      	orrs	r3, r1
 800c732:	431a      	orrs	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	4b0e      	ldr	r3, [pc, #56]	@ (800c778 <FMC_SDRAM_Init+0xb4>)
 800c73e:	4013      	ands	r3, r2
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	6851      	ldr	r1, [r2, #4]
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	6892      	ldr	r2, [r2, #8]
 800c748:	4311      	orrs	r1, r2
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	68d2      	ldr	r2, [r2, #12]
 800c74e:	4311      	orrs	r1, r2
 800c750:	683a      	ldr	r2, [r7, #0]
 800c752:	6912      	ldr	r2, [r2, #16]
 800c754:	4311      	orrs	r1, r2
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	6952      	ldr	r2, [r2, #20]
 800c75a:	4311      	orrs	r1, r2
 800c75c:	683a      	ldr	r2, [r7, #0]
 800c75e:	6992      	ldr	r2, [r2, #24]
 800c760:	430a      	orrs	r2, r1
 800c762:	431a      	orrs	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	370c      	adds	r7, #12
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	ffff8000 	.word	0xffff8000

0800c77c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d128      	bne.n	800c7e0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	689b      	ldr	r3, [r3, #8]
 800c792:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	1e59      	subs	r1, r3, #1
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	011b      	lsls	r3, r3, #4
 800c7a4:	4319      	orrs	r1, r3
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	021b      	lsls	r3, r3, #8
 800c7ae:	4319      	orrs	r1, r3
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	3b01      	subs	r3, #1
 800c7b6:	031b      	lsls	r3, r3, #12
 800c7b8:	4319      	orrs	r1, r3
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	041b      	lsls	r3, r3, #16
 800c7c2:	4319      	orrs	r1, r3
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	695b      	ldr	r3, [r3, #20]
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	051b      	lsls	r3, r3, #20
 800c7cc:	4319      	orrs	r1, r3
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	061b      	lsls	r3, r3, #24
 800c7d6:	430b      	orrs	r3, r1
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	609a      	str	r2, [r3, #8]
 800c7de:	e02d      	b.n	800c83c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	689a      	ldr	r2, [r3, #8]
 800c7e4:	4b19      	ldr	r3, [pc, #100]	@ (800c84c <FMC_SDRAM_Timing_Init+0xd0>)
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	68d2      	ldr	r2, [r2, #12]
 800c7ec:	3a01      	subs	r2, #1
 800c7ee:	0311      	lsls	r1, r2, #12
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	6952      	ldr	r2, [r2, #20]
 800c7f4:	3a01      	subs	r2, #1
 800c7f6:	0512      	lsls	r2, r2, #20
 800c7f8:	430a      	orrs	r2, r1
 800c7fa:	431a      	orrs	r2, r3
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	1e59      	subs	r1, r3, #1
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	3b01      	subs	r3, #1
 800c814:	011b      	lsls	r3, r3, #4
 800c816:	4319      	orrs	r1, r3
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	021b      	lsls	r3, r3, #8
 800c820:	4319      	orrs	r1, r3
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	3b01      	subs	r3, #1
 800c828:	041b      	lsls	r3, r3, #16
 800c82a:	4319      	orrs	r1, r3
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	3b01      	subs	r3, #1
 800c832:	061b      	lsls	r3, r3, #24
 800c834:	430b      	orrs	r3, r1
 800c836:	431a      	orrs	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3714      	adds	r7, #20
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	ff0f0fff 	.word	0xff0f0fff

0800c850 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c850:	b084      	sub	sp, #16
 800c852:	b480      	push	{r7}
 800c854:	b085      	sub	sp, #20
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	f107 001c 	add.w	r0, r7, #28
 800c85e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c866:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c868:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c86a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c86e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c872:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c876:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c87a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	4313      	orrs	r3, r2
 800c880:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	685a      	ldr	r2, [r3, #4]
 800c886:	4b07      	ldr	r3, [pc, #28]	@ (800c8a4 <SDMMC_Init+0x54>)
 800c888:	4013      	ands	r3, r2
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	431a      	orrs	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	b004      	add	sp, #16
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	ffff8100 	.word	0xffff8100

0800c8a8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c8c2:	b480      	push	{r7}
 800c8c4:	b083      	sub	sp, #12
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2203      	movs	r2, #3
 800c8f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f003 0303 	and.w	r3, r3, #3
}
 800c910:	4618      	mov	r0, r3
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c926:	2300      	movs	r3, #0
 800c928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c93a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c940:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c946:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	68da      	ldr	r2, [r3, #12]
 800c952:	4b06      	ldr	r3, [pc, #24]	@ (800c96c <SDMMC_SendCommand+0x50>)
 800c954:	4013      	ands	r3, r2
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	431a      	orrs	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	fffff000 	.word	0xfffff000

0800c970 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	b2db      	uxtb	r3, r3
}
 800c97e:	4618      	mov	r0, r3
 800c980:	370c      	adds	r7, #12
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b085      	sub	sp, #20
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	3314      	adds	r3, #20
 800c998:	461a      	mov	r2, r3
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	4413      	add	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
}  
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3714      	adds	r7, #20
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	685a      	ldr	r2, [r3, #4]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9d6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c9dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c9e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ee:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	431a      	orrs	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0

}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b088      	sub	sp, #32
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ca16:	2310      	movs	r3, #16
 800ca18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca1a:	2340      	movs	r3, #64	@ 0x40
 800ca1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca28:	f107 0308 	add.w	r3, r7, #8
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7ff ff74 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ca34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca38:	2110      	movs	r1, #16
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fa1a 	bl	800ce74 <SDMMC_GetCmdResp1>
 800ca40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca42:	69fb      	ldr	r3, [r7, #28]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3720      	adds	r7, #32
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b088      	sub	sp, #32
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ca5a:	2311      	movs	r3, #17
 800ca5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca5e:	2340      	movs	r3, #64	@ 0x40
 800ca60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca62:	2300      	movs	r3, #0
 800ca64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca6c:	f107 0308 	add.w	r3, r7, #8
 800ca70:	4619      	mov	r1, r3
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7ff ff52 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ca78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca7c:	2111      	movs	r1, #17
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f9f8 	bl	800ce74 <SDMMC_GetCmdResp1>
 800ca84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca86:	69fb      	ldr	r3, [r7, #28]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3720      	adds	r7, #32
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b088      	sub	sp, #32
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ca9e:	2312      	movs	r3, #18
 800caa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800caa2:	2340      	movs	r3, #64	@ 0x40
 800caa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caa6:	2300      	movs	r3, #0
 800caa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800caae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cab0:	f107 0308 	add.w	r3, r7, #8
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7ff ff30 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cabc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cac0:	2112      	movs	r1, #18
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f9d6 	bl	800ce74 <SDMMC_GetCmdResp1>
 800cac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caca:	69fb      	ldr	r3, [r7, #28]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3720      	adds	r7, #32
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b088      	sub	sp, #32
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cae2:	2318      	movs	r3, #24
 800cae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cae6:	2340      	movs	r3, #64	@ 0x40
 800cae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caea:	2300      	movs	r3, #0
 800caec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800caf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caf4:	f107 0308 	add.w	r3, r7, #8
 800caf8:	4619      	mov	r1, r3
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7ff ff0e 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cb00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb04:	2118      	movs	r1, #24
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f9b4 	bl	800ce74 <SDMMC_GetCmdResp1>
 800cb0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb0e:	69fb      	ldr	r3, [r7, #28]
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3720      	adds	r7, #32
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b088      	sub	sp, #32
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cb26:	2319      	movs	r3, #25
 800cb28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb2a:	2340      	movs	r3, #64	@ 0x40
 800cb2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb38:	f107 0308 	add.w	r3, r7, #8
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7ff feec 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cb44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb48:	2119      	movs	r1, #25
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f992 	bl	800ce74 <SDMMC_GetCmdResp1>
 800cb50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb52:	69fb      	ldr	r3, [r7, #28]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3720      	adds	r7, #32
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b088      	sub	sp, #32
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cb64:	2300      	movs	r3, #0
 800cb66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cb68:	230c      	movs	r3, #12
 800cb6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb6c:	2340      	movs	r3, #64	@ 0x40
 800cb6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb70:	2300      	movs	r3, #0
 800cb72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb7a:	f107 0308 	add.w	r3, r7, #8
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7ff fecb 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cb86:	4a05      	ldr	r2, [pc, #20]	@ (800cb9c <SDMMC_CmdStopTransfer+0x40>)
 800cb88:	210c      	movs	r1, #12
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f972 	bl	800ce74 <SDMMC_GetCmdResp1>
 800cb90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb92:	69fb      	ldr	r3, [r7, #28]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3720      	adds	r7, #32
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	05f5e100 	.word	0x05f5e100

0800cba0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b08a      	sub	sp, #40	@ 0x28
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cbb0:	2307      	movs	r3, #7
 800cbb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbb4:	2340      	movs	r3, #64	@ 0x40
 800cbb6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbc0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbc2:	f107 0310 	add.w	r3, r7, #16
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f7ff fea7 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cbce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbd2:	2107      	movs	r1, #7
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 f94d 	bl	800ce74 <SDMMC_GetCmdResp1>
 800cbda:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3728      	adds	r7, #40	@ 0x28
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b088      	sub	sp, #32
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc04:	f107 0308 	add.w	r3, r7, #8
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff fe86 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 fb67 	bl	800d2e4 <SDMMC_GetCmdError>
 800cc16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc18:	69fb      	ldr	r3, [r7, #28]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3720      	adds	r7, #32
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b088      	sub	sp, #32
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cc2a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800cc2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cc30:	2308      	movs	r3, #8
 800cc32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc34:	2340      	movs	r3, #64	@ 0x40
 800cc36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc42:	f107 0308 	add.w	r3, r7, #8
 800cc46:	4619      	mov	r1, r3
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f7ff fe67 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fafa 	bl	800d248 <SDMMC_GetCmdResp7>
 800cc54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc56:	69fb      	ldr	r3, [r7, #28]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3720      	adds	r7, #32
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b088      	sub	sp, #32
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cc6e:	2337      	movs	r3, #55	@ 0x37
 800cc70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc72:	2340      	movs	r3, #64	@ 0x40
 800cc74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc76:	2300      	movs	r3, #0
 800cc78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc80:	f107 0308 	add.w	r3, r7, #8
 800cc84:	4619      	mov	r1, r3
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7ff fe48 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cc8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc90:	2137      	movs	r1, #55	@ 0x37
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f8ee 	bl	800ce74 <SDMMC_GetCmdResp1>
 800cc98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc9a:	69fb      	ldr	r3, [r7, #28]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3720      	adds	r7, #32
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b088      	sub	sp, #32
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	4b0d      	ldr	r3, [pc, #52]	@ (800cce8 <SDMMC_CmdAppOperCommand+0x44>)
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ccb6:	2329      	movs	r3, #41	@ 0x29
 800ccb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccba:	2340      	movs	r3, #64	@ 0x40
 800ccbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccc8:	f107 0308 	add.w	r3, r7, #8
 800cccc:	4619      	mov	r1, r3
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7ff fe24 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fa03 	bl	800d0e0 <SDMMC_GetCmdResp3>
 800ccda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccdc:	69fb      	ldr	r3, [r7, #28]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3720      	adds	r7, #32
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	80100000 	.word	0x80100000

0800ccec <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b088      	sub	sp, #32
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ccfa:	2306      	movs	r3, #6
 800ccfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccfe:	2340      	movs	r3, #64	@ 0x40
 800cd00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd02:	2300      	movs	r3, #0
 800cd04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd0c:	f107 0308 	add.w	r3, r7, #8
 800cd10:	4619      	mov	r1, r3
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7ff fe02 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cd18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd1c:	2106      	movs	r1, #6
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f8a8 	bl	800ce74 <SDMMC_GetCmdResp1>
 800cd24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd26:	69fb      	ldr	r3, [r7, #28]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3720      	adds	r7, #32
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b088      	sub	sp, #32
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cd3c:	2333      	movs	r3, #51	@ 0x33
 800cd3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd40:	2340      	movs	r3, #64	@ 0x40
 800cd42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd44:	2300      	movs	r3, #0
 800cd46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd4e:	f107 0308 	add.w	r3, r7, #8
 800cd52:	4619      	mov	r1, r3
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7ff fde1 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cd5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd5e:	2133      	movs	r1, #51	@ 0x33
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 f887 	bl	800ce74 <SDMMC_GetCmdResp1>
 800cd66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd68:	69fb      	ldr	r3, [r7, #28]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3720      	adds	r7, #32
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b088      	sub	sp, #32
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cd7e:	2302      	movs	r3, #2
 800cd80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cd82:	23c0      	movs	r3, #192	@ 0xc0
 800cd84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd86:	2300      	movs	r3, #0
 800cd88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd90:	f107 0308 	add.w	r3, r7, #8
 800cd94:	4619      	mov	r1, r3
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7ff fdc0 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 f957 	bl	800d050 <SDMMC_GetCmdResp2>
 800cda2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cda4:	69fb      	ldr	r3, [r7, #28]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3720      	adds	r7, #32
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b088      	sub	sp, #32
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cdbc:	2309      	movs	r3, #9
 800cdbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cdc0:	23c0      	movs	r3, #192	@ 0xc0
 800cdc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdce:	f107 0308 	add.w	r3, r7, #8
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff fda1 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f938 	bl	800d050 <SDMMC_GetCmdResp2>
 800cde0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cde2:	69fb      	ldr	r3, [r7, #28]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3720      	adds	r7, #32
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b088      	sub	sp, #32
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cdfa:	2303      	movs	r3, #3
 800cdfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdfe:	2340      	movs	r3, #64	@ 0x40
 800ce00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce02:	2300      	movs	r3, #0
 800ce04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce0c:	f107 0308 	add.w	r3, r7, #8
 800ce10:	4619      	mov	r1, r3
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f7ff fd82 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	2103      	movs	r1, #3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f99d 	bl	800d15c <SDMMC_GetCmdResp6>
 800ce22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce24:	69fb      	ldr	r3, [r7, #28]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3720      	adds	r7, #32
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b088      	sub	sp, #32
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ce3c:	230d      	movs	r3, #13
 800ce3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce40:	2340      	movs	r3, #64	@ 0x40
 800ce42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce4e:	f107 0308 	add.w	r3, r7, #8
 800ce52:	4619      	mov	r1, r3
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff fd61 	bl	800c91c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ce5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce5e:	210d      	movs	r1, #13
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 f807 	bl	800ce74 <SDMMC_GetCmdResp1>
 800ce66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce68:	69fb      	ldr	r3, [r7, #28]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3720      	adds	r7, #32
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
	...

0800ce74 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b088      	sub	sp, #32
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce82:	4b70      	ldr	r3, [pc, #448]	@ (800d044 <SDMMC_GetCmdResp1+0x1d0>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a70      	ldr	r2, [pc, #448]	@ (800d048 <SDMMC_GetCmdResp1+0x1d4>)
 800ce88:	fba2 2303 	umull	r2, r3, r2, r3
 800ce8c:	0a5a      	lsrs	r2, r3, #9
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	fb02 f303 	mul.w	r3, r2, r3
 800ce94:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	1e5a      	subs	r2, r3, #1
 800ce9a:	61fa      	str	r2, [r7, #28]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d102      	bne.n	800cea6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cea0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cea4:	e0c9      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceaa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d0ef      	beq.n	800ce96 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1ea      	bne.n	800ce96 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cec4:	f003 0304 	and.w	r3, r3, #4
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d004      	beq.n	800ced6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2204      	movs	r2, #4
 800ced0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ced2:	2304      	movs	r3, #4
 800ced4:	e0b1      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d004      	beq.n	800ceec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2201      	movs	r2, #1
 800cee6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cee8:	2301      	movs	r3, #1
 800ceea:	e0a6      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	22c5      	movs	r2, #197	@ 0xc5
 800cef0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f7ff fd3c 	bl	800c970 <SDMMC_GetCommandResponse>
 800cef8:	4603      	mov	r3, r0
 800cefa:	461a      	mov	r2, r3
 800cefc:	7afb      	ldrb	r3, [r7, #11]
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d001      	beq.n	800cf06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e099      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cf06:	2100      	movs	r1, #0
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f7ff fd3e 	bl	800c98a <SDMMC_GetResponse>
 800cf0e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cf10:	697a      	ldr	r2, [r7, #20]
 800cf12:	4b4e      	ldr	r3, [pc, #312]	@ (800d04c <SDMMC_GetCmdResp1+0x1d8>)
 800cf14:	4013      	ands	r3, r2
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e08d      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	da02      	bge.n	800cf2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cf24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cf28:	e087      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d001      	beq.n	800cf38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cf34:	2340      	movs	r3, #64	@ 0x40
 800cf36:	e080      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf42:	2380      	movs	r3, #128	@ 0x80
 800cf44:	e079      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf54:	e071      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf64:	e069      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d002      	beq.n	800cf76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cf70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf74:	e061      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cf80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cf84:	e059      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d002      	beq.n	800cf96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cf90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf94:	e051      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cfa4:	e049      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d002      	beq.n	800cfb6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cfb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cfb4:	e041      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cfc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfc4:	e039      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cfd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cfd4:	e031      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cfe0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800cfe4:	e029      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cff0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cff4:	e021      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d000:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d004:	e019      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d010:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d014:	e011      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d020:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d024:	e009      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	f003 0308 	and.w	r3, r3, #8
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d030:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d034:	e001      	b.n	800d03a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d036:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3720      	adds	r7, #32
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	20000000 	.word	0x20000000
 800d048:	10624dd3 	.word	0x10624dd3
 800d04c:	fdffe008 	.word	0xfdffe008

0800d050 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d058:	4b1f      	ldr	r3, [pc, #124]	@ (800d0d8 <SDMMC_GetCmdResp2+0x88>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a1f      	ldr	r2, [pc, #124]	@ (800d0dc <SDMMC_GetCmdResp2+0x8c>)
 800d05e:	fba2 2303 	umull	r2, r3, r2, r3
 800d062:	0a5b      	lsrs	r3, r3, #9
 800d064:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d068:	fb02 f303 	mul.w	r3, r2, r3
 800d06c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	1e5a      	subs	r2, r3, #1
 800d072:	60fa      	str	r2, [r7, #12]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d102      	bne.n	800d07e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d078:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d07c:	e026      	b.n	800d0cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d082:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d0ef      	beq.n	800d06e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1ea      	bne.n	800d06e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d09c:	f003 0304 	and.w	r3, r3, #4
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d004      	beq.n	800d0ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2204      	movs	r2, #4
 800d0a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0aa:	2304      	movs	r3, #4
 800d0ac:	e00e      	b.n	800d0cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0b2:	f003 0301 	and.w	r3, r3, #1
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d004      	beq.n	800d0c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e003      	b.n	800d0cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	22c5      	movs	r2, #197	@ 0xc5
 800d0c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr
 800d0d8:	20000000 	.word	0x20000000
 800d0dc:	10624dd3 	.word	0x10624dd3

0800d0e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d0e8:	4b1a      	ldr	r3, [pc, #104]	@ (800d154 <SDMMC_GetCmdResp3+0x74>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a1a      	ldr	r2, [pc, #104]	@ (800d158 <SDMMC_GetCmdResp3+0x78>)
 800d0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f2:	0a5b      	lsrs	r3, r3, #9
 800d0f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0f8:	fb02 f303 	mul.w	r3, r2, r3
 800d0fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	1e5a      	subs	r2, r3, #1
 800d102:	60fa      	str	r2, [r7, #12]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d102      	bne.n	800d10e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d108:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d10c:	e01b      	b.n	800d146 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d112:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0ef      	beq.n	800d0fe <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d124:	2b00      	cmp	r3, #0
 800d126:	d1ea      	bne.n	800d0fe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d12c:	f003 0304 	and.w	r3, r3, #4
 800d130:	2b00      	cmp	r3, #0
 800d132:	d004      	beq.n	800d13e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2204      	movs	r2, #4
 800d138:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d13a:	2304      	movs	r3, #4
 800d13c:	e003      	b.n	800d146 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	22c5      	movs	r2, #197	@ 0xc5
 800d142:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3714      	adds	r7, #20
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	20000000 	.word	0x20000000
 800d158:	10624dd3 	.word	0x10624dd3

0800d15c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b088      	sub	sp, #32
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	460b      	mov	r3, r1
 800d166:	607a      	str	r2, [r7, #4]
 800d168:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d16a:	4b35      	ldr	r3, [pc, #212]	@ (800d240 <SDMMC_GetCmdResp6+0xe4>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a35      	ldr	r2, [pc, #212]	@ (800d244 <SDMMC_GetCmdResp6+0xe8>)
 800d170:	fba2 2303 	umull	r2, r3, r2, r3
 800d174:	0a5b      	lsrs	r3, r3, #9
 800d176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d17a:	fb02 f303 	mul.w	r3, r2, r3
 800d17e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	1e5a      	subs	r2, r3, #1
 800d184:	61fa      	str	r2, [r7, #28]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d102      	bne.n	800d190 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d18a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d18e:	e052      	b.n	800d236 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d194:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d0ef      	beq.n	800d180 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1ea      	bne.n	800d180 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ae:	f003 0304 	and.w	r3, r3, #4
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d004      	beq.n	800d1c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2204      	movs	r2, #4
 800d1ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1bc:	2304      	movs	r3, #4
 800d1be:	e03a      	b.n	800d236 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1c4:	f003 0301 	and.w	r3, r3, #1
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d004      	beq.n	800d1d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e02f      	b.n	800d236 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f7ff fbca 	bl	800c970 <SDMMC_GetCommandResponse>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	461a      	mov	r2, r3
 800d1e0:	7afb      	ldrb	r3, [r7, #11]
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d001      	beq.n	800d1ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e025      	b.n	800d236 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	22c5      	movs	r2, #197	@ 0xc5
 800d1ee:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f7ff fbc9 	bl	800c98a <SDMMC_GetResponse>
 800d1f8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d106      	bne.n	800d212 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	0c1b      	lsrs	r3, r3, #16
 800d208:	b29a      	uxth	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d20e:	2300      	movs	r3, #0
 800d210:	e011      	b.n	800d236 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d21c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d220:	e009      	b.n	800d236 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d002      	beq.n	800d232 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d22c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d230:	e001      	b.n	800d236 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d232:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d236:	4618      	mov	r0, r3
 800d238:	3720      	adds	r7, #32
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	20000000 	.word	0x20000000
 800d244:	10624dd3 	.word	0x10624dd3

0800d248 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d250:	4b22      	ldr	r3, [pc, #136]	@ (800d2dc <SDMMC_GetCmdResp7+0x94>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a22      	ldr	r2, [pc, #136]	@ (800d2e0 <SDMMC_GetCmdResp7+0x98>)
 800d256:	fba2 2303 	umull	r2, r3, r2, r3
 800d25a:	0a5b      	lsrs	r3, r3, #9
 800d25c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d260:	fb02 f303 	mul.w	r3, r2, r3
 800d264:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	1e5a      	subs	r2, r3, #1
 800d26a:	60fa      	str	r2, [r7, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d102      	bne.n	800d276 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d270:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d274:	e02c      	b.n	800d2d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d27a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d282:	2b00      	cmp	r3, #0
 800d284:	d0ef      	beq.n	800d266 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1ea      	bne.n	800d266 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d294:	f003 0304 	and.w	r3, r3, #4
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d004      	beq.n	800d2a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2204      	movs	r2, #4
 800d2a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2a2:	2304      	movs	r3, #4
 800d2a4:	e014      	b.n	800d2d0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d004      	beq.n	800d2bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e009      	b.n	800d2d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2240      	movs	r2, #64	@ 0x40
 800d2cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d2ce:	2300      	movs	r3, #0
  
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3714      	adds	r7, #20
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	20000000 	.word	0x20000000
 800d2e0:	10624dd3 	.word	0x10624dd3

0800d2e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2ec:	4b11      	ldr	r3, [pc, #68]	@ (800d334 <SDMMC_GetCmdError+0x50>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a11      	ldr	r2, [pc, #68]	@ (800d338 <SDMMC_GetCmdError+0x54>)
 800d2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2f6:	0a5b      	lsrs	r3, r3, #9
 800d2f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2fc:	fb02 f303 	mul.w	r3, r2, r3
 800d300:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	1e5a      	subs	r2, r3, #1
 800d306:	60fa      	str	r2, [r7, #12]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d102      	bne.n	800d312 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d30c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d310:	e009      	b.n	800d326 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d0f1      	beq.n	800d302 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	22c5      	movs	r2, #197	@ 0xc5
 800d322:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d324:	2300      	movs	r3, #0
}
 800d326:	4618      	mov	r0, r3
 800d328:	3714      	adds	r7, #20
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	20000000 	.word	0x20000000
 800d338:	10624dd3 	.word	0x10624dd3

0800d33c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d33c:	b084      	sub	sp, #16
 800d33e:	b580      	push	{r7, lr}
 800d340:	b084      	sub	sp, #16
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	f107 001c 	add.w	r0, r7, #28
 800d34a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d34e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d352:	2b01      	cmp	r3, #1
 800d354:	d121      	bne.n	800d39a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d35a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	68da      	ldr	r2, [r3, #12]
 800d366:	4b21      	ldr	r3, [pc, #132]	@ (800d3ec <USB_CoreInit+0xb0>)
 800d368:	4013      	ands	r3, r2
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d37a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d105      	bne.n	800d38e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f9d4 	bl	800d73c <USB_CoreReset>
 800d394:	4603      	mov	r3, r0
 800d396:	73fb      	strb	r3, [r7, #15]
 800d398:	e010      	b.n	800d3bc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f9c8 	bl	800d73c <USB_CoreReset>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d3bc:	7fbb      	ldrb	r3, [r7, #30]
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d10b      	bne.n	800d3da <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	f043 0206 	orr.w	r2, r3, #6
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	f043 0220 	orr.w	r2, r3, #32
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3e6:	b004      	add	sp, #16
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	ffbdffbf 	.word	0xffbdffbf

0800d3f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	f043 0201 	orr.w	r2, r3, #1
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	370c      	adds	r7, #12
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr

0800d412 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d412:	b480      	push	{r7}
 800d414:	b083      	sub	sp, #12
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	f023 0201 	bic.w	r2, r3, #1
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d426:	2300      	movs	r3, #0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	460b      	mov	r3, r1
 800d43e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d440:	2300      	movs	r3, #0
 800d442:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d450:	78fb      	ldrb	r3, [r7, #3]
 800d452:	2b01      	cmp	r3, #1
 800d454:	d115      	bne.n	800d482 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d462:	200a      	movs	r0, #10
 800d464:	f7f5 fcb6 	bl	8002dd4 <HAL_Delay>
      ms += 10U;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	330a      	adds	r3, #10
 800d46c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f956 	bl	800d720 <USB_GetMode>
 800d474:	4603      	mov	r3, r0
 800d476:	2b01      	cmp	r3, #1
 800d478:	d01e      	beq.n	800d4b8 <USB_SetCurrentMode+0x84>
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2bc7      	cmp	r3, #199	@ 0xc7
 800d47e:	d9f0      	bls.n	800d462 <USB_SetCurrentMode+0x2e>
 800d480:	e01a      	b.n	800d4b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d482:	78fb      	ldrb	r3, [r7, #3]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d115      	bne.n	800d4b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d494:	200a      	movs	r0, #10
 800d496:	f7f5 fc9d 	bl	8002dd4 <HAL_Delay>
      ms += 10U;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	330a      	adds	r3, #10
 800d49e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 f93d 	bl	800d720 <USB_GetMode>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d005      	beq.n	800d4b8 <USB_SetCurrentMode+0x84>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2bc7      	cmp	r3, #199	@ 0xc7
 800d4b0:	d9f0      	bls.n	800d494 <USB_SetCurrentMode+0x60>
 800d4b2:	e001      	b.n	800d4b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	e005      	b.n	800d4c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2bc8      	cmp	r3, #200	@ 0xc8
 800d4bc:	d101      	bne.n	800d4c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e000      	b.n	800d4c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d4e6:	d901      	bls.n	800d4ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	e01b      	b.n	800d524 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	691b      	ldr	r3, [r3, #16]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	daf2      	bge.n	800d4da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	019b      	lsls	r3, r3, #6
 800d4fc:	f043 0220 	orr.w	r2, r3, #32
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3301      	adds	r3, #1
 800d508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d510:	d901      	bls.n	800d516 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d512:	2303      	movs	r3, #3
 800d514:	e006      	b.n	800d524 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	f003 0320 	and.w	r3, r3, #32
 800d51e:	2b20      	cmp	r3, #32
 800d520:	d0f0      	beq.n	800d504 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d538:	2300      	movs	r3, #0
 800d53a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	3301      	adds	r3, #1
 800d540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d548:	d901      	bls.n	800d54e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d54a:	2303      	movs	r3, #3
 800d54c:	e018      	b.n	800d580 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	2b00      	cmp	r3, #0
 800d554:	daf2      	bge.n	800d53c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d556:	2300      	movs	r3, #0
 800d558:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2210      	movs	r2, #16
 800d55e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	3301      	adds	r3, #1
 800d564:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d56c:	d901      	bls.n	800d572 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d56e:	2303      	movs	r3, #3
 800d570:	e006      	b.n	800d580 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	f003 0310 	and.w	r3, r3, #16
 800d57a:	2b10      	cmp	r3, #16
 800d57c:	d0f0      	beq.n	800d560 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3714      	adds	r7, #20
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b089      	sub	sp, #36	@ 0x24
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	4611      	mov	r1, r2
 800d598:	461a      	mov	r2, r3
 800d59a:	460b      	mov	r3, r1
 800d59c:	71fb      	strb	r3, [r7, #7]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d5aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d123      	bne.n	800d5fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d5b2:	88bb      	ldrh	r3, [r7, #4]
 800d5b4:	3303      	adds	r3, #3
 800d5b6:	089b      	lsrs	r3, r3, #2
 800d5b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	61bb      	str	r3, [r7, #24]
 800d5be:	e018      	b.n	800d5f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d5c0:	79fb      	ldrb	r3, [r7, #7]
 800d5c2:	031a      	lsls	r2, r3, #12
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	61bb      	str	r3, [r7, #24]
 800d5f2:	69ba      	ldr	r2, [r7, #24]
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d3e2      	bcc.n	800d5c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3724      	adds	r7, #36	@ 0x24
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d608:	b480      	push	{r7}
 800d60a:	b08b      	sub	sp, #44	@ 0x2c
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	4613      	mov	r3, r2
 800d614:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d61e:	88fb      	ldrh	r3, [r7, #6]
 800d620:	089b      	lsrs	r3, r3, #2
 800d622:	b29b      	uxth	r3, r3
 800d624:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d626:	88fb      	ldrh	r3, [r7, #6]
 800d628:	f003 0303 	and.w	r3, r3, #3
 800d62c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d62e:	2300      	movs	r3, #0
 800d630:	623b      	str	r3, [r7, #32]
 800d632:	e014      	b.n	800d65e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d63e:	601a      	str	r2, [r3, #0]
    pDest++;
 800d640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d642:	3301      	adds	r3, #1
 800d644:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d648:	3301      	adds	r3, #1
 800d64a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64e:	3301      	adds	r3, #1
 800d650:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d654:	3301      	adds	r3, #1
 800d656:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	3301      	adds	r3, #1
 800d65c:	623b      	str	r3, [r7, #32]
 800d65e:	6a3a      	ldr	r2, [r7, #32]
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	429a      	cmp	r2, r3
 800d664:	d3e6      	bcc.n	800d634 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d666:	8bfb      	ldrh	r3, [r7, #30]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d01e      	beq.n	800d6aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d66c:	2300      	movs	r3, #0
 800d66e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d676:	461a      	mov	r2, r3
 800d678:	f107 0310 	add.w	r3, r7, #16
 800d67c:	6812      	ldr	r2, [r2, #0]
 800d67e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d680:	693a      	ldr	r2, [r7, #16]
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	b2db      	uxtb	r3, r3
 800d686:	00db      	lsls	r3, r3, #3
 800d688:	fa22 f303 	lsr.w	r3, r2, r3
 800d68c:	b2da      	uxtb	r2, r3
 800d68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d690:	701a      	strb	r2, [r3, #0]
      i++;
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	3301      	adds	r3, #1
 800d696:	623b      	str	r3, [r7, #32]
      pDest++;
 800d698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69a:	3301      	adds	r3, #1
 800d69c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d69e:	8bfb      	ldrh	r3, [r7, #30]
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d6a4:	8bfb      	ldrh	r3, [r7, #30]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1ea      	bne.n	800d680 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	372c      	adds	r7, #44	@ 0x2c
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	695b      	ldr	r3, [r3, #20]
 800d6c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	699b      	ldr	r3, [r3, #24]
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3714      	adds	r7, #20
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d6de:	b480      	push	{r7}
 800d6e0:	b085      	sub	sp, #20
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d6ee:	78fb      	ldrb	r3, [r7, #3]
 800d6f0:	015a      	lsls	r2, r3, #5
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d6fe:	78fb      	ldrb	r3, [r7, #3]
 800d700:	015a      	lsls	r2, r3, #5
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	4413      	add	r3, r2
 800d706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	4013      	ands	r3, r2
 800d710:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d712:	68bb      	ldr	r3, [r7, #8]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3714      	adds	r7, #20
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	695b      	ldr	r3, [r3, #20]
 800d72c:	f003 0301 	and.w	r3, r3, #1
}
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d744:	2300      	movs	r3, #0
 800d746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	3301      	adds	r3, #1
 800d74c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d754:	d901      	bls.n	800d75a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d756:	2303      	movs	r3, #3
 800d758:	e01b      	b.n	800d792 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	daf2      	bge.n	800d748 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d762:	2300      	movs	r3, #0
 800d764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	691b      	ldr	r3, [r3, #16]
 800d76a:	f043 0201 	orr.w	r2, r3, #1
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	3301      	adds	r3, #1
 800d776:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d77e:	d901      	bls.n	800d784 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d780:	2303      	movs	r3, #3
 800d782:	e006      	b.n	800d792 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	691b      	ldr	r3, [r3, #16]
 800d788:	f003 0301 	and.w	r3, r3, #1
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d0f0      	beq.n	800d772 <USB_CoreReset+0x36>

  return HAL_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3714      	adds	r7, #20
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
	...

0800d7a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d7a0:	b084      	sub	sp, #16
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b086      	sub	sp, #24
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d7ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ca:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d119      	bne.n	800d812 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d7de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d10a      	bne.n	800d7fc <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d7f4:	f043 0304 	orr.w	r3, r3, #4
 800d7f8:	6013      	str	r3, [r2, #0]
 800d7fa:	e014      	b.n	800d826 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d80a:	f023 0304 	bic.w	r3, r3, #4
 800d80e:	6013      	str	r3, [r2, #0]
 800d810:	e009      	b.n	800d826 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d820:	f023 0304 	bic.w	r3, r3, #4
 800d824:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d826:	2110      	movs	r1, #16
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7ff fe4f 	bl	800d4cc <USB_FlushTxFifo>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d001      	beq.n	800d838 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800d834:	2301      	movs	r3, #1
 800d836:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f7ff fe79 	bl	800d530 <USB_FlushRxFifo>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d001      	beq.n	800d848 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d848:	2300      	movs	r3, #0
 800d84a:	613b      	str	r3, [r7, #16]
 800d84c:	e015      	b.n	800d87a <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	015a      	lsls	r2, r3, #5
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	4413      	add	r3, r2
 800d856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d85a:	461a      	mov	r2, r3
 800d85c:	f04f 33ff 	mov.w	r3, #4294967295
 800d860:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	015a      	lsls	r2, r3, #5
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	4413      	add	r3, r2
 800d86a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d86e:	461a      	mov	r2, r3
 800d870:	2300      	movs	r3, #0
 800d872:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	3301      	adds	r3, #1
 800d878:	613b      	str	r3, [r7, #16]
 800d87a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d87e:	461a      	mov	r2, r3
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	4293      	cmp	r3, r2
 800d884:	d3e3      	bcc.n	800d84e <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f04f 32ff 	mov.w	r2, #4294967295
 800d892:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	4a18      	ldr	r2, [pc, #96]	@ (800d8f8 <USB_HostInit+0x158>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d10b      	bne.n	800d8b4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8a2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	4a15      	ldr	r2, [pc, #84]	@ (800d8fc <USB_HostInit+0x15c>)
 800d8a8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a14      	ldr	r2, [pc, #80]	@ (800d900 <USB_HostInit+0x160>)
 800d8ae:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800d8b2:	e009      	b.n	800d8c8 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2280      	movs	r2, #128	@ 0x80
 800d8b8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a11      	ldr	r2, [pc, #68]	@ (800d904 <USB_HostInit+0x164>)
 800d8be:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4a11      	ldr	r2, [pc, #68]	@ (800d908 <USB_HostInit+0x168>)
 800d8c4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d8c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d105      	bne.n	800d8dc <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	699b      	ldr	r3, [r3, #24]
 800d8d4:	f043 0210 	orr.w	r2, r3, #16
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	699a      	ldr	r2, [r3, #24]
 800d8e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d90c <USB_HostInit+0x16c>)
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3718      	adds	r7, #24
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8f4:	b004      	add	sp, #16
 800d8f6:	4770      	bx	lr
 800d8f8:	40040000 	.word	0x40040000
 800d8fc:	01000200 	.word	0x01000200
 800d900:	00e00300 	.word	0x00e00300
 800d904:	00600080 	.word	0x00600080
 800d908:	004000e0 	.word	0x004000e0
 800d90c:	a3200008 	.word	0xa3200008

0800d910 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	460b      	mov	r3, r1
 800d91a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d92e:	f023 0303 	bic.w	r3, r3, #3
 800d932:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	78fb      	ldrb	r3, [r7, #3]
 800d93e:	f003 0303 	and.w	r3, r3, #3
 800d942:	68f9      	ldr	r1, [r7, #12]
 800d944:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d948:	4313      	orrs	r3, r2
 800d94a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d94c:	78fb      	ldrb	r3, [r7, #3]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d107      	bne.n	800d962 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d958:	461a      	mov	r2, r3
 800d95a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d95e:	6053      	str	r3, [r2, #4]
 800d960:	e00c      	b.n	800d97c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800d962:	78fb      	ldrb	r3, [r7, #3]
 800d964:	2b02      	cmp	r3, #2
 800d966:	d107      	bne.n	800d978 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d96e:	461a      	mov	r2, r3
 800d970:	f241 7370 	movw	r3, #6000	@ 0x1770
 800d974:	6053      	str	r3, [r2, #4]
 800d976:	e001      	b.n	800d97c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800d978:	2301      	movs	r3, #1
 800d97a:	e000      	b.n	800d97e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3714      	adds	r7, #20
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b084      	sub	sp, #16
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d996:	2300      	movs	r3, #0
 800d998:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800d9aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d9b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d9b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d9ba:	2064      	movs	r0, #100	@ 0x64
 800d9bc:	f7f5 fa0a 	bl	8002dd4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800d9c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d9cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d9ce:	200a      	movs	r0, #10
 800d9d0:	f7f5 fa00 	bl	8002dd4 <HAL_Delay>

  return HAL_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d9de:	b480      	push	{r7}
 800d9e0:	b085      	sub	sp, #20
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800da02:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d109      	bne.n	800da22 <USB_DriveVbus+0x44>
 800da0e:	78fb      	ldrb	r3, [r7, #3]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d106      	bne.n	800da22 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800da1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800da20:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800da28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da2c:	d109      	bne.n	800da42 <USB_DriveVbus+0x64>
 800da2e:	78fb      	ldrb	r3, [r7, #3]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d106      	bne.n	800da42 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	68fa      	ldr	r2, [r7, #12]
 800da38:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800da3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da40:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3714      	adds	r7, #20
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800da5c:	2300      	movs	r3, #0
 800da5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	0c5b      	lsrs	r3, r3, #17
 800da6e:	f003 0303 	and.w	r3, r3, #3
}
 800da72:	4618      	mov	r0, r3
 800da74:	3714      	adds	r7, #20
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr

0800da7e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800da7e:	b480      	push	{r7}
 800da80:	b085      	sub	sp, #20
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	b29b      	uxth	r3, r3
}
 800da94:	4618      	mov	r0, r3
 800da96:	3714      	adds	r7, #20
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b088      	sub	sp, #32
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	4608      	mov	r0, r1
 800daaa:	4611      	mov	r1, r2
 800daac:	461a      	mov	r2, r3
 800daae:	4603      	mov	r3, r0
 800dab0:	70fb      	strb	r3, [r7, #3]
 800dab2:	460b      	mov	r3, r1
 800dab4:	70bb      	strb	r3, [r7, #2]
 800dab6:	4613      	mov	r3, r2
 800dab8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800dac2:	78fb      	ldrb	r3, [r7, #3]
 800dac4:	015a      	lsls	r2, r3, #5
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	4413      	add	r3, r2
 800daca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dace:	461a      	mov	r2, r3
 800dad0:	f04f 33ff 	mov.w	r3, #4294967295
 800dad4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800dad6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dada:	2b03      	cmp	r3, #3
 800dadc:	d87c      	bhi.n	800dbd8 <USB_HC_Init+0x138>
 800dade:	a201      	add	r2, pc, #4	@ (adr r2, 800dae4 <USB_HC_Init+0x44>)
 800dae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae4:	0800daf5 	.word	0x0800daf5
 800dae8:	0800db9b 	.word	0x0800db9b
 800daec:	0800daf5 	.word	0x0800daf5
 800daf0:	0800db5d 	.word	0x0800db5d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800daf4:	78fb      	ldrb	r3, [r7, #3]
 800daf6:	015a      	lsls	r2, r3, #5
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	4413      	add	r3, r2
 800dafc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db00:	461a      	mov	r2, r3
 800db02:	f240 439d 	movw	r3, #1181	@ 0x49d
 800db06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800db08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	da10      	bge.n	800db32 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800db10:	78fb      	ldrb	r3, [r7, #3]
 800db12:	015a      	lsls	r2, r3, #5
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	4413      	add	r3, r2
 800db18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	78fa      	ldrb	r2, [r7, #3]
 800db20:	0151      	lsls	r1, r2, #5
 800db22:	693a      	ldr	r2, [r7, #16]
 800db24:	440a      	add	r2, r1
 800db26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db2e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800db30:	e055      	b.n	800dbde <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4a6f      	ldr	r2, [pc, #444]	@ (800dcf4 <USB_HC_Init+0x254>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d151      	bne.n	800dbde <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800db3a:	78fb      	ldrb	r3, [r7, #3]
 800db3c:	015a      	lsls	r2, r3, #5
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	4413      	add	r3, r2
 800db42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	78fa      	ldrb	r2, [r7, #3]
 800db4a:	0151      	lsls	r1, r2, #5
 800db4c:	693a      	ldr	r2, [r7, #16]
 800db4e:	440a      	add	r2, r1
 800db50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800db58:	60d3      	str	r3, [r2, #12]
      break;
 800db5a:	e040      	b.n	800dbde <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800db5c:	78fb      	ldrb	r3, [r7, #3]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	4413      	add	r3, r2
 800db64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db68:	461a      	mov	r2, r3
 800db6a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800db6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800db70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800db74:	2b00      	cmp	r3, #0
 800db76:	da34      	bge.n	800dbe2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800db78:	78fb      	ldrb	r3, [r7, #3]
 800db7a:	015a      	lsls	r2, r3, #5
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	4413      	add	r3, r2
 800db80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	78fa      	ldrb	r2, [r7, #3]
 800db88:	0151      	lsls	r1, r2, #5
 800db8a:	693a      	ldr	r2, [r7, #16]
 800db8c:	440a      	add	r2, r1
 800db8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800db92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db96:	60d3      	str	r3, [r2, #12]
      }

      break;
 800db98:	e023      	b.n	800dbe2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800db9a:	78fb      	ldrb	r3, [r7, #3]
 800db9c:	015a      	lsls	r2, r3, #5
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	4413      	add	r3, r2
 800dba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dba6:	461a      	mov	r2, r3
 800dba8:	f240 2325 	movw	r3, #549	@ 0x225
 800dbac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dbae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	da17      	bge.n	800dbe6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800dbb6:	78fb      	ldrb	r3, [r7, #3]
 800dbb8:	015a      	lsls	r2, r3, #5
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	78fa      	ldrb	r2, [r7, #3]
 800dbc6:	0151      	lsls	r1, r2, #5
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	440a      	add	r2, r1
 800dbcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dbd0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800dbd4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800dbd6:	e006      	b.n	800dbe6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	77fb      	strb	r3, [r7, #31]
      break;
 800dbdc:	e004      	b.n	800dbe8 <USB_HC_Init+0x148>
      break;
 800dbde:	bf00      	nop
 800dbe0:	e002      	b.n	800dbe8 <USB_HC_Init+0x148>
      break;
 800dbe2:	bf00      	nop
 800dbe4:	e000      	b.n	800dbe8 <USB_HC_Init+0x148>
      break;
 800dbe6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800dbe8:	78fb      	ldrb	r3, [r7, #3]
 800dbea:	015a      	lsls	r2, r3, #5
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	4413      	add	r3, r2
 800dbf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800dbfa:	78fb      	ldrb	r3, [r7, #3]
 800dbfc:	015a      	lsls	r2, r3, #5
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	4413      	add	r3, r2
 800dc02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	78fa      	ldrb	r2, [r7, #3]
 800dc0a:	0151      	lsls	r1, r2, #5
 800dc0c:	693a      	ldr	r2, [r7, #16]
 800dc0e:	440a      	add	r2, r1
 800dc10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc14:	f043 0302 	orr.w	r3, r3, #2
 800dc18:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dc20:	699a      	ldr	r2, [r3, #24]
 800dc22:	78fb      	ldrb	r3, [r7, #3]
 800dc24:	f003 030f 	and.w	r3, r3, #15
 800dc28:	2101      	movs	r1, #1
 800dc2a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc2e:	6939      	ldr	r1, [r7, #16]
 800dc30:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800dc34:	4313      	orrs	r3, r2
 800dc36:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	699b      	ldr	r3, [r3, #24]
 800dc3c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800dc44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	da03      	bge.n	800dc54 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dc4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc50:	61bb      	str	r3, [r7, #24]
 800dc52:	e001      	b.n	800dc58 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800dc54:	2300      	movs	r3, #0
 800dc56:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7ff fef9 	bl	800da50 <USB_GetHostSpeed>
 800dc5e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800dc60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d106      	bne.n	800dc76 <USB_HC_Init+0x1d6>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d003      	beq.n	800dc76 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800dc6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800dc72:	617b      	str	r3, [r7, #20]
 800dc74:	e001      	b.n	800dc7a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800dc76:	2300      	movs	r3, #0
 800dc78:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dc7a:	787b      	ldrb	r3, [r7, #1]
 800dc7c:	059b      	lsls	r3, r3, #22
 800dc7e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dc82:	78bb      	ldrb	r3, [r7, #2]
 800dc84:	02db      	lsls	r3, r3, #11
 800dc86:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dc8a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dc8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dc90:	049b      	lsls	r3, r3, #18
 800dc92:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dc96:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800dc98:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800dc9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dc9e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	431a      	orrs	r2, r3
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dca8:	78fa      	ldrb	r2, [r7, #3]
 800dcaa:	0151      	lsls	r1, r2, #5
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	440a      	add	r2, r1
 800dcb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800dcb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dcb8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800dcba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dcbe:	2b03      	cmp	r3, #3
 800dcc0:	d003      	beq.n	800dcca <USB_HC_Init+0x22a>
 800dcc2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d10f      	bne.n	800dcea <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800dcca:	78fb      	ldrb	r3, [r7, #3]
 800dccc:	015a      	lsls	r2, r3, #5
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	78fa      	ldrb	r2, [r7, #3]
 800dcda:	0151      	lsls	r1, r2, #5
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	440a      	add	r2, r1
 800dce0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dce4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dce8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800dcea:	7ffb      	ldrb	r3, [r7, #31]
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3720      	adds	r7, #32
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	40040000 	.word	0x40040000

0800dcf8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08c      	sub	sp, #48	@ 0x30
 800dcfc:	af02      	add	r7, sp, #8
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	4613      	mov	r3, r2
 800dd04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	785b      	ldrb	r3, [r3, #1]
 800dd0e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800dd10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd14:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	4a5d      	ldr	r2, [pc, #372]	@ (800de90 <USB_HC_StartXfer+0x198>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d12f      	bne.n	800dd7e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800dd1e:	79fb      	ldrb	r3, [r7, #7]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d11c      	bne.n	800dd5e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	7c9b      	ldrb	r3, [r3, #18]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d003      	beq.n	800dd34 <USB_HC_StartXfer+0x3c>
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	7c9b      	ldrb	r3, [r3, #18]
 800dd30:	2b02      	cmp	r3, #2
 800dd32:	d124      	bne.n	800dd7e <USB_HC_StartXfer+0x86>
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	799b      	ldrb	r3, [r3, #6]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d120      	bne.n	800dd7e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	015a      	lsls	r2, r3, #5
 800dd40:	6a3b      	ldr	r3, [r7, #32]
 800dd42:	4413      	add	r3, r2
 800dd44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	69fa      	ldr	r2, [r7, #28]
 800dd4c:	0151      	lsls	r1, r2, #5
 800dd4e:	6a3a      	ldr	r2, [r7, #32]
 800dd50:	440a      	add	r2, r1
 800dd52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd5a:	60d3      	str	r3, [r2, #12]
 800dd5c:	e00f      	b.n	800dd7e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	791b      	ldrb	r3, [r3, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d10b      	bne.n	800dd7e <USB_HC_StartXfer+0x86>
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	795b      	ldrb	r3, [r3, #5]
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d107      	bne.n	800dd7e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	785b      	ldrb	r3, [r3, #1]
 800dd72:	4619      	mov	r1, r3
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f000 fb6b 	bl	800e450 <USB_DoPing>
        return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	e232      	b.n	800e1e4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	799b      	ldrb	r3, [r3, #6]
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	d158      	bne.n	800de38 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800dd86:	2301      	movs	r3, #1
 800dd88:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	78db      	ldrb	r3, [r3, #3]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d007      	beq.n	800dda2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dd92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dd94:	68ba      	ldr	r2, [r7, #8]
 800dd96:	8a92      	ldrh	r2, [r2, #20]
 800dd98:	fb03 f202 	mul.w	r2, r3, r2
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	61da      	str	r2, [r3, #28]
 800dda0:	e07c      	b.n	800de9c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	7c9b      	ldrb	r3, [r3, #18]
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d130      	bne.n	800de0c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	6a1b      	ldr	r3, [r3, #32]
 800ddae:	2bbc      	cmp	r3, #188	@ 0xbc
 800ddb0:	d918      	bls.n	800dde4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	8a9b      	ldrh	r3, [r3, #20]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	69da      	ldr	r2, [r3, #28]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d003      	beq.n	800ddd4 <USB_HC_StartXfer+0xdc>
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	2b02      	cmp	r3, #2
 800ddd2:	d103      	bne.n	800dddc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	2202      	movs	r2, #2
 800ddd8:	60da      	str	r2, [r3, #12]
 800ddda:	e05f      	b.n	800de9c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	2201      	movs	r2, #1
 800dde0:	60da      	str	r2, [r3, #12]
 800dde2:	e05b      	b.n	800de9c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	6a1a      	ldr	r2, [r3, #32]
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d007      	beq.n	800de04 <USB_HC_StartXfer+0x10c>
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	2b02      	cmp	r3, #2
 800ddfa:	d003      	beq.n	800de04 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	2204      	movs	r2, #4
 800de00:	60da      	str	r2, [r3, #12]
 800de02:	e04b      	b.n	800de9c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	2203      	movs	r2, #3
 800de08:	60da      	str	r2, [r3, #12]
 800de0a:	e047      	b.n	800de9c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800de0c:	79fb      	ldrb	r3, [r7, #7]
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d10d      	bne.n	800de2e <USB_HC_StartXfer+0x136>
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	68ba      	ldr	r2, [r7, #8]
 800de18:	8a92      	ldrh	r2, [r2, #20]
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d907      	bls.n	800de2e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800de1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de20:	68ba      	ldr	r2, [r7, #8]
 800de22:	8a92      	ldrh	r2, [r2, #20]
 800de24:	fb03 f202 	mul.w	r2, r3, r2
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	61da      	str	r2, [r3, #28]
 800de2c:	e036      	b.n	800de9c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	6a1a      	ldr	r2, [r3, #32]
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	61da      	str	r2, [r3, #28]
 800de36:	e031      	b.n	800de9c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	6a1b      	ldr	r3, [r3, #32]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d018      	beq.n	800de72 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	6a1b      	ldr	r3, [r3, #32]
 800de44:	68ba      	ldr	r2, [r7, #8]
 800de46:	8a92      	ldrh	r2, [r2, #20]
 800de48:	4413      	add	r3, r2
 800de4a:	3b01      	subs	r3, #1
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	8a92      	ldrh	r2, [r2, #20]
 800de50:	fbb3 f3f2 	udiv	r3, r3, r2
 800de54:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800de56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800de58:	8b7b      	ldrh	r3, [r7, #26]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d90b      	bls.n	800de76 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800de5e:	8b7b      	ldrh	r3, [r7, #26]
 800de60:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800de62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	8a92      	ldrh	r2, [r2, #20]
 800de68:	fb03 f202 	mul.w	r2, r3, r2
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	61da      	str	r2, [r3, #28]
 800de70:	e001      	b.n	800de76 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800de72:	2301      	movs	r3, #1
 800de74:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	78db      	ldrb	r3, [r3, #3]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d00a      	beq.n	800de94 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800de7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	8a92      	ldrh	r2, [r2, #20]
 800de84:	fb03 f202 	mul.w	r2, r3, r2
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	61da      	str	r2, [r3, #28]
 800de8c:	e006      	b.n	800de9c <USB_HC_StartXfer+0x1a4>
 800de8e:	bf00      	nop
 800de90:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	6a1a      	ldr	r2, [r3, #32]
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	69db      	ldr	r3, [r3, #28]
 800dea0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dea4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dea6:	04d9      	lsls	r1, r3, #19
 800dea8:	4ba3      	ldr	r3, [pc, #652]	@ (800e138 <USB_HC_StartXfer+0x440>)
 800deaa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800deac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	7d9b      	ldrb	r3, [r3, #22]
 800deb2:	075b      	lsls	r3, r3, #29
 800deb4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800deb8:	69f9      	ldr	r1, [r7, #28]
 800deba:	0148      	lsls	r0, r1, #5
 800debc:	6a39      	ldr	r1, [r7, #32]
 800debe:	4401      	add	r1, r0
 800dec0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dec4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dec6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dec8:	79fb      	ldrb	r3, [r7, #7]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d009      	beq.n	800dee2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	6999      	ldr	r1, [r3, #24]
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	015a      	lsls	r2, r3, #5
 800ded6:	6a3b      	ldr	r3, [r7, #32]
 800ded8:	4413      	add	r3, r2
 800deda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dede:	460a      	mov	r2, r1
 800dee0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dee2:	6a3b      	ldr	r3, [r7, #32]
 800dee4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	f003 0301 	and.w	r3, r3, #1
 800deee:	2b00      	cmp	r3, #0
 800def0:	bf0c      	ite	eq
 800def2:	2301      	moveq	r3, #1
 800def4:	2300      	movne	r3, #0
 800def6:	b2db      	uxtb	r3, r3
 800def8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	015a      	lsls	r2, r3, #5
 800defe:	6a3b      	ldr	r3, [r7, #32]
 800df00:	4413      	add	r3, r2
 800df02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	69fa      	ldr	r2, [r7, #28]
 800df0a:	0151      	lsls	r1, r2, #5
 800df0c:	6a3a      	ldr	r2, [r7, #32]
 800df0e:	440a      	add	r2, r1
 800df10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800df18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	015a      	lsls	r2, r3, #5
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	4413      	add	r3, r2
 800df22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	7e7b      	ldrb	r3, [r7, #25]
 800df2a:	075b      	lsls	r3, r3, #29
 800df2c:	69f9      	ldr	r1, [r7, #28]
 800df2e:	0148      	lsls	r0, r1, #5
 800df30:	6a39      	ldr	r1, [r7, #32]
 800df32:	4401      	add	r1, r0
 800df34:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800df38:	4313      	orrs	r3, r2
 800df3a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	799b      	ldrb	r3, [r3, #6]
 800df40:	2b01      	cmp	r3, #1
 800df42:	f040 80c3 	bne.w	800e0cc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	7c5b      	ldrb	r3, [r3, #17]
 800df4a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800df50:	4313      	orrs	r3, r2
 800df52:	69fa      	ldr	r2, [r7, #28]
 800df54:	0151      	lsls	r1, r2, #5
 800df56:	6a3a      	ldr	r2, [r7, #32]
 800df58:	440a      	add	r2, r1
 800df5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800df5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800df62:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	015a      	lsls	r2, r3, #5
 800df68:	6a3b      	ldr	r3, [r7, #32]
 800df6a:	4413      	add	r3, r2
 800df6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	69fa      	ldr	r2, [r7, #28]
 800df74:	0151      	lsls	r1, r2, #5
 800df76:	6a3a      	ldr	r2, [r7, #32]
 800df78:	440a      	add	r2, r1
 800df7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800df82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	79db      	ldrb	r3, [r3, #7]
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d123      	bne.n	800dfd4 <USB_HC_StartXfer+0x2dc>
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	78db      	ldrb	r3, [r3, #3]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d11f      	bne.n	800dfd4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	015a      	lsls	r2, r3, #5
 800df98:	6a3b      	ldr	r3, [r7, #32]
 800df9a:	4413      	add	r3, r2
 800df9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	69fa      	ldr	r2, [r7, #28]
 800dfa4:	0151      	lsls	r1, r2, #5
 800dfa6:	6a3a      	ldr	r2, [r7, #32]
 800dfa8:	440a      	add	r2, r1
 800dfaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dfae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dfb2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	015a      	lsls	r2, r3, #5
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
 800dfba:	4413      	add	r3, r2
 800dfbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfc0:	68db      	ldr	r3, [r3, #12]
 800dfc2:	69fa      	ldr	r2, [r7, #28]
 800dfc4:	0151      	lsls	r1, r2, #5
 800dfc6:	6a3a      	ldr	r2, [r7, #32]
 800dfc8:	440a      	add	r2, r1
 800dfca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dfce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfd2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	7c9b      	ldrb	r3, [r3, #18]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d003      	beq.n	800dfe4 <USB_HC_StartXfer+0x2ec>
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	7c9b      	ldrb	r3, [r3, #18]
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d117      	bne.n	800e014 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d113      	bne.n	800e014 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	78db      	ldrb	r3, [r3, #3]
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d10f      	bne.n	800e014 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	015a      	lsls	r2, r3, #5
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	4413      	add	r3, r2
 800dffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	69fa      	ldr	r2, [r7, #28]
 800e004:	0151      	lsls	r1, r2, #5
 800e006:	6a3a      	ldr	r2, [r7, #32]
 800e008:	440a      	add	r2, r1
 800e00a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e00e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e012:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	7c9b      	ldrb	r3, [r3, #18]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d162      	bne.n	800e0e2 <USB_HC_StartXfer+0x3ea>
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	78db      	ldrb	r3, [r3, #3]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d15e      	bne.n	800e0e2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	3b01      	subs	r3, #1
 800e02a:	2b03      	cmp	r3, #3
 800e02c:	d858      	bhi.n	800e0e0 <USB_HC_StartXfer+0x3e8>
 800e02e:	a201      	add	r2, pc, #4	@ (adr r2, 800e034 <USB_HC_StartXfer+0x33c>)
 800e030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e034:	0800e045 	.word	0x0800e045
 800e038:	0800e067 	.word	0x0800e067
 800e03c:	0800e089 	.word	0x0800e089
 800e040:	0800e0ab 	.word	0x0800e0ab
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	015a      	lsls	r2, r3, #5
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	4413      	add	r3, r2
 800e04c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	69fa      	ldr	r2, [r7, #28]
 800e054:	0151      	lsls	r1, r2, #5
 800e056:	6a3a      	ldr	r2, [r7, #32]
 800e058:	440a      	add	r2, r1
 800e05a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e05e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e062:	6053      	str	r3, [r2, #4]
          break;
 800e064:	e03d      	b.n	800e0e2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	015a      	lsls	r2, r3, #5
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	4413      	add	r3, r2
 800e06e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	69fa      	ldr	r2, [r7, #28]
 800e076:	0151      	lsls	r1, r2, #5
 800e078:	6a3a      	ldr	r2, [r7, #32]
 800e07a:	440a      	add	r2, r1
 800e07c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e080:	f043 030e 	orr.w	r3, r3, #14
 800e084:	6053      	str	r3, [r2, #4]
          break;
 800e086:	e02c      	b.n	800e0e2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	015a      	lsls	r2, r3, #5
 800e08c:	6a3b      	ldr	r3, [r7, #32]
 800e08e:	4413      	add	r3, r2
 800e090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	69fa      	ldr	r2, [r7, #28]
 800e098:	0151      	lsls	r1, r2, #5
 800e09a:	6a3a      	ldr	r2, [r7, #32]
 800e09c:	440a      	add	r2, r1
 800e09e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e0a6:	6053      	str	r3, [r2, #4]
          break;
 800e0a8:	e01b      	b.n	800e0e2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	015a      	lsls	r2, r3, #5
 800e0ae:	6a3b      	ldr	r3, [r7, #32]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	69fa      	ldr	r2, [r7, #28]
 800e0ba:	0151      	lsls	r1, r2, #5
 800e0bc:	6a3a      	ldr	r2, [r7, #32]
 800e0be:	440a      	add	r2, r1
 800e0c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e0c8:	6053      	str	r3, [r2, #4]
          break;
 800e0ca:	e00a      	b.n	800e0e2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	015a      	lsls	r2, r3, #5
 800e0d0:	6a3b      	ldr	r3, [r7, #32]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0d8:	461a      	mov	r2, r3
 800e0da:	2300      	movs	r3, #0
 800e0dc:	6053      	str	r3, [r2, #4]
 800e0de:	e000      	b.n	800e0e2 <USB_HC_StartXfer+0x3ea>
          break;
 800e0e0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	015a      	lsls	r2, r3, #5
 800e0e6:	6a3b      	ldr	r3, [r7, #32]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e0f8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	78db      	ldrb	r3, [r3, #3]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d004      	beq.n	800e10c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e108:	613b      	str	r3, [r7, #16]
 800e10a:	e003      	b.n	800e114 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e112:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e11a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	015a      	lsls	r2, r3, #5
 800e120:	6a3b      	ldr	r3, [r7, #32]
 800e122:	4413      	add	r3, r2
 800e124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e128:	461a      	mov	r2, r3
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e12e:	79fb      	ldrb	r3, [r7, #7]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d003      	beq.n	800e13c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800e134:	2300      	movs	r3, #0
 800e136:	e055      	b.n	800e1e4 <USB_HC_StartXfer+0x4ec>
 800e138:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	78db      	ldrb	r3, [r3, #3]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d14e      	bne.n	800e1e2 <USB_HC_StartXfer+0x4ea>
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	6a1b      	ldr	r3, [r3, #32]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d04a      	beq.n	800e1e2 <USB_HC_StartXfer+0x4ea>
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	79db      	ldrb	r3, [r3, #7]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d146      	bne.n	800e1e2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	7c9b      	ldrb	r3, [r3, #18]
 800e158:	2b03      	cmp	r3, #3
 800e15a:	d831      	bhi.n	800e1c0 <USB_HC_StartXfer+0x4c8>
 800e15c:	a201      	add	r2, pc, #4	@ (adr r2, 800e164 <USB_HC_StartXfer+0x46c>)
 800e15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e162:	bf00      	nop
 800e164:	0800e175 	.word	0x0800e175
 800e168:	0800e199 	.word	0x0800e199
 800e16c:	0800e175 	.word	0x0800e175
 800e170:	0800e199 	.word	0x0800e199
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	3303      	adds	r3, #3
 800e17a:	089b      	lsrs	r3, r3, #2
 800e17c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e17e:	8afa      	ldrh	r2, [r7, #22]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e184:	b29b      	uxth	r3, r3
 800e186:	429a      	cmp	r2, r3
 800e188:	d91c      	bls.n	800e1c4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	699b      	ldr	r3, [r3, #24]
 800e18e:	f043 0220 	orr.w	r2, r3, #32
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	619a      	str	r2, [r3, #24]
        }
        break;
 800e196:	e015      	b.n	800e1c4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	6a1b      	ldr	r3, [r3, #32]
 800e19c:	3303      	adds	r3, #3
 800e19e:	089b      	lsrs	r3, r3, #2
 800e1a0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e1a2:	8afa      	ldrh	r2, [r7, #22]
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e1aa:	691b      	ldr	r3, [r3, #16]
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d90a      	bls.n	800e1c8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	699b      	ldr	r3, [r3, #24]
 800e1b6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	619a      	str	r2, [r3, #24]
        }
        break;
 800e1be:	e003      	b.n	800e1c8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800e1c0:	bf00      	nop
 800e1c2:	e002      	b.n	800e1ca <USB_HC_StartXfer+0x4d2>
        break;
 800e1c4:	bf00      	nop
 800e1c6:	e000      	b.n	800e1ca <USB_HC_StartXfer+0x4d2>
        break;
 800e1c8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	6999      	ldr	r1, [r3, #24]
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	785a      	ldrb	r2, [r3, #1]
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	6a1b      	ldr	r3, [r3, #32]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	2000      	movs	r0, #0
 800e1da:	9000      	str	r0, [sp, #0]
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f7ff f9d5 	bl	800d58c <USB_WritePacket>
  }

  return HAL_OK;
 800e1e2:	2300      	movs	r3, #0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3728      	adds	r7, #40	@ 0x28
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e1fe:	695b      	ldr	r3, [r3, #20]
 800e200:	b29b      	uxth	r3, r3
}
 800e202:	4618      	mov	r0, r3
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr

0800e20e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e20e:	b480      	push	{r7}
 800e210:	b089      	sub	sp, #36	@ 0x24
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
 800e216:	460b      	mov	r3, r1
 800e218:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e21e:	78fb      	ldrb	r3, [r7, #3]
 800e220:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e222:	2300      	movs	r3, #0
 800e224:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	015a      	lsls	r2, r3, #5
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	4413      	add	r3, r2
 800e22e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	0c9b      	lsrs	r3, r3, #18
 800e236:	f003 0303 	and.w	r3, r3, #3
 800e23a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	015a      	lsls	r2, r3, #5
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	4413      	add	r3, r2
 800e244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	0fdb      	lsrs	r3, r3, #31
 800e24c:	f003 0301 	and.w	r3, r3, #1
 800e250:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	015a      	lsls	r2, r3, #5
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	4413      	add	r3, r2
 800e25a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	0fdb      	lsrs	r3, r3, #31
 800e262:	f003 0301 	and.w	r3, r3, #1
 800e266:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	f003 0320 	and.w	r3, r3, #32
 800e270:	2b20      	cmp	r3, #32
 800e272:	d10d      	bne.n	800e290 <USB_HC_Halt+0x82>
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d10a      	bne.n	800e290 <USB_HC_Halt+0x82>
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d005      	beq.n	800e28c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	2b01      	cmp	r3, #1
 800e284:	d002      	beq.n	800e28c <USB_HC_Halt+0x7e>
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	2b03      	cmp	r3, #3
 800e28a:	d101      	bne.n	800e290 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	e0d8      	b.n	800e442 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <USB_HC_Halt+0x8e>
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	2b02      	cmp	r3, #2
 800e29a:	d173      	bne.n	800e384 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	015a      	lsls	r2, r3, #5
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	69ba      	ldr	r2, [r7, #24]
 800e2ac:	0151      	lsls	r1, r2, #5
 800e2ae:	69fa      	ldr	r2, [r7, #28]
 800e2b0:	440a      	add	r2, r1
 800e2b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e2b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	f003 0320 	and.w	r3, r3, #32
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d14a      	bne.n	800e35e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d133      	bne.n	800e33c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	015a      	lsls	r2, r3, #5
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	4413      	add	r3, r2
 800e2dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	69ba      	ldr	r2, [r7, #24]
 800e2e4:	0151      	lsls	r1, r2, #5
 800e2e6:	69fa      	ldr	r2, [r7, #28]
 800e2e8:	440a      	add	r2, r1
 800e2ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e2ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e2f2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	015a      	lsls	r2, r3, #5
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	69ba      	ldr	r2, [r7, #24]
 800e304:	0151      	lsls	r1, r2, #5
 800e306:	69fa      	ldr	r2, [r7, #28]
 800e308:	440a      	add	r2, r1
 800e30a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e30e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e312:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	3301      	adds	r3, #1
 800e318:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e320:	d82e      	bhi.n	800e380 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	015a      	lsls	r2, r3, #5
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	4413      	add	r3, r2
 800e32a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e338:	d0ec      	beq.n	800e314 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e33a:	e081      	b.n	800e440 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	015a      	lsls	r2, r3, #5
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	4413      	add	r3, r2
 800e344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	69ba      	ldr	r2, [r7, #24]
 800e34c:	0151      	lsls	r1, r2, #5
 800e34e:	69fa      	ldr	r2, [r7, #28]
 800e350:	440a      	add	r2, r1
 800e352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e356:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e35a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e35c:	e070      	b.n	800e440 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	015a      	lsls	r2, r3, #5
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	4413      	add	r3, r2
 800e366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	69ba      	ldr	r2, [r7, #24]
 800e36e:	0151      	lsls	r1, r2, #5
 800e370:	69fa      	ldr	r2, [r7, #28]
 800e372:	440a      	add	r2, r1
 800e374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e378:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e37c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e37e:	e05f      	b.n	800e440 <USB_HC_Halt+0x232>
            break;
 800e380:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e382:	e05d      	b.n	800e440 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	015a      	lsls	r2, r3, #5
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	4413      	add	r3, r2
 800e38c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	69ba      	ldr	r2, [r7, #24]
 800e394:	0151      	lsls	r1, r2, #5
 800e396:	69fa      	ldr	r2, [r7, #28]
 800e398:	440a      	add	r2, r1
 800e39a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e39e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e3a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d133      	bne.n	800e41c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	015a      	lsls	r2, r3, #5
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	69ba      	ldr	r2, [r7, #24]
 800e3c4:	0151      	lsls	r1, r2, #5
 800e3c6:	69fa      	ldr	r2, [r7, #28]
 800e3c8:	440a      	add	r2, r1
 800e3ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e3d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	015a      	lsls	r2, r3, #5
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	69ba      	ldr	r2, [r7, #24]
 800e3e4:	0151      	lsls	r1, r2, #5
 800e3e6:	69fa      	ldr	r2, [r7, #28]
 800e3e8:	440a      	add	r2, r1
 800e3ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e3f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e400:	d81d      	bhi.n	800e43e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	015a      	lsls	r2, r3, #5
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	4413      	add	r3, r2
 800e40a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e414:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e418:	d0ec      	beq.n	800e3f4 <USB_HC_Halt+0x1e6>
 800e41a:	e011      	b.n	800e440 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	015a      	lsls	r2, r3, #5
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	4413      	add	r3, r2
 800e424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	69ba      	ldr	r2, [r7, #24]
 800e42c:	0151      	lsls	r1, r2, #5
 800e42e:	69fa      	ldr	r2, [r7, #28]
 800e430:	440a      	add	r2, r1
 800e432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e436:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e43a:	6013      	str	r3, [r2, #0]
 800e43c:	e000      	b.n	800e440 <USB_HC_Halt+0x232>
          break;
 800e43e:	bf00      	nop
    }
  }

  return HAL_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3724      	adds	r7, #36	@ 0x24
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr
	...

0800e450 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e450:	b480      	push	{r7}
 800e452:	b087      	sub	sp, #28
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	460b      	mov	r3, r1
 800e45a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e460:	78fb      	ldrb	r3, [r7, #3]
 800e462:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e464:	2301      	movs	r3, #1
 800e466:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	04da      	lsls	r2, r3, #19
 800e46c:	4b15      	ldr	r3, [pc, #84]	@ (800e4c4 <USB_DoPing+0x74>)
 800e46e:	4013      	ands	r3, r2
 800e470:	693a      	ldr	r2, [r7, #16]
 800e472:	0151      	lsls	r1, r2, #5
 800e474:	697a      	ldr	r2, [r7, #20]
 800e476:	440a      	add	r2, r1
 800e478:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e47c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e480:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	015a      	lsls	r2, r3, #5
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	4413      	add	r3, r2
 800e48a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e498:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e4a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	015a      	lsls	r2, r3, #5
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	371c      	adds	r7, #28
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	1ff80000 	.word	0x1ff80000

0800e4c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7fe ff98 	bl	800d412 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e4e2:	2110      	movs	r1, #16
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7fe fff1 	bl	800d4cc <USB_FlushTxFifo>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d001      	beq.n	800e4f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f7ff f81b 	bl	800d530 <USB_FlushRxFifo>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d001      	beq.n	800e504 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e500:	2301      	movs	r3, #1
 800e502:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e504:	2300      	movs	r3, #0
 800e506:	61bb      	str	r3, [r7, #24]
 800e508:	e01f      	b.n	800e54a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	015a      	lsls	r2, r3, #5
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	4413      	add	r3, r2
 800e512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e520:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e528:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e530:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e532:	69bb      	ldr	r3, [r7, #24]
 800e534:	015a      	lsls	r2, r3, #5
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	4413      	add	r3, r2
 800e53a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e53e:	461a      	mov	r2, r3
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	3301      	adds	r3, #1
 800e548:	61bb      	str	r3, [r7, #24]
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	2b0f      	cmp	r3, #15
 800e54e:	d9dc      	bls.n	800e50a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e550:	2300      	movs	r3, #0
 800e552:	61bb      	str	r3, [r7, #24]
 800e554:	e034      	b.n	800e5c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	015a      	lsls	r2, r3, #5
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	4413      	add	r3, r2
 800e55e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e56c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e574:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e57c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	015a      	lsls	r2, r3, #5
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	4413      	add	r3, r2
 800e586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e58a:	461a      	mov	r2, r3
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	3301      	adds	r3, #1
 800e594:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e59c:	d80c      	bhi.n	800e5b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	015a      	lsls	r2, r3, #5
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5b4:	d0ec      	beq.n	800e590 <USB_StopHost+0xc8>
 800e5b6:	e000      	b.n	800e5ba <USB_StopHost+0xf2>
        break;
 800e5b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	61bb      	str	r3, [r7, #24]
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	2b0f      	cmp	r3, #15
 800e5c4:	d9c7      	bls.n	800e556 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7fe ff07 	bl	800d3f0 <USB_EnableGlobalInt>

  return ret;
 800e5e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3720      	adds	r7, #32
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e5f0:	4904      	ldr	r1, [pc, #16]	@ (800e604 <MX_FATFS_Init+0x18>)
 800e5f2:	4805      	ldr	r0, [pc, #20]	@ (800e608 <MX_FATFS_Init+0x1c>)
 800e5f4:	f002 f9bc 	bl	8010970 <FATFS_LinkDriver>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	4b03      	ldr	r3, [pc, #12]	@ (800e60c <MX_FATFS_Init+0x20>)
 800e5fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e600:	bf00      	nop
 800e602:	bd80      	pop	{r7, pc}
 800e604:	20000b28 	.word	0x20000b28
 800e608:	080115f8 	.word	0x080115f8
 800e60c:	20000b24 	.word	0x20000b24

0800e610 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	4603      	mov	r3, r0
 800e618:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e61a:	4b0b      	ldr	r3, [pc, #44]	@ (800e648 <SD_CheckStatus+0x38>)
 800e61c:	2201      	movs	r2, #1
 800e61e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e620:	f002 fb64 	bl	8010cec <BSP_SD_GetCardState>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d107      	bne.n	800e63a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e62a:	4b07      	ldr	r3, [pc, #28]	@ (800e648 <SD_CheckStatus+0x38>)
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	f023 0301 	bic.w	r3, r3, #1
 800e634:	b2da      	uxtb	r2, r3
 800e636:	4b04      	ldr	r3, [pc, #16]	@ (800e648 <SD_CheckStatus+0x38>)
 800e638:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e63a:	4b03      	ldr	r3, [pc, #12]	@ (800e648 <SD_CheckStatus+0x38>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	b2db      	uxtb	r3, r3
}
 800e640:	4618      	mov	r0, r3
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	20000009 	.word	0x20000009

0800e64c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	4603      	mov	r3, r0
 800e654:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e656:	4b0b      	ldr	r3, [pc, #44]	@ (800e684 <SD_initialize+0x38>)
 800e658:	2201      	movs	r2, #1
 800e65a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e65c:	f002 f998 	bl	8010990 <BSP_SD_Init>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d107      	bne.n	800e676 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e666:	79fb      	ldrb	r3, [r7, #7]
 800e668:	4618      	mov	r0, r3
 800e66a:	f7ff ffd1 	bl	800e610 <SD_CheckStatus>
 800e66e:	4603      	mov	r3, r0
 800e670:	461a      	mov	r2, r3
 800e672:	4b04      	ldr	r3, [pc, #16]	@ (800e684 <SD_initialize+0x38>)
 800e674:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e676:	4b03      	ldr	r3, [pc, #12]	@ (800e684 <SD_initialize+0x38>)
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	b2db      	uxtb	r3, r3
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	20000009 	.word	0x20000009

0800e688 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	4603      	mov	r3, r0
 800e690:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e692:	79fb      	ldrb	r3, [r7, #7]
 800e694:	4618      	mov	r0, r3
 800e696:	f7ff ffbb 	bl	800e610 <SD_CheckStatus>
 800e69a:	4603      	mov	r3, r0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b086      	sub	sp, #24
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60b9      	str	r1, [r7, #8]
 800e6ac:	607a      	str	r2, [r7, #4]
 800e6ae:	603b      	str	r3, [r7, #0]
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6bc:	683a      	ldr	r2, [r7, #0]
 800e6be:	6879      	ldr	r1, [r7, #4]
 800e6c0:	68b8      	ldr	r0, [r7, #8]
 800e6c2:	f002 f9c7 	bl	8010a54 <BSP_SD_ReadBlocks>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d107      	bne.n	800e6dc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e6cc:	bf00      	nop
 800e6ce:	f002 fb0d 	bl	8010cec <BSP_SD_GetCardState>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1fa      	bne.n	800e6ce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e6dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b086      	sub	sp, #24
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	607a      	str	r2, [r7, #4]
 800e6f0:	603b      	str	r3, [r7, #0]
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fe:	683a      	ldr	r2, [r7, #0]
 800e700:	6879      	ldr	r1, [r7, #4]
 800e702:	68b8      	ldr	r0, [r7, #8]
 800e704:	f002 f9c2 	bl	8010a8c <BSP_SD_WriteBlocks>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d107      	bne.n	800e71e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e70e:	bf00      	nop
 800e710:	f002 faec 	bl	8010cec <BSP_SD_GetCardState>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d1fa      	bne.n	800e710 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08c      	sub	sp, #48	@ 0x30
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	603a      	str	r2, [r7, #0]
 800e732:	71fb      	strb	r3, [r7, #7]
 800e734:	460b      	mov	r3, r1
 800e736:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e738:	2301      	movs	r3, #1
 800e73a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e73e:	4b25      	ldr	r3, [pc, #148]	@ (800e7d4 <SD_ioctl+0xac>)
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	b2db      	uxtb	r3, r3
 800e744:	f003 0301 	and.w	r3, r3, #1
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d001      	beq.n	800e750 <SD_ioctl+0x28>
 800e74c:	2303      	movs	r3, #3
 800e74e:	e03c      	b.n	800e7ca <SD_ioctl+0xa2>

  switch (cmd)
 800e750:	79bb      	ldrb	r3, [r7, #6]
 800e752:	2b03      	cmp	r3, #3
 800e754:	d834      	bhi.n	800e7c0 <SD_ioctl+0x98>
 800e756:	a201      	add	r2, pc, #4	@ (adr r2, 800e75c <SD_ioctl+0x34>)
 800e758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e75c:	0800e76d 	.word	0x0800e76d
 800e760:	0800e775 	.word	0x0800e775
 800e764:	0800e78d 	.word	0x0800e78d
 800e768:	0800e7a7 	.word	0x0800e7a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e76c:	2300      	movs	r3, #0
 800e76e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e772:	e028      	b.n	800e7c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e774:	f107 030c 	add.w	r3, r7, #12
 800e778:	4618      	mov	r0, r3
 800e77a:	f002 fac7 	bl	8010d0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e77e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e784:	2300      	movs	r3, #0
 800e786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e78a:	e01c      	b.n	800e7c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e78c:	f107 030c 	add.w	r3, r7, #12
 800e790:	4618      	mov	r0, r3
 800e792:	f002 fabb 	bl	8010d0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e798:	b29a      	uxth	r2, r3
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e7a4:	e00f      	b.n	800e7c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7a6:	f107 030c 	add.w	r3, r7, #12
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f002 faae 	bl	8010d0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b2:	0a5a      	lsrs	r2, r3, #9
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e7be:	e002      	b.n	800e7c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e7c0:	2304      	movs	r3, #4
 800e7c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800e7c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3730      	adds	r7, #48	@ 0x30
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	20000009 	.word	0x20000009

0800e7d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e7d8:	b590      	push	{r4, r7, lr}
 800e7da:	b089      	sub	sp, #36	@ 0x24
 800e7dc:	af04      	add	r7, sp, #16
 800e7de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	2202      	movs	r2, #2
 800e7e4:	2102      	movs	r1, #2
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f000 fc85 	bl	800f0f6 <USBH_FindInterface>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e7f0:	7bfb      	ldrb	r3, [r7, #15]
 800e7f2:	2bff      	cmp	r3, #255	@ 0xff
 800e7f4:	d002      	beq.n	800e7fc <USBH_CDC_InterfaceInit+0x24>
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d901      	bls.n	800e800 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	e13d      	b.n	800ea7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e800:	7bfb      	ldrb	r3, [r7, #15]
 800e802:	4619      	mov	r1, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 fc5a 	bl	800f0be <USBH_SelectInterface>
 800e80a:	4603      	mov	r3, r0
 800e80c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e80e:	7bbb      	ldrb	r3, [r7, #14]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d001      	beq.n	800e818 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e814:	2302      	movs	r3, #2
 800e816:	e131      	b.n	800ea7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800e81e:	2050      	movs	r0, #80	@ 0x50
 800e820:	f002 fd80 	bl	8011324 <malloc>
 800e824:	4603      	mov	r3, r0
 800e826:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e82e:	69db      	ldr	r3, [r3, #28]
 800e830:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d101      	bne.n	800e83c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e838:	2302      	movs	r3, #2
 800e83a:	e11f      	b.n	800ea7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e83c:	2250      	movs	r2, #80	@ 0x50
 800e83e:	2100      	movs	r1, #0
 800e840:	68b8      	ldr	r0, [r7, #8]
 800e842:	f002 fe2d 	bl	80114a0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e846:	7bfb      	ldrb	r3, [r7, #15]
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	211a      	movs	r1, #26
 800e84c:	fb01 f303 	mul.w	r3, r1, r3
 800e850:	4413      	add	r3, r2
 800e852:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	b25b      	sxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	da15      	bge.n	800e88a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e85e:	7bfb      	ldrb	r3, [r7, #15]
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	211a      	movs	r1, #26
 800e864:	fb01 f303 	mul.w	r3, r1, r3
 800e868:	4413      	add	r3, r2
 800e86a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e86e:	781a      	ldrb	r2, [r3, #0]
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	211a      	movs	r1, #26
 800e87a:	fb01 f303 	mul.w	r3, r1, r3
 800e87e:	4413      	add	r3, r2
 800e880:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e884:	881a      	ldrh	r2, [r3, #0]
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	785b      	ldrb	r3, [r3, #1]
 800e88e:	4619      	mov	r1, r3
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f001 ffbe 	bl	8010812 <USBH_AllocPipe>
 800e896:	4603      	mov	r3, r0
 800e898:	461a      	mov	r2, r3
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	7819      	ldrb	r1, [r3, #0]
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	7858      	ldrb	r0, [r3, #1]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	8952      	ldrh	r2, [r2, #10]
 800e8b6:	9202      	str	r2, [sp, #8]
 800e8b8:	2203      	movs	r2, #3
 800e8ba:	9201      	str	r2, [sp, #4]
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	4623      	mov	r3, r4
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f001 ff76 	bl	80107b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f002 fca1 	bl	8011218 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	2200      	movs	r2, #0
 800e8da:	210a      	movs	r1, #10
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 fc0a 	bl	800f0f6 <USBH_FindInterface>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e8e6:	7bfb      	ldrb	r3, [r7, #15]
 800e8e8:	2bff      	cmp	r3, #255	@ 0xff
 800e8ea:	d002      	beq.n	800e8f2 <USBH_CDC_InterfaceInit+0x11a>
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	d901      	bls.n	800e8f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e8f2:	2302      	movs	r3, #2
 800e8f4:	e0c2      	b.n	800ea7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e8f6:	7bfb      	ldrb	r3, [r7, #15]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	211a      	movs	r1, #26
 800e8fc:	fb01 f303 	mul.w	r3, r1, r3
 800e900:	4413      	add	r3, r2
 800e902:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	b25b      	sxtb	r3, r3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	da16      	bge.n	800e93c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e90e:	7bfb      	ldrb	r3, [r7, #15]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	211a      	movs	r1, #26
 800e914:	fb01 f303 	mul.w	r3, r1, r3
 800e918:	4413      	add	r3, r2
 800e91a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e91e:	781a      	ldrb	r2, [r3, #0]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e924:	7bfb      	ldrb	r3, [r7, #15]
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	211a      	movs	r1, #26
 800e92a:	fb01 f303 	mul.w	r3, r1, r3
 800e92e:	4413      	add	r3, r2
 800e930:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e934:	881a      	ldrh	r2, [r3, #0]
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	835a      	strh	r2, [r3, #26]
 800e93a:	e015      	b.n	800e968 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e93c:	7bfb      	ldrb	r3, [r7, #15]
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	211a      	movs	r1, #26
 800e942:	fb01 f303 	mul.w	r3, r1, r3
 800e946:	4413      	add	r3, r2
 800e948:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e94c:	781a      	ldrb	r2, [r3, #0]
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e952:	7bfb      	ldrb	r3, [r7, #15]
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	211a      	movs	r1, #26
 800e958:	fb01 f303 	mul.w	r3, r1, r3
 800e95c:	4413      	add	r3, r2
 800e95e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e962:	881a      	ldrh	r2, [r3, #0]
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800e968:	7bfb      	ldrb	r3, [r7, #15]
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	211a      	movs	r1, #26
 800e96e:	fb01 f303 	mul.w	r3, r1, r3
 800e972:	4413      	add	r3, r2
 800e974:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	b25b      	sxtb	r3, r3
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	da16      	bge.n	800e9ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e980:	7bfb      	ldrb	r3, [r7, #15]
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	211a      	movs	r1, #26
 800e986:	fb01 f303 	mul.w	r3, r1, r3
 800e98a:	4413      	add	r3, r2
 800e98c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e990:	781a      	ldrb	r2, [r3, #0]
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e996:	7bfb      	ldrb	r3, [r7, #15]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	211a      	movs	r1, #26
 800e99c:	fb01 f303 	mul.w	r3, r1, r3
 800e9a0:	4413      	add	r3, r2
 800e9a2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800e9a6:	881a      	ldrh	r2, [r3, #0]
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	835a      	strh	r2, [r3, #26]
 800e9ac:	e015      	b.n	800e9da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e9ae:	7bfb      	ldrb	r3, [r7, #15]
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	211a      	movs	r1, #26
 800e9b4:	fb01 f303 	mul.w	r3, r1, r3
 800e9b8:	4413      	add	r3, r2
 800e9ba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e9be:	781a      	ldrb	r2, [r3, #0]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e9c4:	7bfb      	ldrb	r3, [r7, #15]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	211a      	movs	r1, #26
 800e9ca:	fb01 f303 	mul.w	r3, r1, r3
 800e9ce:	4413      	add	r3, r2
 800e9d0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800e9d4:	881a      	ldrh	r2, [r3, #0]
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	7b9b      	ldrb	r3, [r3, #14]
 800e9de:	4619      	mov	r1, r3
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f001 ff16 	bl	8010812 <USBH_AllocPipe>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	7bdb      	ldrb	r3, [r3, #15]
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f001 ff0c 	bl	8010812 <USBH_AllocPipe>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	7b59      	ldrb	r1, [r3, #13]
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	7b98      	ldrb	r0, [r3, #14]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ea16:	68ba      	ldr	r2, [r7, #8]
 800ea18:	8b12      	ldrh	r2, [r2, #24]
 800ea1a:	9202      	str	r2, [sp, #8]
 800ea1c:	2202      	movs	r2, #2
 800ea1e:	9201      	str	r2, [sp, #4]
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	4623      	mov	r3, r4
 800ea24:	4602      	mov	r2, r0
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f001 fec4 	bl	80107b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	7b19      	ldrb	r1, [r3, #12]
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	7bd8      	ldrb	r0, [r3, #15]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ea40:	68ba      	ldr	r2, [r7, #8]
 800ea42:	8b52      	ldrh	r2, [r2, #26]
 800ea44:	9202      	str	r2, [sp, #8]
 800ea46:	2202      	movs	r2, #2
 800ea48:	9201      	str	r2, [sp, #4]
 800ea4a:	9300      	str	r3, [sp, #0]
 800ea4c:	4623      	mov	r3, r4
 800ea4e:	4602      	mov	r2, r0
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f001 feaf 	bl	80107b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	7b5b      	ldrb	r3, [r3, #13]
 800ea62:	2200      	movs	r2, #0
 800ea64:	4619      	mov	r1, r3
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f002 fbd6 	bl	8011218 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	7b1b      	ldrb	r3, [r3, #12]
 800ea70:	2200      	movs	r2, #0
 800ea72:	4619      	mov	r1, r3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f002 fbcf 	bl	8011218 <USBH_LL_SetToggle>

  return USBH_OK;
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3714      	adds	r7, #20
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd90      	pop	{r4, r7, pc}

0800ea84 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ea92:	69db      	ldr	r3, [r3, #28]
 800ea94:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00e      	beq.n	800eabc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f001 fea4 	bl	80107f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	4619      	mov	r1, r3
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f001 fecf 	bl	8010854 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2200      	movs	r2, #0
 800eaba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	7b1b      	ldrb	r3, [r3, #12]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00e      	beq.n	800eae2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	7b1b      	ldrb	r3, [r3, #12]
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f001 fe91 	bl	80107f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	7b1b      	ldrb	r3, [r3, #12]
 800ead4:	4619      	mov	r1, r3
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f001 febc 	bl	8010854 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2200      	movs	r2, #0
 800eae0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	7b5b      	ldrb	r3, [r3, #13]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00e      	beq.n	800eb08 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	7b5b      	ldrb	r3, [r3, #13]
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f001 fe7e 	bl	80107f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	7b5b      	ldrb	r3, [r3, #13]
 800eafa:	4619      	mov	r1, r3
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f001 fea9 	bl	8010854 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2200      	movs	r2, #0
 800eb06:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800eb0e:	69db      	ldr	r3, [r3, #28]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d00b      	beq.n	800eb2c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800eb1a:	69db      	ldr	r3, [r3, #28]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f002 fc09 	bl	8011334 <free>
    phost->pActiveClass->pData = 0U;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800eb28:	2200      	movs	r2, #0
 800eb2a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b084      	sub	sp, #16
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800eb44:	69db      	ldr	r3, [r3, #28]
 800eb46:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	3340      	adds	r3, #64	@ 0x40
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 f8b1 	bl	800ecb6 <GetLineCoding>
 800eb54:	4603      	mov	r3, r0
 800eb56:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d105      	bne.n	800eb6a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800eb64:	2102      	movs	r1, #2
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800eb6a:	7afb      	ldrb	r3, [r7, #11]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800eb80:	2300      	movs	r3, #0
 800eb82:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800eb8a:	69db      	ldr	r3, [r3, #28]
 800eb8c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800eb94:	2b04      	cmp	r3, #4
 800eb96:	d877      	bhi.n	800ec88 <USBH_CDC_Process+0x114>
 800eb98:	a201      	add	r2, pc, #4	@ (adr r2, 800eba0 <USBH_CDC_Process+0x2c>)
 800eb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9e:	bf00      	nop
 800eba0:	0800ebb5 	.word	0x0800ebb5
 800eba4:	0800ebbb 	.word	0x0800ebbb
 800eba8:	0800ebeb 	.word	0x0800ebeb
 800ebac:	0800ec5f 	.word	0x0800ec5f
 800ebb0:	0800ec6d 	.word	0x0800ec6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	73fb      	strb	r3, [r7, #15]
      break;
 800ebb8:	e06d      	b.n	800ec96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 f897 	bl	800ecf4 <SetLineCoding>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ebca:	7bbb      	ldrb	r3, [r7, #14]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d104      	bne.n	800ebda <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ebd8:	e058      	b.n	800ec8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ebda:	7bbb      	ldrb	r3, [r7, #14]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d055      	beq.n	800ec8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	2204      	movs	r2, #4
 800ebe4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ebe8:	e050      	b.n	800ec8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	3340      	adds	r3, #64	@ 0x40
 800ebee:	4619      	mov	r1, r3
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 f860 	bl	800ecb6 <GetLineCoding>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ebfa:	7bbb      	ldrb	r3, [r7, #14]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d126      	bne.n	800ec4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	2200      	movs	r2, #0
 800ec04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec12:	791b      	ldrb	r3, [r3, #4]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d13b      	bne.n	800ec90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d133      	bne.n	800ec90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d12b      	bne.n	800ec90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d124      	bne.n	800ec90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 f958 	bl	800eefc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ec4c:	e020      	b.n	800ec90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ec4e:	7bbb      	ldrb	r3, [r7, #14]
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d01d      	beq.n	800ec90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	2204      	movs	r2, #4
 800ec58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ec5c:	e018      	b.n	800ec90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 f867 	bl	800ed32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 f8da 	bl	800ee1e <CDC_ProcessReception>
      break;
 800ec6a:	e014      	b.n	800ec96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f001 f81a 	bl	800fca8 <USBH_ClrFeature>
 800ec74:	4603      	mov	r3, r0
 800ec76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ec78:	7bbb      	ldrb	r3, [r7, #14]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10a      	bne.n	800ec94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	2200      	movs	r2, #0
 800ec82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800ec86:	e005      	b.n	800ec94 <USBH_CDC_Process+0x120>

    default:
      break;
 800ec88:	bf00      	nop
 800ec8a:	e004      	b.n	800ec96 <USBH_CDC_Process+0x122>
      break;
 800ec8c:	bf00      	nop
 800ec8e:	e002      	b.n	800ec96 <USBH_CDC_Process+0x122>
      break;
 800ec90:	bf00      	nop
 800ec92:	e000      	b.n	800ec96 <USBH_CDC_Process+0x122>
      break;
 800ec94:	bf00      	nop

  }

  return status;
 800ec96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3710      	adds	r7, #16
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800eca8:	2300      	movs	r3, #0
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	370c      	adds	r7, #12
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr

0800ecb6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b082      	sub	sp, #8
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
 800ecbe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	22a1      	movs	r2, #161	@ 0xa1
 800ecc4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2221      	movs	r2, #33	@ 0x21
 800ecca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2207      	movs	r2, #7
 800ecdc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	2207      	movs	r2, #7
 800ece2:	4619      	mov	r1, r3
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f001 fb14 	bl	8010312 <USBH_CtlReq>
 800ecea:	4603      	mov	r3, r0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2221      	movs	r2, #33	@ 0x21
 800ed02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2220      	movs	r2, #32
 800ed08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2207      	movs	r2, #7
 800ed1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	2207      	movs	r2, #7
 800ed20:	4619      	mov	r1, r3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f001 faf5 	bl	8010312 <USBH_CtlReq>
 800ed28:	4603      	mov	r3, r0
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}

0800ed32 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ed32:	b580      	push	{r7, lr}
 800ed34:	b086      	sub	sp, #24
 800ed36:	af02      	add	r7, sp, #8
 800ed38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ed40:	69db      	ldr	r3, [r3, #28]
 800ed42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ed44:	2300      	movs	r3, #0
 800ed46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d002      	beq.n	800ed58 <CDC_ProcessTransmission+0x26>
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d023      	beq.n	800ed9e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ed56:	e05e      	b.n	800ee16 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed5c:	68fa      	ldr	r2, [r7, #12]
 800ed5e:	8b12      	ldrh	r2, [r2, #24]
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d90b      	bls.n	800ed7c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	69d9      	ldr	r1, [r3, #28]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	8b1a      	ldrh	r2, [r3, #24]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	7b5b      	ldrb	r3, [r3, #13]
 800ed70:	2001      	movs	r0, #1
 800ed72:	9000      	str	r0, [sp, #0]
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f001 fcda 	bl	801072e <USBH_BulkSendData>
 800ed7a:	e00b      	b.n	800ed94 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	7b5b      	ldrb	r3, [r3, #13]
 800ed8a:	2001      	movs	r0, #1
 800ed8c:	9000      	str	r0, [sp, #0]
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f001 fccd 	bl	801072e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2202      	movs	r2, #2
 800ed98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ed9c:	e03b      	b.n	800ee16 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	7b5b      	ldrb	r3, [r3, #13]
 800eda2:	4619      	mov	r1, r3
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f002 fa0d 	bl	80111c4 <USBH_LL_GetURBState>
 800edaa:	4603      	mov	r3, r0
 800edac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800edae:	7afb      	ldrb	r3, [r7, #11]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d128      	bne.n	800ee06 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	8b12      	ldrh	r2, [r2, #24]
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d90e      	bls.n	800edde <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edc4:	68fa      	ldr	r2, [r7, #12]
 800edc6:	8b12      	ldrh	r2, [r2, #24]
 800edc8:	1a9a      	subs	r2, r3, r2
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	69db      	ldr	r3, [r3, #28]
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	8b12      	ldrh	r2, [r2, #24]
 800edd6:	441a      	add	r2, r3
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	61da      	str	r2, [r3, #28]
 800eddc:	e002      	b.n	800ede4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2200      	movs	r2, #0
 800ede2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d004      	beq.n	800edf6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2201      	movs	r2, #1
 800edf0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800edf4:	e00e      	b.n	800ee14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2200      	movs	r2, #0
 800edfa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 f868 	bl	800eed4 <USBH_CDC_TransmitCallback>
      break;
 800ee04:	e006      	b.n	800ee14 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ee06:	7afb      	ldrb	r3, [r7, #11]
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d103      	bne.n	800ee14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ee14:	bf00      	nop
  }
}
 800ee16:	bf00      	nop
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b086      	sub	sp, #24
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ee2c:	69db      	ldr	r3, [r3, #28]
 800ee2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ee30:	2300      	movs	r3, #0
 800ee32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800ee3a:	2b03      	cmp	r3, #3
 800ee3c:	d002      	beq.n	800ee44 <CDC_ProcessReception+0x26>
 800ee3e:	2b04      	cmp	r3, #4
 800ee40:	d00e      	beq.n	800ee60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ee42:	e043      	b.n	800eecc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	6a19      	ldr	r1, [r3, #32]
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	8b5a      	ldrh	r2, [r3, #26]
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	7b1b      	ldrb	r3, [r3, #12]
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f001 fc91 	bl	8010778 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	2204      	movs	r2, #4
 800ee5a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ee5e:	e035      	b.n	800eecc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	7b1b      	ldrb	r3, [r3, #12]
 800ee64:	4619      	mov	r1, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f002 f9ac 	bl	80111c4 <USBH_LL_GetURBState>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ee70:	7cfb      	ldrb	r3, [r7, #19]
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d129      	bne.n	800eeca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	7b1b      	ldrb	r3, [r3, #12]
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f002 f90f 	bl	80110a0 <USBH_LL_GetLastXferSize>
 800ee82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d016      	beq.n	800eebc <CDC_ProcessReception+0x9e>
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	8b5b      	ldrh	r3, [r3, #26]
 800ee92:	461a      	mov	r2, r3
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d110      	bne.n	800eebc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	1ad2      	subs	r2, r2, r3
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	6a1a      	ldr	r2, [r3, #32]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	441a      	add	r2, r3
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	2203      	movs	r2, #3
 800eeb6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800eeba:	e006      	b.n	800eeca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	2200      	movs	r2, #0
 800eec0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f000 f80f 	bl	800eee8 <USBH_CDC_ReceiveCallback>
      break;
 800eeca:	bf00      	nop
  }
}
 800eecc:	bf00      	nop
 800eece:	3718      	adds	r7, #24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800eedc:	bf00      	nop
 800eede:	370c      	adds	r7, #12
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800eef0:	bf00      	nop
 800eef2:	370c      	adds	r7, #12
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr

0800eefc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ef04:	bf00      	nop
 800ef06:	370c      	adds	r7, #12
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	60b9      	str	r1, [r7, #8]
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d101      	bne.n	800ef28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ef24:	2302      	movs	r3, #2
 800ef26:	e029      	b.n	800ef7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	79fa      	ldrb	r2, [r7, #7]
 800ef2c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ef40:	68f8      	ldr	r0, [r7, #12]
 800ef42:	f000 f81f 	bl	800ef84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2200      	movs	r2, #0
 800ef62:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d003      	beq.n	800ef74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	f001 ffdf 	bl	8010f38 <USBH_LL_Init>

  return USBH_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ef90:	2300      	movs	r3, #0
 800ef92:	60fb      	str	r3, [r7, #12]
 800ef94:	e009      	b.n	800efaa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	33e0      	adds	r3, #224	@ 0xe0
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	2200      	movs	r2, #0
 800efa2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	3301      	adds	r3, #1
 800efa8:	60fb      	str	r3, [r7, #12]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2b0f      	cmp	r3, #15
 800efae:	d9f2      	bls.n	800ef96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800efb0:	2300      	movs	r3, #0
 800efb2:	60fb      	str	r3, [r7, #12]
 800efb4:	e009      	b.n	800efca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	4413      	add	r3, r2
 800efbc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800efc0:	2200      	movs	r2, #0
 800efc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	3301      	adds	r3, #1
 800efc8:	60fb      	str	r3, [r7, #12]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efd0:	d3f1      	bcc.n	800efb6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2200      	movs	r2, #0
 800efdc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2201      	movs	r2, #1
 800efe2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2240      	movs	r2, #64	@ 0x40
 800eff6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2200      	movs	r2, #0
 800effc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2201      	movs	r2, #1
 800f00a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	331c      	adds	r3, #28
 800f022:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f026:	2100      	movs	r1, #0
 800f028:	4618      	mov	r0, r3
 800f02a:	f002 fa39 	bl	80114a0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f038:	2100      	movs	r1, #0
 800f03a:	4618      	mov	r0, r3
 800f03c:	f002 fa30 	bl	80114a0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800f046:	2212      	movs	r2, #18
 800f048:	2100      	movs	r1, #0
 800f04a:	4618      	mov	r0, r3
 800f04c:	f002 fa28 	bl	80114a0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f056:	223e      	movs	r2, #62	@ 0x3e
 800f058:	2100      	movs	r1, #0
 800f05a:	4618      	mov	r0, r3
 800f05c:	f002 fa20 	bl	80114a0 <memset>

  return USBH_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f06a:	b480      	push	{r7}
 800f06c:	b085      	sub	sp, #20
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
 800f072:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d016      	beq.n	800f0ac <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10e      	bne.n	800f0a6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f08e:	1c59      	adds	r1, r3, #1
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	33de      	adds	r3, #222	@ 0xde
 800f09a:	6839      	ldr	r1, [r7, #0]
 800f09c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	73fb      	strb	r3, [r7, #15]
 800f0a4:	e004      	b.n	800f0b0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f0a6:	2302      	movs	r3, #2
 800f0a8:	73fb      	strb	r3, [r7, #15]
 800f0aa:	e001      	b.n	800f0b0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3714      	adds	r7, #20
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr

0800f0be <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f0be:	b480      	push	{r7}
 800f0c0:	b085      	sub	sp, #20
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800f0d4:	78fa      	ldrb	r2, [r7, #3]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d204      	bcs.n	800f0e4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	78fa      	ldrb	r2, [r7, #3]
 800f0de:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800f0e2:	e001      	b.n	800f0e8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f0e4:	2302      	movs	r3, #2
 800f0e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3714      	adds	r7, #20
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr

0800f0f6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f0f6:	b480      	push	{r7}
 800f0f8:	b087      	sub	sp, #28
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
 800f0fe:	4608      	mov	r0, r1
 800f100:	4611      	mov	r1, r2
 800f102:	461a      	mov	r2, r3
 800f104:	4603      	mov	r3, r0
 800f106:	70fb      	strb	r3, [r7, #3]
 800f108:	460b      	mov	r3, r1
 800f10a:	70bb      	strb	r3, [r7, #2]
 800f10c:	4613      	mov	r3, r2
 800f10e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f110:	2300      	movs	r3, #0
 800f112:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f114:	2300      	movs	r3, #0
 800f116:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f11e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f120:	e025      	b.n	800f16e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f122:	7dfb      	ldrb	r3, [r7, #23]
 800f124:	221a      	movs	r2, #26
 800f126:	fb02 f303 	mul.w	r3, r2, r3
 800f12a:	3308      	adds	r3, #8
 800f12c:	68fa      	ldr	r2, [r7, #12]
 800f12e:	4413      	add	r3, r2
 800f130:	3302      	adds	r3, #2
 800f132:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	795b      	ldrb	r3, [r3, #5]
 800f138:	78fa      	ldrb	r2, [r7, #3]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d002      	beq.n	800f144 <USBH_FindInterface+0x4e>
 800f13e:	78fb      	ldrb	r3, [r7, #3]
 800f140:	2bff      	cmp	r3, #255	@ 0xff
 800f142:	d111      	bne.n	800f168 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f148:	78ba      	ldrb	r2, [r7, #2]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d002      	beq.n	800f154 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f14e:	78bb      	ldrb	r3, [r7, #2]
 800f150:	2bff      	cmp	r3, #255	@ 0xff
 800f152:	d109      	bne.n	800f168 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f158:	787a      	ldrb	r2, [r7, #1]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d002      	beq.n	800f164 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f15e:	787b      	ldrb	r3, [r7, #1]
 800f160:	2bff      	cmp	r3, #255	@ 0xff
 800f162:	d101      	bne.n	800f168 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f164:	7dfb      	ldrb	r3, [r7, #23]
 800f166:	e006      	b.n	800f176 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f168:	7dfb      	ldrb	r3, [r7, #23]
 800f16a:	3301      	adds	r3, #1
 800f16c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f16e:	7dfb      	ldrb	r3, [r7, #23]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d9d6      	bls.n	800f122 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f174:	23ff      	movs	r3, #255	@ 0xff
}
 800f176:	4618      	mov	r0, r3
 800f178:	371c      	adds	r7, #28
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr

0800f182 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b082      	sub	sp, #8
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f001 ff10 	bl	8010fb0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f190:	2101      	movs	r1, #1
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f002 f829 	bl	80111ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
	...

0800f1a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b088      	sub	sp, #32
 800f1a8:	af04      	add	r7, sp, #16
 800f1aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f1ac:	2302      	movs	r3, #2
 800f1ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d102      	bne.n	800f1c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2203      	movs	r2, #3
 800f1c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b0b      	cmp	r3, #11
 800f1ce:	f200 81bb 	bhi.w	800f548 <USBH_Process+0x3a4>
 800f1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f1d8 <USBH_Process+0x34>)
 800f1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d8:	0800f209 	.word	0x0800f209
 800f1dc:	0800f23b 	.word	0x0800f23b
 800f1e0:	0800f2a3 	.word	0x0800f2a3
 800f1e4:	0800f4e3 	.word	0x0800f4e3
 800f1e8:	0800f549 	.word	0x0800f549
 800f1ec:	0800f343 	.word	0x0800f343
 800f1f0:	0800f489 	.word	0x0800f489
 800f1f4:	0800f379 	.word	0x0800f379
 800f1f8:	0800f399 	.word	0x0800f399
 800f1fc:	0800f3b7 	.word	0x0800f3b7
 800f200:	0800f3fb 	.word	0x0800f3fb
 800f204:	0800f4cb 	.word	0x0800f4cb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	2b00      	cmp	r3, #0
 800f212:	f000 819b 	beq.w	800f54c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2201      	movs	r2, #1
 800f21a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f21c:	20c8      	movs	r0, #200	@ 0xc8
 800f21e:	f002 f82e 	bl	801127e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f001 ff21 	bl	801106a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f238:	e188      	b.n	800f54c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800f240:	2b01      	cmp	r3, #1
 800f242:	d107      	bne.n	800f254 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2202      	movs	r2, #2
 800f250:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f252:	e18a      	b.n	800f56a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f25a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f25e:	d914      	bls.n	800f28a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f266:	3301      	adds	r3, #1
 800f268:	b2da      	uxtb	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f276:	2b03      	cmp	r3, #3
 800f278:	d903      	bls.n	800f282 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	220d      	movs	r2, #13
 800f27e:	701a      	strb	r2, [r3, #0]
      break;
 800f280:	e173      	b.n	800f56a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2200      	movs	r2, #0
 800f286:	701a      	strb	r2, [r3, #0]
      break;
 800f288:	e16f      	b.n	800f56a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f290:	f103 020a 	add.w	r2, r3, #10
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800f29a:	200a      	movs	r0, #10
 800f29c:	f001 ffef 	bl	801127e <USBH_Delay>
      break;
 800f2a0:	e163      	b.n	800f56a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d005      	beq.n	800f2b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f2b2:	2104      	movs	r1, #4
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f2b8:	2064      	movs	r0, #100	@ 0x64
 800f2ba:	f001 ffe0 	bl	801127e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f001 feac 	bl	801101c <USBH_LL_GetSpeed>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2205      	movs	r2, #5
 800f2d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f001 fa9b 	bl	8010812 <USBH_AllocPipe>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	461a      	mov	r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f2e4:	2180      	movs	r1, #128	@ 0x80
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f001 fa93 	bl	8010812 <USBH_AllocPipe>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	7919      	ldrb	r1, [r3, #4]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f308:	9202      	str	r2, [sp, #8]
 800f30a:	2200      	movs	r2, #0
 800f30c:	9201      	str	r2, [sp, #4]
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	4603      	mov	r3, r0
 800f312:	2280      	movs	r2, #128	@ 0x80
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f001 fa4d 	bl	80107b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	7959      	ldrb	r1, [r3, #5]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f32e:	9202      	str	r2, [sp, #8]
 800f330:	2200      	movs	r2, #0
 800f332:	9201      	str	r2, [sp, #4]
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	4603      	mov	r3, r0
 800f338:	2200      	movs	r2, #0
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f001 fa3a 	bl	80107b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f340:	e113      	b.n	800f56a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f916 	bl	800f574 <USBH_HandleEnum>
 800f348:	4603      	mov	r3, r0
 800f34a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f34c:	7bbb      	ldrb	r3, [r7, #14]
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	2b00      	cmp	r3, #0
 800f352:	f040 80fd 	bne.w	800f550 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800f364:	2b01      	cmp	r3, #1
 800f366:	d103      	bne.n	800f370 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2208      	movs	r2, #8
 800f36c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f36e:	e0ef      	b.n	800f550 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2207      	movs	r2, #7
 800f374:	701a      	strb	r2, [r3, #0]
      break;
 800f376:	e0eb      	b.n	800f550 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f37e:	2b00      	cmp	r3, #0
 800f380:	f000 80e8 	beq.w	800f554 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f38a:	2101      	movs	r1, #1
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2208      	movs	r2, #8
 800f394:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800f396:	e0dd      	b.n	800f554 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fc3a 	bl	800fc1a <USBH_SetCfg>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f040 80d5 	bne.w	800f558 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2209      	movs	r2, #9
 800f3b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f3b4:	e0d0      	b.n	800f558 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800f3bc:	f003 0320 	and.w	r3, r3, #32
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d016      	beq.n	800f3f2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f3c4:	2101      	movs	r1, #1
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 fc4a 	bl	800fc60 <USBH_SetFeature>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f3d0:	7bbb      	ldrb	r3, [r7, #14]
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d103      	bne.n	800f3e0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	220a      	movs	r2, #10
 800f3dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f3de:	e0bd      	b.n	800f55c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800f3e0:	7bbb      	ldrb	r3, [r7, #14]
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	f040 80b9 	bne.w	800f55c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	220a      	movs	r2, #10
 800f3ee:	701a      	strb	r2, [r3, #0]
      break;
 800f3f0:	e0b4      	b.n	800f55c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	220a      	movs	r2, #10
 800f3f6:	701a      	strb	r2, [r3, #0]
      break;
 800f3f8:	e0b0      	b.n	800f55c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f400:	2b00      	cmp	r3, #0
 800f402:	f000 80ad 	beq.w	800f560 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f40e:	2300      	movs	r3, #0
 800f410:	73fb      	strb	r3, [r7, #15]
 800f412:	e016      	b.n	800f442 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f414:	7bfa      	ldrb	r2, [r7, #15]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	32de      	adds	r2, #222	@ 0xde
 800f41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f41e:	791a      	ldrb	r2, [r3, #4]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800f426:	429a      	cmp	r2, r3
 800f428:	d108      	bne.n	800f43c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f42a:	7bfa      	ldrb	r2, [r7, #15]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	32de      	adds	r2, #222	@ 0xde
 800f430:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800f43a:	e005      	b.n	800f448 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f43c:	7bfb      	ldrb	r3, [r7, #15]
 800f43e:	3301      	adds	r3, #1
 800f440:	73fb      	strb	r3, [r7, #15]
 800f442:	7bfb      	ldrb	r3, [r7, #15]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d0e5      	beq.n	800f414 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d016      	beq.n	800f480 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f458:	689b      	ldr	r3, [r3, #8]
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	4798      	blx	r3
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d109      	bne.n	800f478 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2206      	movs	r2, #6
 800f468:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f470:	2103      	movs	r1, #3
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f476:	e073      	b.n	800f560 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	220d      	movs	r2, #13
 800f47c:	701a      	strb	r2, [r3, #0]
      break;
 800f47e:	e06f      	b.n	800f560 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	220d      	movs	r2, #13
 800f484:	701a      	strb	r2, [r3, #0]
      break;
 800f486:	e06b      	b.n	800f560 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d017      	beq.n	800f4c2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	4798      	blx	r3
 800f49e:	4603      	mov	r3, r0
 800f4a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f4a2:	7bbb      	ldrb	r3, [r7, #14]
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d103      	bne.n	800f4b2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	220b      	movs	r2, #11
 800f4ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f4b0:	e058      	b.n	800f564 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800f4b2:	7bbb      	ldrb	r3, [r7, #14]
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d154      	bne.n	800f564 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	220d      	movs	r2, #13
 800f4be:	701a      	strb	r2, [r3, #0]
      break;
 800f4c0:	e050      	b.n	800f564 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	220d      	movs	r2, #13
 800f4c6:	701a      	strb	r2, [r3, #0]
      break;
 800f4c8:	e04c      	b.n	800f564 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d049      	beq.n	800f568 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f4da:	695b      	ldr	r3, [r3, #20]
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	4798      	blx	r3
      }
      break;
 800f4e0:	e042      	b.n	800f568 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7ff fd4a 	bl	800ef84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d009      	beq.n	800f50e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f514:	2b00      	cmp	r3, #0
 800f516:	d005      	beq.n	800f524 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f51e:	2105      	movs	r1, #5
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d107      	bne.n	800f540 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7ff fe22 	bl	800f182 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f53e:	e014      	b.n	800f56a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f001 fd35 	bl	8010fb0 <USBH_LL_Start>
      break;
 800f546:	e010      	b.n	800f56a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800f548:	bf00      	nop
 800f54a:	e00e      	b.n	800f56a <USBH_Process+0x3c6>
      break;
 800f54c:	bf00      	nop
 800f54e:	e00c      	b.n	800f56a <USBH_Process+0x3c6>
      break;
 800f550:	bf00      	nop
 800f552:	e00a      	b.n	800f56a <USBH_Process+0x3c6>
    break;
 800f554:	bf00      	nop
 800f556:	e008      	b.n	800f56a <USBH_Process+0x3c6>
      break;
 800f558:	bf00      	nop
 800f55a:	e006      	b.n	800f56a <USBH_Process+0x3c6>
      break;
 800f55c:	bf00      	nop
 800f55e:	e004      	b.n	800f56a <USBH_Process+0x3c6>
      break;
 800f560:	bf00      	nop
 800f562:	e002      	b.n	800f56a <USBH_Process+0x3c6>
      break;
 800f564:	bf00      	nop
 800f566:	e000      	b.n	800f56a <USBH_Process+0x3c6>
      break;
 800f568:	bf00      	nop
  }
  return USBH_OK;
 800f56a:	2300      	movs	r3, #0
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3710      	adds	r7, #16
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b088      	sub	sp, #32
 800f578:	af04      	add	r7, sp, #16
 800f57a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f57c:	2301      	movs	r3, #1
 800f57e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f580:	2301      	movs	r3, #1
 800f582:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	785b      	ldrb	r3, [r3, #1]
 800f588:	2b07      	cmp	r3, #7
 800f58a:	f200 81bd 	bhi.w	800f908 <USBH_HandleEnum+0x394>
 800f58e:	a201      	add	r2, pc, #4	@ (adr r2, 800f594 <USBH_HandleEnum+0x20>)
 800f590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f594:	0800f5b5 	.word	0x0800f5b5
 800f598:	0800f66f 	.word	0x0800f66f
 800f59c:	0800f6d9 	.word	0x0800f6d9
 800f5a0:	0800f763 	.word	0x0800f763
 800f5a4:	0800f7cd 	.word	0x0800f7cd
 800f5a8:	0800f83d 	.word	0x0800f83d
 800f5ac:	0800f883 	.word	0x0800f883
 800f5b0:	0800f8c9 	.word	0x0800f8c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f5b4:	2108      	movs	r1, #8
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 fa4c 	bl	800fa54 <USBH_Get_DevDesc>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f5c0:	7bbb      	ldrb	r3, [r7, #14]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d12e      	bne.n	800f624 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	7919      	ldrb	r1, [r3, #4]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f5ea:	9202      	str	r2, [sp, #8]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	9201      	str	r2, [sp, #4]
 800f5f0:	9300      	str	r3, [sp, #0]
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	2280      	movs	r2, #128	@ 0x80
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f001 f8dc 	bl	80107b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	7959      	ldrb	r1, [r3, #5]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f610:	9202      	str	r2, [sp, #8]
 800f612:	2200      	movs	r2, #0
 800f614:	9201      	str	r2, [sp, #4]
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	4603      	mov	r3, r0
 800f61a:	2200      	movs	r2, #0
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f001 f8c9 	bl	80107b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f622:	e173      	b.n	800f90c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f624:	7bbb      	ldrb	r3, [r7, #14]
 800f626:	2b03      	cmp	r3, #3
 800f628:	f040 8170 	bne.w	800f90c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f632:	3301      	adds	r3, #1
 800f634:	b2da      	uxtb	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f642:	2b03      	cmp	r3, #3
 800f644:	d903      	bls.n	800f64e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	220d      	movs	r2, #13
 800f64a:	701a      	strb	r2, [r3, #0]
      break;
 800f64c:	e15e      	b.n	800f90c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	795b      	ldrb	r3, [r3, #5]
 800f652:	4619      	mov	r1, r3
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f001 f8fd 	bl	8010854 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	791b      	ldrb	r3, [r3, #4]
 800f65e:	4619      	mov	r1, r3
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f001 f8f7 	bl	8010854 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2200      	movs	r2, #0
 800f66a:	701a      	strb	r2, [r3, #0]
      break;
 800f66c:	e14e      	b.n	800f90c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f66e:	2112      	movs	r1, #18
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 f9ef 	bl	800fa54 <USBH_Get_DevDesc>
 800f676:	4603      	mov	r3, r0
 800f678:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f67a:	7bbb      	ldrb	r3, [r7, #14]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d103      	bne.n	800f688 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2202      	movs	r2, #2
 800f684:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f686:	e143      	b.n	800f910 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f688:	7bbb      	ldrb	r3, [r7, #14]
 800f68a:	2b03      	cmp	r3, #3
 800f68c:	f040 8140 	bne.w	800f910 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f696:	3301      	adds	r3, #1
 800f698:	b2da      	uxtb	r2, r3
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f6a6:	2b03      	cmp	r3, #3
 800f6a8:	d903      	bls.n	800f6b2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	220d      	movs	r2, #13
 800f6ae:	701a      	strb	r2, [r3, #0]
      break;
 800f6b0:	e12e      	b.n	800f910 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	795b      	ldrb	r3, [r3, #5]
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f001 f8cb 	bl	8010854 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	791b      	ldrb	r3, [r3, #4]
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f001 f8c5 	bl	8010854 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	701a      	strb	r2, [r3, #0]
      break;
 800f6d6:	e11b      	b.n	800f910 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f6d8:	2101      	movs	r1, #1
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 fa79 	bl	800fbd2 <USBH_SetAddress>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f6e4:	7bbb      	ldrb	r3, [r7, #14]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d130      	bne.n	800f74c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800f6ea:	2002      	movs	r0, #2
 800f6ec:	f001 fdc7 	bl	801127e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2203      	movs	r2, #3
 800f6fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	7919      	ldrb	r1, [r3, #4]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f712:	9202      	str	r2, [sp, #8]
 800f714:	2200      	movs	r2, #0
 800f716:	9201      	str	r2, [sp, #4]
 800f718:	9300      	str	r3, [sp, #0]
 800f71a:	4603      	mov	r3, r0
 800f71c:	2280      	movs	r2, #128	@ 0x80
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f001 f848 	bl	80107b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	7959      	ldrb	r1, [r3, #5]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f738:	9202      	str	r2, [sp, #8]
 800f73a:	2200      	movs	r2, #0
 800f73c:	9201      	str	r2, [sp, #4]
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	4603      	mov	r3, r0
 800f742:	2200      	movs	r2, #0
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f001 f835 	bl	80107b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f74a:	e0e3      	b.n	800f914 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f74c:	7bbb      	ldrb	r3, [r7, #14]
 800f74e:	2b03      	cmp	r3, #3
 800f750:	f040 80e0 	bne.w	800f914 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	220d      	movs	r2, #13
 800f758:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	705a      	strb	r2, [r3, #1]
      break;
 800f760:	e0d8      	b.n	800f914 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f762:	2109      	movs	r1, #9
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 f9a1 	bl	800faac <USBH_Get_CfgDesc>
 800f76a:	4603      	mov	r3, r0
 800f76c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f76e:	7bbb      	ldrb	r3, [r7, #14]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d103      	bne.n	800f77c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2204      	movs	r2, #4
 800f778:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f77a:	e0cd      	b.n	800f918 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f77c:	7bbb      	ldrb	r3, [r7, #14]
 800f77e:	2b03      	cmp	r3, #3
 800f780:	f040 80ca 	bne.w	800f918 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f78a:	3301      	adds	r3, #1
 800f78c:	b2da      	uxtb	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f79a:	2b03      	cmp	r3, #3
 800f79c:	d903      	bls.n	800f7a6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	220d      	movs	r2, #13
 800f7a2:	701a      	strb	r2, [r3, #0]
      break;
 800f7a4:	e0b8      	b.n	800f918 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	795b      	ldrb	r3, [r3, #5]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f001 f851 	bl	8010854 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	791b      	ldrb	r3, [r3, #4]
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f001 f84b 	bl	8010854 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	701a      	strb	r2, [r3, #0]
      break;
 800f7ca:	e0a5      	b.n	800f918 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f000 f969 	bl	800faac <USBH_Get_CfgDesc>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f7de:	7bbb      	ldrb	r3, [r7, #14]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d103      	bne.n	800f7ec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2205      	movs	r2, #5
 800f7e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f7ea:	e097      	b.n	800f91c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f7ec:	7bbb      	ldrb	r3, [r7, #14]
 800f7ee:	2b03      	cmp	r3, #3
 800f7f0:	f040 8094 	bne.w	800f91c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	b2da      	uxtb	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f80a:	2b03      	cmp	r3, #3
 800f80c:	d903      	bls.n	800f816 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	220d      	movs	r2, #13
 800f812:	701a      	strb	r2, [r3, #0]
      break;
 800f814:	e082      	b.n	800f91c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	795b      	ldrb	r3, [r3, #5]
 800f81a:	4619      	mov	r1, r3
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f001 f819 	bl	8010854 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	791b      	ldrb	r3, [r3, #4]
 800f826:	4619      	mov	r1, r3
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f001 f813 	bl	8010854 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2200      	movs	r2, #0
 800f832:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2200      	movs	r2, #0
 800f838:	701a      	strb	r2, [r3, #0]
      break;
 800f83a:	e06f      	b.n	800f91c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800f842:	2b00      	cmp	r3, #0
 800f844:	d019      	beq.n	800f87a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f852:	23ff      	movs	r3, #255	@ 0xff
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 f953 	bl	800fb00 <USBH_Get_StringDesc>
 800f85a:	4603      	mov	r3, r0
 800f85c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f85e:	7bbb      	ldrb	r3, [r7, #14]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d103      	bne.n	800f86c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2206      	movs	r2, #6
 800f868:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f86a:	e059      	b.n	800f920 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f86c:	7bbb      	ldrb	r3, [r7, #14]
 800f86e:	2b03      	cmp	r3, #3
 800f870:	d156      	bne.n	800f920 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2206      	movs	r2, #6
 800f876:	705a      	strb	r2, [r3, #1]
      break;
 800f878:	e052      	b.n	800f920 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2206      	movs	r2, #6
 800f87e:	705a      	strb	r2, [r3, #1]
      break;
 800f880:	e04e      	b.n	800f920 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d019      	beq.n	800f8c0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f898:	23ff      	movs	r3, #255	@ 0xff
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 f930 	bl	800fb00 <USBH_Get_StringDesc>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f8a4:	7bbb      	ldrb	r3, [r7, #14]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d103      	bne.n	800f8b2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2207      	movs	r2, #7
 800f8ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f8b0:	e038      	b.n	800f924 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f8b2:	7bbb      	ldrb	r3, [r7, #14]
 800f8b4:	2b03      	cmp	r3, #3
 800f8b6:	d135      	bne.n	800f924 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2207      	movs	r2, #7
 800f8bc:	705a      	strb	r2, [r3, #1]
      break;
 800f8be:	e031      	b.n	800f924 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2207      	movs	r2, #7
 800f8c4:	705a      	strb	r2, [r3, #1]
      break;
 800f8c6:	e02d      	b.n	800f924 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d017      	beq.n	800f902 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f8de:	23ff      	movs	r3, #255	@ 0xff
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f000 f90d 	bl	800fb00 <USBH_Get_StringDesc>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f8ea:	7bbb      	ldrb	r3, [r7, #14]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d102      	bne.n	800f8f6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f8f4:	e018      	b.n	800f928 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f8f6:	7bbb      	ldrb	r3, [r7, #14]
 800f8f8:	2b03      	cmp	r3, #3
 800f8fa:	d115      	bne.n	800f928 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800f900:	e012      	b.n	800f928 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800f902:	2300      	movs	r3, #0
 800f904:	73fb      	strb	r3, [r7, #15]
      break;
 800f906:	e00f      	b.n	800f928 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800f908:	bf00      	nop
 800f90a:	e00e      	b.n	800f92a <USBH_HandleEnum+0x3b6>
      break;
 800f90c:	bf00      	nop
 800f90e:	e00c      	b.n	800f92a <USBH_HandleEnum+0x3b6>
      break;
 800f910:	bf00      	nop
 800f912:	e00a      	b.n	800f92a <USBH_HandleEnum+0x3b6>
      break;
 800f914:	bf00      	nop
 800f916:	e008      	b.n	800f92a <USBH_HandleEnum+0x3b6>
      break;
 800f918:	bf00      	nop
 800f91a:	e006      	b.n	800f92a <USBH_HandleEnum+0x3b6>
      break;
 800f91c:	bf00      	nop
 800f91e:	e004      	b.n	800f92a <USBH_HandleEnum+0x3b6>
      break;
 800f920:	bf00      	nop
 800f922:	e002      	b.n	800f92a <USBH_HandleEnum+0x3b6>
      break;
 800f924:	bf00      	nop
 800f926:	e000      	b.n	800f92a <USBH_HandleEnum+0x3b6>
      break;
 800f928:	bf00      	nop
  }
  return Status;
 800f92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3710      	adds	r7, #16
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	683a      	ldr	r2, [r7, #0]
 800f942:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800f946:	bf00      	nop
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr

0800f952 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f952:	b580      	push	{r7, lr}
 800f954:	b082      	sub	sp, #8
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f960:	1c5a      	adds	r2, r3, #1
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f000 f804 	bl	800f976 <USBH_HandleSof>
}
 800f96e:	bf00      	nop
 800f970:	3708      	adds	r7, #8
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}

0800f976 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f976:	b580      	push	{r7, lr}
 800f978:	b082      	sub	sp, #8
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	b2db      	uxtb	r3, r3
 800f984:	2b0b      	cmp	r3, #11
 800f986:	d10a      	bne.n	800f99e <USBH_HandleSof+0x28>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d005      	beq.n	800f99e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f998:	699b      	ldr	r3, [r3, #24]
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	4798      	blx	r3
  }
}
 800f99e:	bf00      	nop
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f9a6:	b480      	push	{r7}
 800f9a8:	b083      	sub	sp, #12
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800f9b6:	bf00      	nop
}
 800f9b8:	370c      	adds	r7, #12
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr

0800f9c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f9c2:	b480      	push	{r7}
 800f9c4:	b083      	sub	sp, #12
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800f9d2:	bf00      	nop
}
 800f9d4:	370c      	adds	r7, #12
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr

0800f9de <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f9de:	b480      	push	{r7}
 800f9e0:	b083      	sub	sp, #12
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f9fe:	2300      	movs	r3, #0
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	370c      	adds	r7, #12
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr

0800fa0c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2201      	movs	r2, #1
 800fa18:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f001 fada 	bl	8010fe6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	791b      	ldrb	r3, [r3, #4]
 800fa36:	4619      	mov	r1, r3
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 ff0b 	bl	8010854 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	795b      	ldrb	r3, [r3, #5]
 800fa42:	4619      	mov	r1, r3
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 ff05 	bl	8010854 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b086      	sub	sp, #24
 800fa58:	af02      	add	r7, sp, #8
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800fa60:	887b      	ldrh	r3, [r7, #2]
 800fa62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa66:	d901      	bls.n	800fa6c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800fa68:	2303      	movs	r3, #3
 800fa6a:	e01b      	b.n	800faa4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800fa72:	887b      	ldrh	r3, [r7, #2]
 800fa74:	9300      	str	r3, [sp, #0]
 800fa76:	4613      	mov	r3, r2
 800fa78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 f872 	bl	800fb68 <USBH_GetDescriptor>
 800fa84:	4603      	mov	r3, r0
 800fa86:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800fa88:	7bfb      	ldrb	r3, [r7, #15]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d109      	bne.n	800faa2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fa94:	887a      	ldrh	r2, [r7, #2]
 800fa96:	4619      	mov	r1, r3
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 f929 	bl	800fcf0 <USBH_ParseDevDesc>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800faa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3710      	adds	r7, #16
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}

0800faac <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b086      	sub	sp, #24
 800fab0:	af02      	add	r7, sp, #8
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	460b      	mov	r3, r1
 800fab6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	331c      	adds	r3, #28
 800fabc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800fabe:	887b      	ldrh	r3, [r7, #2]
 800fac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fac4:	d901      	bls.n	800faca <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800fac6:	2303      	movs	r3, #3
 800fac8:	e016      	b.n	800faf8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800faca:	887b      	ldrh	r3, [r7, #2]
 800facc:	9300      	str	r3, [sp, #0]
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fad4:	2100      	movs	r1, #0
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f846 	bl	800fb68 <USBH_GetDescriptor>
 800fadc:	4603      	mov	r3, r0
 800fade:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d107      	bne.n	800faf6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800fae6:	887b      	ldrh	r3, [r7, #2]
 800fae8:	461a      	mov	r2, r3
 800faea:	68b9      	ldr	r1, [r7, #8]
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f000 f9af 	bl	800fe50 <USBH_ParseCfgDesc>
 800faf2:	4603      	mov	r3, r0
 800faf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800faf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3710      	adds	r7, #16
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b088      	sub	sp, #32
 800fb04:	af02      	add	r7, sp, #8
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	607a      	str	r2, [r7, #4]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	72fb      	strb	r3, [r7, #11]
 800fb10:	4613      	mov	r3, r2
 800fb12:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800fb14:	893b      	ldrh	r3, [r7, #8]
 800fb16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb1a:	d802      	bhi.n	800fb22 <USBH_Get_StringDesc+0x22>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d101      	bne.n	800fb26 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800fb22:	2303      	movs	r3, #3
 800fb24:	e01c      	b.n	800fb60 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800fb26:	7afb      	ldrb	r3, [r7, #11]
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800fb2e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800fb36:	893b      	ldrh	r3, [r7, #8]
 800fb38:	9300      	str	r3, [sp, #0]
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	68f8      	ldr	r0, [r7, #12]
 800fb40:	f000 f812 	bl	800fb68 <USBH_GetDescriptor>
 800fb44:	4603      	mov	r3, r0
 800fb46:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800fb48:	7dfb      	ldrb	r3, [r7, #23]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d107      	bne.n	800fb5e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fb54:	893a      	ldrh	r2, [r7, #8]
 800fb56:	6879      	ldr	r1, [r7, #4]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f000 fb8d 	bl	8010278 <USBH_ParseStringDesc>
  }

  return status;
 800fb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	60f8      	str	r0, [r7, #12]
 800fb70:	607b      	str	r3, [r7, #4]
 800fb72:	460b      	mov	r3, r1
 800fb74:	72fb      	strb	r3, [r7, #11]
 800fb76:	4613      	mov	r3, r2
 800fb78:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	789b      	ldrb	r3, [r3, #2]
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d11c      	bne.n	800fbbc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fb82:	7afb      	ldrb	r3, [r7, #11]
 800fb84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fb88:	b2da      	uxtb	r2, r3
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2206      	movs	r2, #6
 800fb92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	893a      	ldrh	r2, [r7, #8]
 800fb98:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fb9a:	893b      	ldrh	r3, [r7, #8]
 800fb9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fba0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fba4:	d104      	bne.n	800fbb0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	f240 4209 	movw	r2, #1033	@ 0x409
 800fbac:	829a      	strh	r2, [r3, #20]
 800fbae:	e002      	b.n	800fbb6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	8b3a      	ldrh	r2, [r7, #24]
 800fbba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800fbbc:	8b3b      	ldrh	r3, [r7, #24]
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	6879      	ldr	r1, [r7, #4]
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f000 fba5 	bl	8010312 <USBH_CtlReq>
 800fbc8:	4603      	mov	r3, r0
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b082      	sub	sp, #8
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
 800fbda:	460b      	mov	r3, r1
 800fbdc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	789b      	ldrb	r3, [r3, #2]
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	d10f      	bne.n	800fc06 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2205      	movs	r2, #5
 800fbf0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800fbf2:	78fb      	ldrb	r3, [r7, #3]
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fc06:	2200      	movs	r2, #0
 800fc08:	2100      	movs	r1, #0
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 fb81 	bl	8010312 <USBH_CtlReq>
 800fc10:	4603      	mov	r3, r0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b082      	sub	sp, #8
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	460b      	mov	r3, r1
 800fc24:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	789b      	ldrb	r3, [r3, #2]
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d10e      	bne.n	800fc4c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2209      	movs	r2, #9
 800fc38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	887a      	ldrh	r2, [r7, #2]
 800fc3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	2100      	movs	r1, #0
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 fb5e 	bl	8010312 <USBH_CtlReq>
 800fc56:	4603      	mov	r3, r0
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	460b      	mov	r3, r1
 800fc6a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	789b      	ldrb	r3, [r3, #2]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d10f      	bne.n	800fc94 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2203      	movs	r2, #3
 800fc7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800fc80:	78fb      	ldrb	r3, [r7, #3]
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fc94:	2200      	movs	r2, #0
 800fc96:	2100      	movs	r1, #0
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f000 fb3a 	bl	8010312 <USBH_CtlReq>
 800fc9e:	4603      	mov	r3, r0
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3708      	adds	r7, #8
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	789b      	ldrb	r3, [r3, #2]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d10f      	bne.n	800fcdc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2202      	movs	r2, #2
 800fcc0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800fcce:	78fb      	ldrb	r3, [r7, #3]
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fcdc:	2200      	movs	r2, #0
 800fcde:	2100      	movs	r1, #0
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 fb16 	bl	8010312 <USBH_CtlReq>
 800fce6:	4603      	mov	r3, r0
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800fd04:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800fd06:	2300      	movs	r3, #0
 800fd08:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d101      	bne.n	800fd14 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800fd10:	2302      	movs	r3, #2
 800fd12:	e094      	b.n	800fe3e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	781a      	ldrb	r2, [r3, #0]
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	785a      	ldrb	r2, [r3, #1]
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	3302      	adds	r3, #2
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	3303      	adds	r3, #3
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	021b      	lsls	r3, r3, #8
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	4313      	orrs	r3, r2
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	791a      	ldrb	r2, [r3, #4]
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	795a      	ldrb	r2, [r3, #5]
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	799a      	ldrb	r2, [r3, #6]
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	79da      	ldrb	r2, [r3, #7]
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d004      	beq.n	800fd72 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800fd6e:	2b01      	cmp	r3, #1
 800fd70:	d11b      	bne.n	800fdaa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	79db      	ldrb	r3, [r3, #7]
 800fd76:	2b20      	cmp	r3, #32
 800fd78:	dc0f      	bgt.n	800fd9a <USBH_ParseDevDesc+0xaa>
 800fd7a:	2b08      	cmp	r3, #8
 800fd7c:	db0f      	blt.n	800fd9e <USBH_ParseDevDesc+0xae>
 800fd7e:	3b08      	subs	r3, #8
 800fd80:	4a32      	ldr	r2, [pc, #200]	@ (800fe4c <USBH_ParseDevDesc+0x15c>)
 800fd82:	fa22 f303 	lsr.w	r3, r2, r3
 800fd86:	f003 0301 	and.w	r3, r3, #1
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	bf14      	ite	ne
 800fd8e:	2301      	movne	r3, #1
 800fd90:	2300      	moveq	r3, #0
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d106      	bne.n	800fda6 <USBH_ParseDevDesc+0xb6>
 800fd98:	e001      	b.n	800fd9e <USBH_ParseDevDesc+0xae>
 800fd9a:	2b40      	cmp	r3, #64	@ 0x40
 800fd9c:	d003      	beq.n	800fda6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	2208      	movs	r2, #8
 800fda2:	71da      	strb	r2, [r3, #7]
        break;
 800fda4:	e000      	b.n	800fda8 <USBH_ParseDevDesc+0xb8>
        break;
 800fda6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800fda8:	e00e      	b.n	800fdc8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fdb0:	2b02      	cmp	r3, #2
 800fdb2:	d107      	bne.n	800fdc4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	79db      	ldrb	r3, [r3, #7]
 800fdb8:	2b08      	cmp	r3, #8
 800fdba:	d005      	beq.n	800fdc8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	2208      	movs	r2, #8
 800fdc0:	71da      	strb	r2, [r3, #7]
 800fdc2:	e001      	b.n	800fdc8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800fdc4:	2303      	movs	r3, #3
 800fdc6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800fdc8:	88fb      	ldrh	r3, [r7, #6]
 800fdca:	2b08      	cmp	r3, #8
 800fdcc:	d936      	bls.n	800fe3c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	3308      	adds	r3, #8
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	3309      	adds	r3, #9
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	021b      	lsls	r3, r3, #8
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	4313      	orrs	r3, r2
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	330a      	adds	r3, #10
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	461a      	mov	r2, r3
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	330b      	adds	r3, #11
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	021b      	lsls	r3, r3, #8
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	330c      	adds	r3, #12
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	461a      	mov	r2, r3
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	330d      	adds	r3, #13
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	021b      	lsls	r3, r3, #8
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	4313      	orrs	r3, r2
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	7b9a      	ldrb	r2, [r3, #14]
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	7bda      	ldrb	r2, [r3, #15]
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	7c1a      	ldrb	r2, [r3, #16]
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	7c5a      	ldrb	r2, [r3, #17]
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800fe3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	371c      	adds	r7, #28
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr
 800fe4a:	bf00      	nop
 800fe4c:	01000101 	.word	0x01000101

0800fe50 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b08c      	sub	sp, #48	@ 0x30
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	4613      	mov	r3, r2
 800fe5c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800fe64:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800fe66:	2300      	movs	r3, #0
 800fe68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800fe72:	2300      	movs	r3, #0
 800fe74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d101      	bne.n	800fe82 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800fe7e:	2302      	movs	r3, #2
 800fe80:	e0da      	b.n	8010038 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800fe86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	2b09      	cmp	r3, #9
 800fe8c:	d002      	beq.n	800fe94 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800fe8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe90:	2209      	movs	r2, #9
 800fe92:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	781a      	ldrb	r2, [r3, #0]
 800fe98:	6a3b      	ldr	r3, [r7, #32]
 800fe9a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	785a      	ldrb	r2, [r3, #1]
 800fea0:	6a3b      	ldr	r3, [r7, #32]
 800fea2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	3302      	adds	r3, #2
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	461a      	mov	r2, r3
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	3303      	adds	r3, #3
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	021b      	lsls	r3, r3, #8
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	4313      	orrs	r3, r2
 800feb8:	b29b      	uxth	r3, r3
 800feba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800febe:	bf28      	it	cs
 800fec0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	6a3b      	ldr	r3, [r7, #32]
 800fec8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	791a      	ldrb	r2, [r3, #4]
 800fece:	6a3b      	ldr	r3, [r7, #32]
 800fed0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	795a      	ldrb	r2, [r3, #5]
 800fed6:	6a3b      	ldr	r3, [r7, #32]
 800fed8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	799a      	ldrb	r2, [r3, #6]
 800fede:	6a3b      	ldr	r3, [r7, #32]
 800fee0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	79da      	ldrb	r2, [r3, #7]
 800fee6:	6a3b      	ldr	r3, [r7, #32]
 800fee8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	7a1a      	ldrb	r2, [r3, #8]
 800feee:	6a3b      	ldr	r3, [r7, #32]
 800fef0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fef2:	88fb      	ldrh	r3, [r7, #6]
 800fef4:	2b09      	cmp	r3, #9
 800fef6:	f240 809d 	bls.w	8010034 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800fefa:	2309      	movs	r3, #9
 800fefc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800fefe:	2300      	movs	r3, #0
 800ff00:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ff02:	e081      	b.n	8010008 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ff04:	f107 0316 	add.w	r3, r7, #22
 800ff08:	4619      	mov	r1, r3
 800ff0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff0c:	f000 f9e7 	bl	80102de <USBH_GetNextDesc>
 800ff10:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ff12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff14:	785b      	ldrb	r3, [r3, #1]
 800ff16:	2b04      	cmp	r3, #4
 800ff18:	d176      	bne.n	8010008 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ff1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	2b09      	cmp	r3, #9
 800ff20:	d002      	beq.n	800ff28 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ff22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff24:	2209      	movs	r2, #9
 800ff26:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ff28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff2c:	221a      	movs	r2, #26
 800ff2e:	fb02 f303 	mul.w	r3, r2, r3
 800ff32:	3308      	adds	r3, #8
 800ff34:	6a3a      	ldr	r2, [r7, #32]
 800ff36:	4413      	add	r3, r2
 800ff38:	3302      	adds	r3, #2
 800ff3a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ff3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ff3e:	69f8      	ldr	r0, [r7, #28]
 800ff40:	f000 f87e 	bl	8010040 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ff44:	2300      	movs	r3, #0
 800ff46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ff4e:	e043      	b.n	800ffd8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ff50:	f107 0316 	add.w	r3, r7, #22
 800ff54:	4619      	mov	r1, r3
 800ff56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff58:	f000 f9c1 	bl	80102de <USBH_GetNextDesc>
 800ff5c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ff5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff60:	785b      	ldrb	r3, [r3, #1]
 800ff62:	2b05      	cmp	r3, #5
 800ff64:	d138      	bne.n	800ffd8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	795b      	ldrb	r3, [r3, #5]
 800ff6a:	2b01      	cmp	r3, #1
 800ff6c:	d113      	bne.n	800ff96 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ff6e:	69fb      	ldr	r3, [r7, #28]
 800ff70:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ff72:	2b02      	cmp	r3, #2
 800ff74:	d003      	beq.n	800ff7e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	799b      	ldrb	r3, [r3, #6]
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d10b      	bne.n	800ff96 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	79db      	ldrb	r3, [r3, #7]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d10b      	bne.n	800ff9e <USBH_ParseCfgDesc+0x14e>
 800ff86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	2b09      	cmp	r3, #9
 800ff8c:	d007      	beq.n	800ff9e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800ff8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff90:	2209      	movs	r2, #9
 800ff92:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ff94:	e003      	b.n	800ff9e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ff96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff98:	2207      	movs	r2, #7
 800ff9a:	701a      	strb	r2, [r3, #0]
 800ff9c:	e000      	b.n	800ffa0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ff9e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ffa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffa4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ffa8:	3201      	adds	r2, #1
 800ffaa:	00d2      	lsls	r2, r2, #3
 800ffac:	211a      	movs	r1, #26
 800ffae:	fb01 f303 	mul.w	r3, r1, r3
 800ffb2:	4413      	add	r3, r2
 800ffb4:	3308      	adds	r3, #8
 800ffb6:	6a3a      	ldr	r2, [r7, #32]
 800ffb8:	4413      	add	r3, r2
 800ffba:	3304      	adds	r3, #4
 800ffbc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ffbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ffc0:	69b9      	ldr	r1, [r7, #24]
 800ffc2:	68f8      	ldr	r0, [r7, #12]
 800ffc4:	f000 f870 	bl	80100a8 <USBH_ParseEPDesc>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ffce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	791b      	ldrb	r3, [r3, #4]
 800ffdc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d204      	bcs.n	800ffee <USBH_ParseCfgDesc+0x19e>
 800ffe4:	6a3b      	ldr	r3, [r7, #32]
 800ffe6:	885a      	ldrh	r2, [r3, #2]
 800ffe8:	8afb      	ldrh	r3, [r7, #22]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d8b0      	bhi.n	800ff50 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	791b      	ldrb	r3, [r3, #4]
 800fff2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d201      	bcs.n	800fffe <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800fffa:	2303      	movs	r3, #3
 800fffc:	e01c      	b.n	8010038 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800fffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010002:	3301      	adds	r3, #1
 8010004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801000c:	2b01      	cmp	r3, #1
 801000e:	d805      	bhi.n	801001c <USBH_ParseCfgDesc+0x1cc>
 8010010:	6a3b      	ldr	r3, [r7, #32]
 8010012:	885a      	ldrh	r2, [r3, #2]
 8010014:	8afb      	ldrh	r3, [r7, #22]
 8010016:	429a      	cmp	r2, r3
 8010018:	f63f af74 	bhi.w	800ff04 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 801001c:	6a3b      	ldr	r3, [r7, #32]
 801001e:	791b      	ldrb	r3, [r3, #4]
 8010020:	2b02      	cmp	r3, #2
 8010022:	bf28      	it	cs
 8010024:	2302      	movcs	r3, #2
 8010026:	b2db      	uxtb	r3, r3
 8010028:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801002c:	429a      	cmp	r2, r3
 801002e:	d201      	bcs.n	8010034 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8010030:	2303      	movs	r3, #3
 8010032:	e001      	b.n	8010038 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8010034:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010038:	4618      	mov	r0, r3
 801003a:	3730      	adds	r7, #48	@ 0x30
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8010040:	b480      	push	{r7}
 8010042:	b083      	sub	sp, #12
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	781a      	ldrb	r2, [r3, #0]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	785a      	ldrb	r2, [r3, #1]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	789a      	ldrb	r2, [r3, #2]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	78da      	ldrb	r2, [r3, #3]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	3304      	adds	r3, #4
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	2b02      	cmp	r3, #2
 8010072:	bf28      	it	cs
 8010074:	2302      	movcs	r3, #2
 8010076:	b2da      	uxtb	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	795a      	ldrb	r2, [r3, #5]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	799a      	ldrb	r2, [r3, #6]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	79da      	ldrb	r2, [r3, #7]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	7a1a      	ldrb	r2, [r3, #8]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	721a      	strb	r2, [r3, #8]
}
 801009c:	bf00      	nop
 801009e:	370c      	adds	r7, #12
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr

080100a8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b087      	sub	sp, #28
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	781a      	ldrb	r2, [r3, #0]
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	785a      	ldrb	r2, [r3, #1]
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	789a      	ldrb	r2, [r3, #2]
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	78da      	ldrb	r2, [r3, #3]
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	3304      	adds	r3, #4
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	461a      	mov	r2, r3
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	3305      	adds	r3, #5
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	021b      	lsls	r3, r3, #8
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	4313      	orrs	r3, r2
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	799a      	ldrb	r2, [r3, #6]
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	889b      	ldrh	r3, [r3, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d009      	beq.n	8010116 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801010a:	d804      	bhi.n	8010116 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010114:	d901      	bls.n	801011a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8010116:	2303      	movs	r3, #3
 8010118:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010120:	2b00      	cmp	r3, #0
 8010122:	d136      	bne.n	8010192 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	78db      	ldrb	r3, [r3, #3]
 8010128:	f003 0303 	and.w	r3, r3, #3
 801012c:	2b02      	cmp	r3, #2
 801012e:	d108      	bne.n	8010142 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	889b      	ldrh	r3, [r3, #4]
 8010134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010138:	f240 8097 	bls.w	801026a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801013c:	2303      	movs	r3, #3
 801013e:	75fb      	strb	r3, [r7, #23]
 8010140:	e093      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	78db      	ldrb	r3, [r3, #3]
 8010146:	f003 0303 	and.w	r3, r3, #3
 801014a:	2b00      	cmp	r3, #0
 801014c:	d107      	bne.n	801015e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	889b      	ldrh	r3, [r3, #4]
 8010152:	2b40      	cmp	r3, #64	@ 0x40
 8010154:	f240 8089 	bls.w	801026a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010158:	2303      	movs	r3, #3
 801015a:	75fb      	strb	r3, [r7, #23]
 801015c:	e085      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	78db      	ldrb	r3, [r3, #3]
 8010162:	f003 0303 	and.w	r3, r3, #3
 8010166:	2b01      	cmp	r3, #1
 8010168:	d005      	beq.n	8010176 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	78db      	ldrb	r3, [r3, #3]
 801016e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010172:	2b03      	cmp	r3, #3
 8010174:	d10a      	bne.n	801018c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	799b      	ldrb	r3, [r3, #6]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d003      	beq.n	8010186 <USBH_ParseEPDesc+0xde>
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	799b      	ldrb	r3, [r3, #6]
 8010182:	2b10      	cmp	r3, #16
 8010184:	d970      	bls.n	8010268 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8010186:	2303      	movs	r3, #3
 8010188:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801018a:	e06d      	b.n	8010268 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801018c:	2303      	movs	r3, #3
 801018e:	75fb      	strb	r3, [r7, #23]
 8010190:	e06b      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010198:	2b01      	cmp	r3, #1
 801019a:	d13c      	bne.n	8010216 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	78db      	ldrb	r3, [r3, #3]
 80101a0:	f003 0303 	and.w	r3, r3, #3
 80101a4:	2b02      	cmp	r3, #2
 80101a6:	d005      	beq.n	80101b4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	78db      	ldrb	r3, [r3, #3]
 80101ac:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d106      	bne.n	80101c2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	889b      	ldrh	r3, [r3, #4]
 80101b8:	2b40      	cmp	r3, #64	@ 0x40
 80101ba:	d956      	bls.n	801026a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80101bc:	2303      	movs	r3, #3
 80101be:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80101c0:	e053      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	78db      	ldrb	r3, [r3, #3]
 80101c6:	f003 0303 	and.w	r3, r3, #3
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d10e      	bne.n	80101ec <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	799b      	ldrb	r3, [r3, #6]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d007      	beq.n	80101e6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80101da:	2b10      	cmp	r3, #16
 80101dc:	d803      	bhi.n	80101e6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80101e2:	2b40      	cmp	r3, #64	@ 0x40
 80101e4:	d941      	bls.n	801026a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80101e6:	2303      	movs	r3, #3
 80101e8:	75fb      	strb	r3, [r7, #23]
 80101ea:	e03e      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	78db      	ldrb	r3, [r3, #3]
 80101f0:	f003 0303 	and.w	r3, r3, #3
 80101f4:	2b03      	cmp	r3, #3
 80101f6:	d10b      	bne.n	8010210 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	799b      	ldrb	r3, [r3, #6]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d004      	beq.n	801020a <USBH_ParseEPDesc+0x162>
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	889b      	ldrh	r3, [r3, #4]
 8010204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010208:	d32f      	bcc.n	801026a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801020a:	2303      	movs	r3, #3
 801020c:	75fb      	strb	r3, [r7, #23]
 801020e:	e02c      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010210:	2303      	movs	r3, #3
 8010212:	75fb      	strb	r3, [r7, #23]
 8010214:	e029      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801021c:	2b02      	cmp	r3, #2
 801021e:	d120      	bne.n	8010262 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	78db      	ldrb	r3, [r3, #3]
 8010224:	f003 0303 	and.w	r3, r3, #3
 8010228:	2b00      	cmp	r3, #0
 801022a:	d106      	bne.n	801023a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	889b      	ldrh	r3, [r3, #4]
 8010230:	2b08      	cmp	r3, #8
 8010232:	d01a      	beq.n	801026a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010234:	2303      	movs	r3, #3
 8010236:	75fb      	strb	r3, [r7, #23]
 8010238:	e017      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	78db      	ldrb	r3, [r3, #3]
 801023e:	f003 0303 	and.w	r3, r3, #3
 8010242:	2b03      	cmp	r3, #3
 8010244:	d10a      	bne.n	801025c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	799b      	ldrb	r3, [r3, #6]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d003      	beq.n	8010256 <USBH_ParseEPDesc+0x1ae>
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	889b      	ldrh	r3, [r3, #4]
 8010252:	2b08      	cmp	r3, #8
 8010254:	d909      	bls.n	801026a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010256:	2303      	movs	r3, #3
 8010258:	75fb      	strb	r3, [r7, #23]
 801025a:	e006      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801025c:	2303      	movs	r3, #3
 801025e:	75fb      	strb	r3, [r7, #23]
 8010260:	e003      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010262:	2303      	movs	r3, #3
 8010264:	75fb      	strb	r3, [r7, #23]
 8010266:	e000      	b.n	801026a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010268:	bf00      	nop
  }

  return status;
 801026a:	7dfb      	ldrb	r3, [r7, #23]
}
 801026c:	4618      	mov	r0, r3
 801026e:	371c      	adds	r7, #28
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr

08010278 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010278:	b480      	push	{r7}
 801027a:	b087      	sub	sp, #28
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	4613      	mov	r3, r2
 8010284:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	3301      	adds	r3, #1
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	2b03      	cmp	r3, #3
 801028e:	d120      	bne.n	80102d2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	1e9a      	subs	r2, r3, #2
 8010296:	88fb      	ldrh	r3, [r7, #6]
 8010298:	4293      	cmp	r3, r2
 801029a:	bf28      	it	cs
 801029c:	4613      	movcs	r3, r2
 801029e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	3302      	adds	r3, #2
 80102a4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80102a6:	2300      	movs	r3, #0
 80102a8:	82fb      	strh	r3, [r7, #22]
 80102aa:	e00b      	b.n	80102c4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80102ac:	8afb      	ldrh	r3, [r7, #22]
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	4413      	add	r3, r2
 80102b2:	781a      	ldrb	r2, [r3, #0]
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	3301      	adds	r3, #1
 80102bc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80102be:	8afb      	ldrh	r3, [r7, #22]
 80102c0:	3302      	adds	r3, #2
 80102c2:	82fb      	strh	r3, [r7, #22]
 80102c4:	8afa      	ldrh	r2, [r7, #22]
 80102c6:	8abb      	ldrh	r3, [r7, #20]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d3ef      	bcc.n	80102ac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	2200      	movs	r2, #0
 80102d0:	701a      	strb	r2, [r3, #0]
  }
}
 80102d2:	bf00      	nop
 80102d4:	371c      	adds	r7, #28
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80102de:	b480      	push	{r7}
 80102e0:	b085      	sub	sp, #20
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
 80102e6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	881b      	ldrh	r3, [r3, #0]
 80102ec:	687a      	ldr	r2, [r7, #4]
 80102ee:	7812      	ldrb	r2, [r2, #0]
 80102f0:	4413      	add	r3, r2
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	4413      	add	r3, r2
 8010302:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010304:	68fb      	ldr	r3, [r7, #12]
}
 8010306:	4618      	mov	r0, r3
 8010308:	3714      	adds	r7, #20
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr

08010312 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010312:	b580      	push	{r7, lr}
 8010314:	b086      	sub	sp, #24
 8010316:	af00      	add	r7, sp, #0
 8010318:	60f8      	str	r0, [r7, #12]
 801031a:	60b9      	str	r1, [r7, #8]
 801031c:	4613      	mov	r3, r2
 801031e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010320:	2301      	movs	r3, #1
 8010322:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	789b      	ldrb	r3, [r3, #2]
 8010328:	2b01      	cmp	r3, #1
 801032a:	d002      	beq.n	8010332 <USBH_CtlReq+0x20>
 801032c:	2b02      	cmp	r3, #2
 801032e:	d00f      	beq.n	8010350 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8010330:	e027      	b.n	8010382 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	68ba      	ldr	r2, [r7, #8]
 8010336:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	88fa      	ldrh	r2, [r7, #6]
 801033c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2201      	movs	r2, #1
 8010342:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2202      	movs	r2, #2
 8010348:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801034a:	2301      	movs	r3, #1
 801034c:	75fb      	strb	r3, [r7, #23]
      break;
 801034e:	e018      	b.n	8010382 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f000 f81b 	bl	801038c <USBH_HandleControl>
 8010356:	4603      	mov	r3, r0
 8010358:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801035a:	7dfb      	ldrb	r3, [r7, #23]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d002      	beq.n	8010366 <USBH_CtlReq+0x54>
 8010360:	7dfb      	ldrb	r3, [r7, #23]
 8010362:	2b03      	cmp	r3, #3
 8010364:	d106      	bne.n	8010374 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2201      	movs	r2, #1
 801036a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2200      	movs	r2, #0
 8010370:	761a      	strb	r2, [r3, #24]
      break;
 8010372:	e005      	b.n	8010380 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8010374:	7dfb      	ldrb	r3, [r7, #23]
 8010376:	2b02      	cmp	r3, #2
 8010378:	d102      	bne.n	8010380 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2201      	movs	r2, #1
 801037e:	709a      	strb	r2, [r3, #2]
      break;
 8010380:	bf00      	nop
  }
  return status;
 8010382:	7dfb      	ldrb	r3, [r7, #23]
}
 8010384:	4618      	mov	r0, r3
 8010386:	3718      	adds	r7, #24
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}

0801038c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b086      	sub	sp, #24
 8010390:	af02      	add	r7, sp, #8
 8010392:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010394:	2301      	movs	r3, #1
 8010396:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010398:	2300      	movs	r3, #0
 801039a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	7e1b      	ldrb	r3, [r3, #24]
 80103a0:	3b01      	subs	r3, #1
 80103a2:	2b0a      	cmp	r3, #10
 80103a4:	f200 8156 	bhi.w	8010654 <USBH_HandleControl+0x2c8>
 80103a8:	a201      	add	r2, pc, #4	@ (adr r2, 80103b0 <USBH_HandleControl+0x24>)
 80103aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ae:	bf00      	nop
 80103b0:	080103dd 	.word	0x080103dd
 80103b4:	080103f7 	.word	0x080103f7
 80103b8:	08010461 	.word	0x08010461
 80103bc:	08010487 	.word	0x08010487
 80103c0:	080104bf 	.word	0x080104bf
 80103c4:	080104e9 	.word	0x080104e9
 80103c8:	0801053b 	.word	0x0801053b
 80103cc:	0801055d 	.word	0x0801055d
 80103d0:	08010599 	.word	0x08010599
 80103d4:	080105bf 	.word	0x080105bf
 80103d8:	080105fd 	.word	0x080105fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f103 0110 	add.w	r1, r3, #16
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	795b      	ldrb	r3, [r3, #5]
 80103e6:	461a      	mov	r2, r3
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f000 f943 	bl	8010674 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2202      	movs	r2, #2
 80103f2:	761a      	strb	r2, [r3, #24]
      break;
 80103f4:	e139      	b.n	801066a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	795b      	ldrb	r3, [r3, #5]
 80103fa:	4619      	mov	r1, r3
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f000 fee1 	bl	80111c4 <USBH_LL_GetURBState>
 8010402:	4603      	mov	r3, r0
 8010404:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010406:	7bbb      	ldrb	r3, [r7, #14]
 8010408:	2b01      	cmp	r3, #1
 801040a:	d11e      	bne.n	801044a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7c1b      	ldrb	r3, [r3, #16]
 8010410:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010414:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	8adb      	ldrh	r3, [r3, #22]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d00a      	beq.n	8010434 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801041e:	7b7b      	ldrb	r3, [r7, #13]
 8010420:	2b80      	cmp	r3, #128	@ 0x80
 8010422:	d103      	bne.n	801042c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2203      	movs	r2, #3
 8010428:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801042a:	e115      	b.n	8010658 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2205      	movs	r2, #5
 8010430:	761a      	strb	r2, [r3, #24]
      break;
 8010432:	e111      	b.n	8010658 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8010434:	7b7b      	ldrb	r3, [r7, #13]
 8010436:	2b80      	cmp	r3, #128	@ 0x80
 8010438:	d103      	bne.n	8010442 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2209      	movs	r2, #9
 801043e:	761a      	strb	r2, [r3, #24]
      break;
 8010440:	e10a      	b.n	8010658 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2207      	movs	r2, #7
 8010446:	761a      	strb	r2, [r3, #24]
      break;
 8010448:	e106      	b.n	8010658 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801044a:	7bbb      	ldrb	r3, [r7, #14]
 801044c:	2b04      	cmp	r3, #4
 801044e:	d003      	beq.n	8010458 <USBH_HandleControl+0xcc>
 8010450:	7bbb      	ldrb	r3, [r7, #14]
 8010452:	2b02      	cmp	r3, #2
 8010454:	f040 8100 	bne.w	8010658 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	220b      	movs	r2, #11
 801045c:	761a      	strb	r2, [r3, #24]
      break;
 801045e:	e0fb      	b.n	8010658 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010466:	b29a      	uxth	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6899      	ldr	r1, [r3, #8]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	899a      	ldrh	r2, [r3, #12]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	791b      	ldrb	r3, [r3, #4]
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 f93a 	bl	80106f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2204      	movs	r2, #4
 8010482:	761a      	strb	r2, [r3, #24]
      break;
 8010484:	e0f1      	b.n	801066a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	791b      	ldrb	r3, [r3, #4]
 801048a:	4619      	mov	r1, r3
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 fe99 	bl	80111c4 <USBH_LL_GetURBState>
 8010492:	4603      	mov	r3, r0
 8010494:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010496:	7bbb      	ldrb	r3, [r7, #14]
 8010498:	2b01      	cmp	r3, #1
 801049a:	d102      	bne.n	80104a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2209      	movs	r2, #9
 80104a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80104a2:	7bbb      	ldrb	r3, [r7, #14]
 80104a4:	2b05      	cmp	r3, #5
 80104a6:	d102      	bne.n	80104ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80104a8:	2303      	movs	r3, #3
 80104aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80104ac:	e0d6      	b.n	801065c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80104ae:	7bbb      	ldrb	r3, [r7, #14]
 80104b0:	2b04      	cmp	r3, #4
 80104b2:	f040 80d3 	bne.w	801065c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	220b      	movs	r2, #11
 80104ba:	761a      	strb	r2, [r3, #24]
      break;
 80104bc:	e0ce      	b.n	801065c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6899      	ldr	r1, [r3, #8]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	899a      	ldrh	r2, [r3, #12]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	795b      	ldrb	r3, [r3, #5]
 80104ca:	2001      	movs	r0, #1
 80104cc:	9000      	str	r0, [sp, #0]
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 f8ea 	bl	80106a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80104da:	b29a      	uxth	r2, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2206      	movs	r2, #6
 80104e4:	761a      	strb	r2, [r3, #24]
      break;
 80104e6:	e0c0      	b.n	801066a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	795b      	ldrb	r3, [r3, #5]
 80104ec:	4619      	mov	r1, r3
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 fe68 	bl	80111c4 <USBH_LL_GetURBState>
 80104f4:	4603      	mov	r3, r0
 80104f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80104f8:	7bbb      	ldrb	r3, [r7, #14]
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d103      	bne.n	8010506 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2207      	movs	r2, #7
 8010502:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010504:	e0ac      	b.n	8010660 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8010506:	7bbb      	ldrb	r3, [r7, #14]
 8010508:	2b05      	cmp	r3, #5
 801050a:	d105      	bne.n	8010518 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	220c      	movs	r2, #12
 8010510:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010512:	2303      	movs	r3, #3
 8010514:	73fb      	strb	r3, [r7, #15]
      break;
 8010516:	e0a3      	b.n	8010660 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010518:	7bbb      	ldrb	r3, [r7, #14]
 801051a:	2b02      	cmp	r3, #2
 801051c:	d103      	bne.n	8010526 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2205      	movs	r2, #5
 8010522:	761a      	strb	r2, [r3, #24]
      break;
 8010524:	e09c      	b.n	8010660 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8010526:	7bbb      	ldrb	r3, [r7, #14]
 8010528:	2b04      	cmp	r3, #4
 801052a:	f040 8099 	bne.w	8010660 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	220b      	movs	r2, #11
 8010532:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010534:	2302      	movs	r3, #2
 8010536:	73fb      	strb	r3, [r7, #15]
      break;
 8010538:	e092      	b.n	8010660 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	791b      	ldrb	r3, [r3, #4]
 801053e:	2200      	movs	r2, #0
 8010540:	2100      	movs	r1, #0
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 f8d5 	bl	80106f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801054e:	b29a      	uxth	r2, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2208      	movs	r2, #8
 8010558:	761a      	strb	r2, [r3, #24]

      break;
 801055a:	e086      	b.n	801066a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	791b      	ldrb	r3, [r3, #4]
 8010560:	4619      	mov	r1, r3
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 fe2e 	bl	80111c4 <USBH_LL_GetURBState>
 8010568:	4603      	mov	r3, r0
 801056a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801056c:	7bbb      	ldrb	r3, [r7, #14]
 801056e:	2b01      	cmp	r3, #1
 8010570:	d105      	bne.n	801057e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	220d      	movs	r2, #13
 8010576:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010578:	2300      	movs	r3, #0
 801057a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801057c:	e072      	b.n	8010664 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 801057e:	7bbb      	ldrb	r3, [r7, #14]
 8010580:	2b04      	cmp	r3, #4
 8010582:	d103      	bne.n	801058c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	220b      	movs	r2, #11
 8010588:	761a      	strb	r2, [r3, #24]
      break;
 801058a:	e06b      	b.n	8010664 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 801058c:	7bbb      	ldrb	r3, [r7, #14]
 801058e:	2b05      	cmp	r3, #5
 8010590:	d168      	bne.n	8010664 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8010592:	2303      	movs	r3, #3
 8010594:	73fb      	strb	r3, [r7, #15]
      break;
 8010596:	e065      	b.n	8010664 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	795b      	ldrb	r3, [r3, #5]
 801059c:	2201      	movs	r2, #1
 801059e:	9200      	str	r2, [sp, #0]
 80105a0:	2200      	movs	r2, #0
 80105a2:	2100      	movs	r1, #0
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f000 f87f 	bl	80106a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	220a      	movs	r2, #10
 80105ba:	761a      	strb	r2, [r3, #24]
      break;
 80105bc:	e055      	b.n	801066a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	795b      	ldrb	r3, [r3, #5]
 80105c2:	4619      	mov	r1, r3
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f000 fdfd 	bl	80111c4 <USBH_LL_GetURBState>
 80105ca:	4603      	mov	r3, r0
 80105cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80105ce:	7bbb      	ldrb	r3, [r7, #14]
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d105      	bne.n	80105e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80105d4:	2300      	movs	r3, #0
 80105d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	220d      	movs	r2, #13
 80105dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80105de:	e043      	b.n	8010668 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80105e0:	7bbb      	ldrb	r3, [r7, #14]
 80105e2:	2b02      	cmp	r3, #2
 80105e4:	d103      	bne.n	80105ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2209      	movs	r2, #9
 80105ea:	761a      	strb	r2, [r3, #24]
      break;
 80105ec:	e03c      	b.n	8010668 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80105ee:	7bbb      	ldrb	r3, [r7, #14]
 80105f0:	2b04      	cmp	r3, #4
 80105f2:	d139      	bne.n	8010668 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	220b      	movs	r2, #11
 80105f8:	761a      	strb	r2, [r3, #24]
      break;
 80105fa:	e035      	b.n	8010668 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	7e5b      	ldrb	r3, [r3, #25]
 8010600:	3301      	adds	r3, #1
 8010602:	b2da      	uxtb	r2, r3
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	765a      	strb	r2, [r3, #25]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	7e5b      	ldrb	r3, [r3, #25]
 801060c:	2b02      	cmp	r3, #2
 801060e:	d806      	bhi.n	801061e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2201      	movs	r2, #1
 8010614:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2201      	movs	r2, #1
 801061a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801061c:	e025      	b.n	801066a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010624:	2106      	movs	r1, #6
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	795b      	ldrb	r3, [r3, #5]
 8010634:	4619      	mov	r1, r3
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f000 f90c 	bl	8010854 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	791b      	ldrb	r3, [r3, #4]
 8010640:	4619      	mov	r1, r3
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f000 f906 	bl	8010854 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801064e:	2302      	movs	r3, #2
 8010650:	73fb      	strb	r3, [r7, #15]
      break;
 8010652:	e00a      	b.n	801066a <USBH_HandleControl+0x2de>

    default:
      break;
 8010654:	bf00      	nop
 8010656:	e008      	b.n	801066a <USBH_HandleControl+0x2de>
      break;
 8010658:	bf00      	nop
 801065a:	e006      	b.n	801066a <USBH_HandleControl+0x2de>
      break;
 801065c:	bf00      	nop
 801065e:	e004      	b.n	801066a <USBH_HandleControl+0x2de>
      break;
 8010660:	bf00      	nop
 8010662:	e002      	b.n	801066a <USBH_HandleControl+0x2de>
      break;
 8010664:	bf00      	nop
 8010666:	e000      	b.n	801066a <USBH_HandleControl+0x2de>
      break;
 8010668:	bf00      	nop
  }

  return status;
 801066a:	7bfb      	ldrb	r3, [r7, #15]
}
 801066c:	4618      	mov	r0, r3
 801066e:	3710      	adds	r7, #16
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b088      	sub	sp, #32
 8010678:	af04      	add	r7, sp, #16
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	4613      	mov	r3, r2
 8010680:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010682:	79f9      	ldrb	r1, [r7, #7]
 8010684:	2300      	movs	r3, #0
 8010686:	9303      	str	r3, [sp, #12]
 8010688:	2308      	movs	r3, #8
 801068a:	9302      	str	r3, [sp, #8]
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	9301      	str	r3, [sp, #4]
 8010690:	2300      	movs	r3, #0
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	2300      	movs	r3, #0
 8010696:	2200      	movs	r2, #0
 8010698:	68f8      	ldr	r0, [r7, #12]
 801069a:	f000 fd62 	bl	8011162 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801069e:	2300      	movs	r3, #0
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3710      	adds	r7, #16
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b088      	sub	sp, #32
 80106ac:	af04      	add	r7, sp, #16
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	4611      	mov	r1, r2
 80106b4:	461a      	mov	r2, r3
 80106b6:	460b      	mov	r3, r1
 80106b8:	80fb      	strh	r3, [r7, #6]
 80106ba:	4613      	mov	r3, r2
 80106bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d001      	beq.n	80106cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80106c8:	2300      	movs	r3, #0
 80106ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80106cc:	7979      	ldrb	r1, [r7, #5]
 80106ce:	7e3b      	ldrb	r3, [r7, #24]
 80106d0:	9303      	str	r3, [sp, #12]
 80106d2:	88fb      	ldrh	r3, [r7, #6]
 80106d4:	9302      	str	r3, [sp, #8]
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	9301      	str	r3, [sp, #4]
 80106da:	2301      	movs	r3, #1
 80106dc:	9300      	str	r3, [sp, #0]
 80106de:	2300      	movs	r3, #0
 80106e0:	2200      	movs	r2, #0
 80106e2:	68f8      	ldr	r0, [r7, #12]
 80106e4:	f000 fd3d 	bl	8011162 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80106e8:	2300      	movs	r3, #0
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3710      	adds	r7, #16
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b088      	sub	sp, #32
 80106f6:	af04      	add	r7, sp, #16
 80106f8:	60f8      	str	r0, [r7, #12]
 80106fa:	60b9      	str	r1, [r7, #8]
 80106fc:	4611      	mov	r1, r2
 80106fe:	461a      	mov	r2, r3
 8010700:	460b      	mov	r3, r1
 8010702:	80fb      	strh	r3, [r7, #6]
 8010704:	4613      	mov	r3, r2
 8010706:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010708:	7979      	ldrb	r1, [r7, #5]
 801070a:	2300      	movs	r3, #0
 801070c:	9303      	str	r3, [sp, #12]
 801070e:	88fb      	ldrh	r3, [r7, #6]
 8010710:	9302      	str	r3, [sp, #8]
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	9301      	str	r3, [sp, #4]
 8010716:	2301      	movs	r3, #1
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	2300      	movs	r3, #0
 801071c:	2201      	movs	r2, #1
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	f000 fd1f 	bl	8011162 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010724:	2300      	movs	r3, #0

}
 8010726:	4618      	mov	r0, r3
 8010728:	3710      	adds	r7, #16
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}

0801072e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801072e:	b580      	push	{r7, lr}
 8010730:	b088      	sub	sp, #32
 8010732:	af04      	add	r7, sp, #16
 8010734:	60f8      	str	r0, [r7, #12]
 8010736:	60b9      	str	r1, [r7, #8]
 8010738:	4611      	mov	r1, r2
 801073a:	461a      	mov	r2, r3
 801073c:	460b      	mov	r3, r1
 801073e:	80fb      	strh	r3, [r7, #6]
 8010740:	4613      	mov	r3, r2
 8010742:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801074a:	2b00      	cmp	r3, #0
 801074c:	d001      	beq.n	8010752 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801074e:	2300      	movs	r3, #0
 8010750:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010752:	7979      	ldrb	r1, [r7, #5]
 8010754:	7e3b      	ldrb	r3, [r7, #24]
 8010756:	9303      	str	r3, [sp, #12]
 8010758:	88fb      	ldrh	r3, [r7, #6]
 801075a:	9302      	str	r3, [sp, #8]
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	9301      	str	r3, [sp, #4]
 8010760:	2301      	movs	r3, #1
 8010762:	9300      	str	r3, [sp, #0]
 8010764:	2302      	movs	r3, #2
 8010766:	2200      	movs	r2, #0
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f000 fcfa 	bl	8011162 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3710      	adds	r7, #16
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b088      	sub	sp, #32
 801077c:	af04      	add	r7, sp, #16
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	4611      	mov	r1, r2
 8010784:	461a      	mov	r2, r3
 8010786:	460b      	mov	r3, r1
 8010788:	80fb      	strh	r3, [r7, #6]
 801078a:	4613      	mov	r3, r2
 801078c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801078e:	7979      	ldrb	r1, [r7, #5]
 8010790:	2300      	movs	r3, #0
 8010792:	9303      	str	r3, [sp, #12]
 8010794:	88fb      	ldrh	r3, [r7, #6]
 8010796:	9302      	str	r3, [sp, #8]
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	9301      	str	r3, [sp, #4]
 801079c:	2301      	movs	r3, #1
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	2302      	movs	r3, #2
 80107a2:	2201      	movs	r2, #1
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	f000 fcdc 	bl	8011162 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80107aa:	2300      	movs	r3, #0
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b086      	sub	sp, #24
 80107b8:	af04      	add	r7, sp, #16
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	4608      	mov	r0, r1
 80107be:	4611      	mov	r1, r2
 80107c0:	461a      	mov	r2, r3
 80107c2:	4603      	mov	r3, r0
 80107c4:	70fb      	strb	r3, [r7, #3]
 80107c6:	460b      	mov	r3, r1
 80107c8:	70bb      	strb	r3, [r7, #2]
 80107ca:	4613      	mov	r3, r2
 80107cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80107ce:	7878      	ldrb	r0, [r7, #1]
 80107d0:	78ba      	ldrb	r2, [r7, #2]
 80107d2:	78f9      	ldrb	r1, [r7, #3]
 80107d4:	8b3b      	ldrh	r3, [r7, #24]
 80107d6:	9302      	str	r3, [sp, #8]
 80107d8:	7d3b      	ldrb	r3, [r7, #20]
 80107da:	9301      	str	r3, [sp, #4]
 80107dc:	7c3b      	ldrb	r3, [r7, #16]
 80107de:	9300      	str	r3, [sp, #0]
 80107e0:	4603      	mov	r3, r0
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 fc6f 	bl	80110c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 80107e8:	2300      	movs	r3, #0
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3708      	adds	r7, #8
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}

080107f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80107f2:	b580      	push	{r7, lr}
 80107f4:	b082      	sub	sp, #8
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
 80107fa:	460b      	mov	r3, r1
 80107fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80107fe:	78fb      	ldrb	r3, [r7, #3]
 8010800:	4619      	mov	r1, r3
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 fc8e 	bl	8011124 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010808:	2300      	movs	r3, #0
}
 801080a:	4618      	mov	r0, r3
 801080c:	3708      	adds	r7, #8
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b084      	sub	sp, #16
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	460b      	mov	r3, r1
 801081c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f000 f836 	bl	8010890 <USBH_GetFreePipe>
 8010824:	4603      	mov	r3, r0
 8010826:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010828:	89fb      	ldrh	r3, [r7, #14]
 801082a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801082e:	4293      	cmp	r3, r2
 8010830:	d00a      	beq.n	8010848 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8010832:	78fa      	ldrb	r2, [r7, #3]
 8010834:	89fb      	ldrh	r3, [r7, #14]
 8010836:	f003 030f 	and.w	r3, r3, #15
 801083a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801083e:	6879      	ldr	r1, [r7, #4]
 8010840:	33e0      	adds	r3, #224	@ 0xe0
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	440b      	add	r3, r1
 8010846:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010848:	89fb      	ldrh	r3, [r7, #14]
 801084a:	b2db      	uxtb	r3, r3
}
 801084c:	4618      	mov	r0, r3
 801084e:	3710      	adds	r7, #16
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010854:	b480      	push	{r7}
 8010856:	b083      	sub	sp, #12
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	460b      	mov	r3, r1
 801085e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010860:	78fb      	ldrb	r3, [r7, #3]
 8010862:	2b0f      	cmp	r3, #15
 8010864:	d80d      	bhi.n	8010882 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010866:	78fb      	ldrb	r3, [r7, #3]
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	33e0      	adds	r3, #224	@ 0xe0
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	4413      	add	r3, r2
 8010870:	685a      	ldr	r2, [r3, #4]
 8010872:	78fb      	ldrb	r3, [r7, #3]
 8010874:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010878:	6879      	ldr	r1, [r7, #4]
 801087a:	33e0      	adds	r3, #224	@ 0xe0
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	440b      	add	r3, r1
 8010880:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010882:	2300      	movs	r3, #0
}
 8010884:	4618      	mov	r0, r3
 8010886:	370c      	adds	r7, #12
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010890:	b480      	push	{r7}
 8010892:	b085      	sub	sp, #20
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010898:	2300      	movs	r3, #0
 801089a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801089c:	2300      	movs	r3, #0
 801089e:	73fb      	strb	r3, [r7, #15]
 80108a0:	e00f      	b.n	80108c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80108a2:	7bfb      	ldrb	r3, [r7, #15]
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	33e0      	adds	r3, #224	@ 0xe0
 80108a8:	009b      	lsls	r3, r3, #2
 80108aa:	4413      	add	r3, r2
 80108ac:	685b      	ldr	r3, [r3, #4]
 80108ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d102      	bne.n	80108bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80108b6:	7bfb      	ldrb	r3, [r7, #15]
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	e007      	b.n	80108cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80108bc:	7bfb      	ldrb	r3, [r7, #15]
 80108be:	3301      	adds	r3, #1
 80108c0:	73fb      	strb	r3, [r7, #15]
 80108c2:	7bfb      	ldrb	r3, [r7, #15]
 80108c4:	2b0f      	cmp	r3, #15
 80108c6:	d9ec      	bls.n	80108a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80108c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3714      	adds	r7, #20
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr

080108d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80108d8:	b480      	push	{r7}
 80108da:	b087      	sub	sp, #28
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	4613      	mov	r3, r2
 80108e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80108e6:	2301      	movs	r3, #1
 80108e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80108ea:	2300      	movs	r3, #0
 80108ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80108ee:	4b1f      	ldr	r3, [pc, #124]	@ (801096c <FATFS_LinkDriverEx+0x94>)
 80108f0:	7a5b      	ldrb	r3, [r3, #9]
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d131      	bne.n	801095c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80108f8:	4b1c      	ldr	r3, [pc, #112]	@ (801096c <FATFS_LinkDriverEx+0x94>)
 80108fa:	7a5b      	ldrb	r3, [r3, #9]
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	461a      	mov	r2, r3
 8010900:	4b1a      	ldr	r3, [pc, #104]	@ (801096c <FATFS_LinkDriverEx+0x94>)
 8010902:	2100      	movs	r1, #0
 8010904:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010906:	4b19      	ldr	r3, [pc, #100]	@ (801096c <FATFS_LinkDriverEx+0x94>)
 8010908:	7a5b      	ldrb	r3, [r3, #9]
 801090a:	b2db      	uxtb	r3, r3
 801090c:	4a17      	ldr	r2, [pc, #92]	@ (801096c <FATFS_LinkDriverEx+0x94>)
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	4413      	add	r3, r2
 8010912:	68fa      	ldr	r2, [r7, #12]
 8010914:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010916:	4b15      	ldr	r3, [pc, #84]	@ (801096c <FATFS_LinkDriverEx+0x94>)
 8010918:	7a5b      	ldrb	r3, [r3, #9]
 801091a:	b2db      	uxtb	r3, r3
 801091c:	461a      	mov	r2, r3
 801091e:	4b13      	ldr	r3, [pc, #76]	@ (801096c <FATFS_LinkDriverEx+0x94>)
 8010920:	4413      	add	r3, r2
 8010922:	79fa      	ldrb	r2, [r7, #7]
 8010924:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010926:	4b11      	ldr	r3, [pc, #68]	@ (801096c <FATFS_LinkDriverEx+0x94>)
 8010928:	7a5b      	ldrb	r3, [r3, #9]
 801092a:	b2db      	uxtb	r3, r3
 801092c:	1c5a      	adds	r2, r3, #1
 801092e:	b2d1      	uxtb	r1, r2
 8010930:	4a0e      	ldr	r2, [pc, #56]	@ (801096c <FATFS_LinkDriverEx+0x94>)
 8010932:	7251      	strb	r1, [r2, #9]
 8010934:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010936:	7dbb      	ldrb	r3, [r7, #22]
 8010938:	3330      	adds	r3, #48	@ 0x30
 801093a:	b2da      	uxtb	r2, r3
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	3301      	adds	r3, #1
 8010944:	223a      	movs	r2, #58	@ 0x3a
 8010946:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	3302      	adds	r3, #2
 801094c:	222f      	movs	r2, #47	@ 0x2f
 801094e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	3303      	adds	r3, #3
 8010954:	2200      	movs	r2, #0
 8010956:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010958:	2300      	movs	r3, #0
 801095a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801095c:	7dfb      	ldrb	r3, [r7, #23]
}
 801095e:	4618      	mov	r0, r3
 8010960:	371c      	adds	r7, #28
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	20000b2c 	.word	0x20000b2c

08010970 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801097a:	2200      	movs	r2, #0
 801097c:	6839      	ldr	r1, [r7, #0]
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f7ff ffaa 	bl	80108d8 <FATFS_LinkDriverEx>
 8010984:	4603      	mov	r3, r0
}
 8010986:	4618      	mov	r0, r3
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
	...

08010990 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010996:	2300      	movs	r3, #0
 8010998:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 801099a:	4b20      	ldr	r3, [pc, #128]	@ (8010a1c <BSP_SD_Init+0x8c>)
 801099c:	4a20      	ldr	r2, [pc, #128]	@ (8010a20 <BSP_SD_Init+0x90>)
 801099e:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80109a0:	4b1e      	ldr	r3, [pc, #120]	@ (8010a1c <BSP_SD_Init+0x8c>)
 80109a2:	2200      	movs	r2, #0
 80109a4:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80109a6:	4b1d      	ldr	r3, [pc, #116]	@ (8010a1c <BSP_SD_Init+0x8c>)
 80109a8:	2200      	movs	r2, #0
 80109aa:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80109ac:	4b1b      	ldr	r3, [pc, #108]	@ (8010a1c <BSP_SD_Init+0x8c>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80109b2:	4b1a      	ldr	r3, [pc, #104]	@ (8010a1c <BSP_SD_Init+0x8c>)
 80109b4:	2200      	movs	r2, #0
 80109b6:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80109b8:	4b18      	ldr	r3, [pc, #96]	@ (8010a1c <BSP_SD_Init+0x8c>)
 80109ba:	2200      	movs	r2, #0
 80109bc:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80109be:	4b17      	ldr	r3, [pc, #92]	@ (8010a1c <BSP_SD_Init+0x8c>)
 80109c0:	2200      	movs	r2, #0
 80109c2:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80109c4:	2100      	movs	r1, #0
 80109c6:	4815      	ldr	r0, [pc, #84]	@ (8010a1c <BSP_SD_Init+0x8c>)
 80109c8:	f000 f968 	bl	8010c9c <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 80109cc:	f000 f82a 	bl	8010a24 <BSP_SD_IsDetected>
 80109d0:	4603      	mov	r3, r0
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d001      	beq.n	80109da <BSP_SD_Init+0x4a>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80109d6:	2302      	movs	r3, #2
 80109d8:	e01c      	b.n	8010a14 <BSP_SD_Init+0x84>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 80109da:	2100      	movs	r1, #0
 80109dc:	480f      	ldr	r0, [pc, #60]	@ (8010a1c <BSP_SD_Init+0x8c>)
 80109de:	f000 f871 	bl	8010ac4 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 80109e2:	480e      	ldr	r0, [pc, #56]	@ (8010a1c <BSP_SD_Init+0x8c>)
 80109e4:	f7f8 fe22 	bl	800962c <HAL_SD_Init>
 80109e8:	4603      	mov	r3, r0
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d001      	beq.n	80109f2 <BSP_SD_Init+0x62>
  {
    sd_state = MSD_ERROR;
 80109ee:	2301      	movs	r3, #1
 80109f0:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 80109f2:	79fb      	ldrb	r3, [r7, #7]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d10c      	bne.n	8010a12 <BSP_SD_Init+0x82>
  {
    /* Enable wide operation */ 
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80109f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80109fc:	4807      	ldr	r0, [pc, #28]	@ (8010a1c <BSP_SD_Init+0x8c>)
 80109fe:	f7f9 fc01 	bl	800a204 <HAL_SD_ConfigWideBusOperation>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d002      	beq.n	8010a0e <BSP_SD_Init+0x7e>
    {
      sd_state = MSD_ERROR;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	71fb      	strb	r3, [r7, #7]
 8010a0c:	e001      	b.n	8010a12 <BSP_SD_Init+0x82>
    }
    else
    {
      sd_state = MSD_OK;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 8010a12:	79fb      	ldrb	r3, [r7, #7]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	20000b38 	.word	0x20000b38
 8010a20:	40012c00 	.word	0x40012c00

08010a24 <BSP_SD_IsDetected>:
/**
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
  __IO uint8_t      status = SD_PRESENT;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8010a2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010a32:	4807      	ldr	r0, [pc, #28]	@ (8010a50 <BSP_SD_IsDetected+0x2c>)
 8010a34:	f7f3 ff78 	bl	8004928 <HAL_GPIO_ReadPin>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d101      	bne.n	8010a42 <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010a42:	79fb      	ldrb	r3, [r7, #7]
 8010a44:	b2db      	uxtb	r3, r3
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	40020800 	.word	0x40020800

08010a54 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b086      	sub	sp, #24
 8010a58:	af02      	add	r7, sp, #8
 8010a5a:	60f8      	str	r0, [r7, #12]
 8010a5c:	60b9      	str	r1, [r7, #8]
 8010a5e:	607a      	str	r2, [r7, #4]
 8010a60:	603b      	str	r3, [r7, #0]
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	9300      	str	r3, [sp, #0]
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	68ba      	ldr	r2, [r7, #8]
 8010a6a:	68f9      	ldr	r1, [r7, #12]
 8010a6c:	4806      	ldr	r0, [pc, #24]	@ (8010a88 <BSP_SD_ReadBlocks+0x34>)
 8010a6e:	f7f8 fe95 	bl	800979c <HAL_SD_ReadBlocks>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d001      	beq.n	8010a7c <BSP_SD_ReadBlocks+0x28>
  {
    return MSD_ERROR;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	e000      	b.n	8010a7e <BSP_SD_ReadBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8010a7c:	2300      	movs	r3, #0
  }
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3710      	adds	r7, #16
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	bf00      	nop
 8010a88:	20000b38 	.word	0x20000b38

08010a8c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b086      	sub	sp, #24
 8010a90:	af02      	add	r7, sp, #8
 8010a92:	60f8      	str	r0, [r7, #12]
 8010a94:	60b9      	str	r1, [r7, #8]
 8010a96:	607a      	str	r2, [r7, #4]
 8010a98:	603b      	str	r3, [r7, #0]
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	68ba      	ldr	r2, [r7, #8]
 8010aa2:	68f9      	ldr	r1, [r7, #12]
 8010aa4:	4806      	ldr	r0, [pc, #24]	@ (8010ac0 <BSP_SD_WriteBlocks+0x34>)
 8010aa6:	f7f9 f857 	bl	8009b58 <HAL_SD_WriteBlocks>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d001      	beq.n	8010ab4 <BSP_SD_WriteBlocks+0x28>
  {
    return MSD_ERROR;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e000      	b.n	8010ab6 <BSP_SD_WriteBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8010ab4:	2300      	movs	r3, #0
  }
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3710      	adds	r7, #16
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	20000b38 	.word	0x20000b38

08010ac4 <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b08c      	sub	sp, #48	@ 0x30
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8010ace:	4b6c      	ldr	r3, [pc, #432]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ad2:	4a6b      	ldr	r2, [pc, #428]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010ad4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8010ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8010ada:	4b69      	ldr	r3, [pc, #420]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010ae2:	61bb      	str	r3, [r7, #24]
 8010ae4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 8010ae6:	4b66      	ldr	r3, [pc, #408]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aea:	4a65      	ldr	r2, [pc, #404]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010aec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8010af2:	4b63      	ldr	r3, [pc, #396]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010afa:	617b      	str	r3, [r7, #20]
 8010afc:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010afe:	4b60      	ldr	r3, [pc, #384]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b02:	4a5f      	ldr	r2, [pc, #380]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010b04:	f043 0304 	orr.w	r3, r3, #4
 8010b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8010b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b0e:	f003 0304 	and.w	r3, r3, #4
 8010b12:	613b      	str	r3, [r7, #16]
 8010b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010b16:	4b5a      	ldr	r3, [pc, #360]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b1a:	4a59      	ldr	r2, [pc, #356]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010b1c:	f043 0308 	orr.w	r3, r3, #8
 8010b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8010b22:	4b57      	ldr	r3, [pc, #348]	@ (8010c80 <BSP_SD_MspInit+0x1bc>)
 8010b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b26:	f003 0308 	and.w	r3, r3, #8
 8010b2a:	60fb      	str	r3, [r7, #12]
 8010b2c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010b2e:	2302      	movs	r3, #2
 8010b30:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010b32:	2301      	movs	r3, #1
 8010b34:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8010b36:	2303      	movs	r3, #3
 8010b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8010b3a:	230c      	movs	r3, #12
 8010b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8010b3e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8010b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8010b44:	f107 031c 	add.w	r3, r7, #28
 8010b48:	4619      	mov	r1, r3
 8010b4a:	484e      	ldr	r0, [pc, #312]	@ (8010c84 <BSP_SD_MspInit+0x1c0>)
 8010b4c:	f7f3 fd40 	bl	80045d0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8010b50:	2304      	movs	r3, #4
 8010b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8010b54:	f107 031c 	add.w	r3, r7, #28
 8010b58:	4619      	mov	r1, r3
 8010b5a:	484b      	ldr	r0, [pc, #300]	@ (8010c88 <BSP_SD_MspInit+0x1c4>)
 8010b5c:	f7f3 fd38 	bl	80045d0 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8010b60:	2200      	movs	r2, #0
 8010b62:	210e      	movs	r1, #14
 8010b64:	2031      	movs	r0, #49	@ 0x31
 8010b66:	f7f2 fca5 	bl	80034b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8010b6a:	2031      	movs	r0, #49	@ 0x31
 8010b6c:	f7f2 fcbe 	bl	80034ec <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8010b70:	4b46      	ldr	r3, [pc, #280]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010b72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8010b76:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8010b78:	4b44      	ldr	r3, [pc, #272]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8010b7e:	4b43      	ldr	r3, [pc, #268]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8010b84:	4b41      	ldr	r3, [pc, #260]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010b8a:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8010b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010b8e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010b92:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8010b94:	4b3d      	ldr	r3, [pc, #244]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010b96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8010b9a:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8010b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010b9e:	2220      	movs	r2, #32
 8010ba0:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8010ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010ba4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8010ba8:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8010baa:	4b38      	ldr	r3, [pc, #224]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010bac:	2204      	movs	r2, #4
 8010bae:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8010bb0:	4b36      	ldr	r3, [pc, #216]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010bb2:	2203      	movs	r2, #3
 8010bb4:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8010bb6:	4b35      	ldr	r3, [pc, #212]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010bb8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8010bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8010bbe:	4b33      	ldr	r3, [pc, #204]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010bc0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8010bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8010bc6:	4b31      	ldr	r3, [pc, #196]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010bc8:	4a31      	ldr	r2, [pc, #196]	@ (8010c90 <BSP_SD_MspInit+0x1cc>)
 8010bca:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	4a2f      	ldr	r2, [pc, #188]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010bd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8010bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8010bd8:	482c      	ldr	r0, [pc, #176]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010bda:	f7f2 feaf 	bl	800393c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8010bde:	482b      	ldr	r0, [pc, #172]	@ (8010c8c <BSP_SD_MspInit+0x1c8>)
 8010be0:	f7f2 fdfe 	bl	80037e0 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8010be4:	4b2b      	ldr	r3, [pc, #172]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010be6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8010bea:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8010bec:	4b29      	ldr	r3, [pc, #164]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010bee:	2240      	movs	r2, #64	@ 0x40
 8010bf0:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8010bf2:	4b28      	ldr	r3, [pc, #160]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8010bf8:	4b26      	ldr	r3, [pc, #152]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010bfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010bfe:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8010c00:	4b24      	ldr	r3, [pc, #144]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010c06:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8010c08:	4b22      	ldr	r3, [pc, #136]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8010c0e:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8010c10:	4b20      	ldr	r3, [pc, #128]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c12:	2220      	movs	r2, #32
 8010c14:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8010c16:	4b1f      	ldr	r3, [pc, #124]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c18:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8010c1c:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8010c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c20:	2204      	movs	r2, #4
 8010c22:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8010c24:	4b1b      	ldr	r3, [pc, #108]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c26:	2203      	movs	r2, #3
 8010c28:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8010c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c2c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8010c30:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8010c32:	4b18      	ldr	r3, [pc, #96]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c34:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8010c38:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8010c3a:	4b16      	ldr	r3, [pc, #88]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c3c:	4a16      	ldr	r2, [pc, #88]	@ (8010c98 <BSP_SD_MspInit+0x1d4>)
 8010c3e:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	4a14      	ldr	r2, [pc, #80]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c44:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010c46:	4a13      	ldr	r2, [pc, #76]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8010c4c:	4811      	ldr	r0, [pc, #68]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c4e:	f7f2 fe75 	bl	800393c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8010c52:	4810      	ldr	r0, [pc, #64]	@ (8010c94 <BSP_SD_MspInit+0x1d0>)
 8010c54:	f7f2 fdc4 	bl	80037e0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8010c58:	2200      	movs	r2, #0
 8010c5a:	210f      	movs	r1, #15
 8010c5c:	203b      	movs	r0, #59	@ 0x3b
 8010c5e:	f7f2 fc29 	bl	80034b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8010c62:	203b      	movs	r0, #59	@ 0x3b
 8010c64:	f7f2 fc42 	bl	80034ec <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8010c68:	2200      	movs	r2, #0
 8010c6a:	210f      	movs	r1, #15
 8010c6c:	2045      	movs	r0, #69	@ 0x45
 8010c6e:	f7f2 fc21 	bl	80034b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8010c72:	2045      	movs	r0, #69	@ 0x45
 8010c74:	f7f2 fc3a 	bl	80034ec <HAL_NVIC_EnableIRQ>
}
 8010c78:	bf00      	nop
 8010c7a:	3730      	adds	r7, #48	@ 0x30
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	40023800 	.word	0x40023800
 8010c84:	40020800 	.word	0x40020800
 8010c88:	40020c00 	.word	0x40020c00
 8010c8c:	20000bbc 	.word	0x20000bbc
 8010c90:	40026458 	.word	0x40026458
 8010c94:	20000c1c 	.word	0x20000c1c
 8010c98:	400264a0 	.word	0x400264a0

08010c9c <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b088      	sub	sp, #32
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8010ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8010ce4 <BSP_SD_Detect_MspInit+0x48>)
 8010ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010caa:	4a0e      	ldr	r2, [pc, #56]	@ (8010ce4 <BSP_SD_Detect_MspInit+0x48>)
 8010cac:	f043 0304 	orr.w	r3, r3, #4
 8010cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8010cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8010ce4 <BSP_SD_Detect_MspInit+0x48>)
 8010cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cb6:	f003 0304 	and.w	r3, r3, #4
 8010cba:	60bb      	str	r3, [r7, #8]
 8010cbc:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8010cbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010cc2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010cc8:	2301      	movs	r3, #1
 8010cca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8010ccc:	2303      	movs	r3, #3
 8010cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8010cd0:	f107 030c 	add.w	r3, r7, #12
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	4804      	ldr	r0, [pc, #16]	@ (8010ce8 <BSP_SD_Detect_MspInit+0x4c>)
 8010cd8:	f7f3 fc7a 	bl	80045d0 <HAL_GPIO_Init>
}
 8010cdc:	bf00      	nop
 8010cde:	3720      	adds	r7, #32
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	40023800 	.word	0x40023800
 8010ce8:	40020800 	.word	0x40020800

08010cec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010cf0:	4805      	ldr	r0, [pc, #20]	@ (8010d08 <BSP_SD_GetCardState+0x1c>)
 8010cf2:	f7f9 fb21 	bl	800a338 <HAL_SD_GetCardState>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	2b04      	cmp	r3, #4
 8010cfa:	bf14      	ite	ne
 8010cfc:	2301      	movne	r3, #1
 8010cfe:	2300      	moveq	r3, #0
 8010d00:	b2db      	uxtb	r3, r3
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	bd80      	pop	{r7, pc}
 8010d06:	bf00      	nop
 8010d08:	20000b38 	.word	0x20000b38

08010d0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8010d14:	6879      	ldr	r1, [r7, #4]
 8010d16:	4803      	ldr	r0, [pc, #12]	@ (8010d24 <BSP_SD_GetCardInfo+0x18>)
 8010d18:	f7f9 fa48 	bl	800a1ac <HAL_SD_GetCardInfo>
}
 8010d1c:	bf00      	nop
 8010d1e:	3708      	adds	r7, #8
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	20000b38 	.word	0x20000b38

08010d28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	490e      	ldr	r1, [pc, #56]	@ (8010d68 <MX_USB_HOST_Init+0x40>)
 8010d30:	480e      	ldr	r0, [pc, #56]	@ (8010d6c <MX_USB_HOST_Init+0x44>)
 8010d32:	f7fe f8ed 	bl	800ef10 <USBH_Init>
 8010d36:	4603      	mov	r3, r0
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d001      	beq.n	8010d40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010d3c:	f7f0 fd28 	bl	8001790 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010d40:	490b      	ldr	r1, [pc, #44]	@ (8010d70 <MX_USB_HOST_Init+0x48>)
 8010d42:	480a      	ldr	r0, [pc, #40]	@ (8010d6c <MX_USB_HOST_Init+0x44>)
 8010d44:	f7fe f991 	bl	800f06a <USBH_RegisterClass>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010d4e:	f7f0 fd1f 	bl	8001790 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010d52:	4806      	ldr	r0, [pc, #24]	@ (8010d6c <MX_USB_HOST_Init+0x44>)
 8010d54:	f7fe fa15 	bl	800f182 <USBH_Start>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d001      	beq.n	8010d62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010d5e:	f7f0 fd17 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010d62:	bf00      	nop
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	08010d89 	.word	0x08010d89
 8010d6c:	20000c7c 	.word	0x20000c7c
 8010d70:	2000000c 	.word	0x2000000c

08010d74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010d78:	4802      	ldr	r0, [pc, #8]	@ (8010d84 <MX_USB_HOST_Process+0x10>)
 8010d7a:	f7fe fa13 	bl	800f1a4 <USBH_Process>
}
 8010d7e:	bf00      	nop
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop
 8010d84:	20000c7c 	.word	0x20000c7c

08010d88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	460b      	mov	r3, r1
 8010d92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010d94:	78fb      	ldrb	r3, [r7, #3]
 8010d96:	3b01      	subs	r3, #1
 8010d98:	2b04      	cmp	r3, #4
 8010d9a:	d819      	bhi.n	8010dd0 <USBH_UserProcess+0x48>
 8010d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8010da4 <USBH_UserProcess+0x1c>)
 8010d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da2:	bf00      	nop
 8010da4:	08010dd1 	.word	0x08010dd1
 8010da8:	08010dc1 	.word	0x08010dc1
 8010dac:	08010dd1 	.word	0x08010dd1
 8010db0:	08010dc9 	.word	0x08010dc9
 8010db4:	08010db9 	.word	0x08010db9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010db8:	4b09      	ldr	r3, [pc, #36]	@ (8010de0 <USBH_UserProcess+0x58>)
 8010dba:	2203      	movs	r2, #3
 8010dbc:	701a      	strb	r2, [r3, #0]
  break;
 8010dbe:	e008      	b.n	8010dd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010dc0:	4b07      	ldr	r3, [pc, #28]	@ (8010de0 <USBH_UserProcess+0x58>)
 8010dc2:	2202      	movs	r2, #2
 8010dc4:	701a      	strb	r2, [r3, #0]
  break;
 8010dc6:	e004      	b.n	8010dd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010dc8:	4b05      	ldr	r3, [pc, #20]	@ (8010de0 <USBH_UserProcess+0x58>)
 8010dca:	2201      	movs	r2, #1
 8010dcc:	701a      	strb	r2, [r3, #0]
  break;
 8010dce:	e000      	b.n	8010dd2 <USBH_UserProcess+0x4a>

  default:
  break;
 8010dd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010dd2:	bf00      	nop
 8010dd4:	370c      	adds	r7, #12
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	20001054 	.word	0x20001054

08010de4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b08a      	sub	sp, #40	@ 0x28
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010dec:	f107 0314 	add.w	r3, r7, #20
 8010df0:	2200      	movs	r2, #0
 8010df2:	601a      	str	r2, [r3, #0]
 8010df4:	605a      	str	r2, [r3, #4]
 8010df6:	609a      	str	r2, [r3, #8]
 8010df8:	60da      	str	r2, [r3, #12]
 8010dfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010e04:	d13c      	bne.n	8010e80 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e06:	4b20      	ldr	r3, [pc, #128]	@ (8010e88 <HAL_HCD_MspInit+0xa4>)
 8010e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8010e88 <HAL_HCD_MspInit+0xa4>)
 8010e0c:	f043 0301 	orr.w	r3, r3, #1
 8010e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8010e12:	4b1d      	ldr	r3, [pc, #116]	@ (8010e88 <HAL_HCD_MspInit+0xa4>)
 8010e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e16:	f003 0301 	and.w	r3, r3, #1
 8010e1a:	613b      	str	r3, [r7, #16]
 8010e1c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8010e1e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8010e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e24:	2302      	movs	r3, #2
 8010e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e2c:	2303      	movs	r3, #3
 8010e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010e30:	230a      	movs	r3, #10
 8010e32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e34:	f107 0314 	add.w	r3, r7, #20
 8010e38:	4619      	mov	r1, r3
 8010e3a:	4814      	ldr	r0, [pc, #80]	@ (8010e8c <HAL_HCD_MspInit+0xa8>)
 8010e3c:	f7f3 fbc8 	bl	80045d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010e40:	4b11      	ldr	r3, [pc, #68]	@ (8010e88 <HAL_HCD_MspInit+0xa4>)
 8010e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e44:	4a10      	ldr	r2, [pc, #64]	@ (8010e88 <HAL_HCD_MspInit+0xa4>)
 8010e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e4a:	6353      	str	r3, [r2, #52]	@ 0x34
 8010e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8010e88 <HAL_HCD_MspInit+0xa4>)
 8010e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e54:	60fb      	str	r3, [r7, #12]
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	4b0b      	ldr	r3, [pc, #44]	@ (8010e88 <HAL_HCD_MspInit+0xa4>)
 8010e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8010e88 <HAL_HCD_MspInit+0xa4>)
 8010e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010e62:	6453      	str	r3, [r2, #68]	@ 0x44
 8010e64:	4b08      	ldr	r3, [pc, #32]	@ (8010e88 <HAL_HCD_MspInit+0xa4>)
 8010e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010e6c:	60bb      	str	r3, [r7, #8]
 8010e6e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010e70:	2200      	movs	r2, #0
 8010e72:	2100      	movs	r1, #0
 8010e74:	2043      	movs	r0, #67	@ 0x43
 8010e76:	f7f2 fb1d 	bl	80034b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010e7a:	2043      	movs	r0, #67	@ 0x43
 8010e7c:	f7f2 fb36 	bl	80034ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010e80:	bf00      	nop
 8010e82:	3728      	adds	r7, #40	@ 0x28
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	40023800 	.word	0x40023800
 8010e8c:	40020000 	.word	0x40020000

08010e90 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fe fd57 	bl	800f952 <USBH_LL_IncTimer>
}
 8010ea4:	bf00      	nop
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7fe fd8f 	bl	800f9de <USBH_LL_Connect>
}
 8010ec0:	bf00      	nop
 8010ec2:	3708      	adds	r7, #8
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fe fd98 	bl	800fa0c <USBH_LL_Disconnect>
}
 8010edc:	bf00      	nop
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	460b      	mov	r3, r1
 8010eee:	70fb      	strb	r3, [r7, #3]
 8010ef0:	4613      	mov	r3, r2
 8010ef2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010ef4:	bf00      	nop
 8010ef6:	370c      	adds	r7, #12
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efe:	4770      	bx	lr

08010f00 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fe fd49 	bl	800f9a6 <USBH_LL_PortEnabled>
}
 8010f14:	bf00      	nop
 8010f16:	3708      	adds	r7, #8
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7fe fd49 	bl	800f9c2 <USBH_LL_PortDisabled>
}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d12a      	bne.n	8010fa0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010f4a:	4a18      	ldr	r2, [pc, #96]	@ (8010fac <USBH_LL_Init+0x74>)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	4a15      	ldr	r2, [pc, #84]	@ (8010fac <USBH_LL_Init+0x74>)
 8010f56:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010f5a:	4b14      	ldr	r3, [pc, #80]	@ (8010fac <USBH_LL_Init+0x74>)
 8010f5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8010f60:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010f62:	4b12      	ldr	r3, [pc, #72]	@ (8010fac <USBH_LL_Init+0x74>)
 8010f64:	2208      	movs	r2, #8
 8010f66:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010f68:	4b10      	ldr	r3, [pc, #64]	@ (8010fac <USBH_LL_Init+0x74>)
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8010fac <USBH_LL_Init+0x74>)
 8010f70:	2200      	movs	r2, #0
 8010f72:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010f74:	4b0d      	ldr	r3, [pc, #52]	@ (8010fac <USBH_LL_Init+0x74>)
 8010f76:	2202      	movs	r2, #2
 8010f78:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8010fac <USBH_LL_Init+0x74>)
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010f80:	480a      	ldr	r0, [pc, #40]	@ (8010fac <USBH_LL_Init+0x74>)
 8010f82:	f7f3 fd02 	bl	800498a <HAL_HCD_Init>
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d001      	beq.n	8010f90 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010f8c:	f7f0 fc00 	bl	8001790 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010f90:	4806      	ldr	r0, [pc, #24]	@ (8010fac <USBH_LL_Init+0x74>)
 8010f92:	f7f4 f963 	bl	800525c <HAL_HCD_GetCurrentFrame>
 8010f96:	4603      	mov	r3, r0
 8010f98:	4619      	mov	r1, r3
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f7fe fcca 	bl	800f934 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010fa0:	2300      	movs	r3, #0
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3708      	adds	r7, #8
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	20001058 	.word	0x20001058

08010fb0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7f4 f8d0 	bl	800516c <HAL_HCD_Start>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010fd0:	7bfb      	ldrb	r3, [r7, #15]
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f000 f95e 	bl	8011294 <USBH_Get_USB_Status>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3710      	adds	r7, #16
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}

08010fe6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b084      	sub	sp, #16
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7f4 f8d8 	bl	80051b2 <HAL_HCD_Stop>
 8011002:	4603      	mov	r3, r0
 8011004:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011006:	7bfb      	ldrb	r3, [r7, #15]
 8011008:	4618      	mov	r0, r3
 801100a:	f000 f943 	bl	8011294 <USBH_Get_USB_Status>
 801100e:	4603      	mov	r3, r0
 8011010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011012:	7bbb      	ldrb	r3, [r7, #14]
}
 8011014:	4618      	mov	r0, r3
 8011016:	3710      	adds	r7, #16
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011024:	2301      	movs	r3, #1
 8011026:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801102e:	4618      	mov	r0, r3
 8011030:	f7f4 f922 	bl	8005278 <HAL_HCD_GetCurrentSpeed>
 8011034:	4603      	mov	r3, r0
 8011036:	2b02      	cmp	r3, #2
 8011038:	d00c      	beq.n	8011054 <USBH_LL_GetSpeed+0x38>
 801103a:	2b02      	cmp	r3, #2
 801103c:	d80d      	bhi.n	801105a <USBH_LL_GetSpeed+0x3e>
 801103e:	2b00      	cmp	r3, #0
 8011040:	d002      	beq.n	8011048 <USBH_LL_GetSpeed+0x2c>
 8011042:	2b01      	cmp	r3, #1
 8011044:	d003      	beq.n	801104e <USBH_LL_GetSpeed+0x32>
 8011046:	e008      	b.n	801105a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011048:	2300      	movs	r3, #0
 801104a:	73fb      	strb	r3, [r7, #15]
    break;
 801104c:	e008      	b.n	8011060 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801104e:	2301      	movs	r3, #1
 8011050:	73fb      	strb	r3, [r7, #15]
    break;
 8011052:	e005      	b.n	8011060 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011054:	2302      	movs	r3, #2
 8011056:	73fb      	strb	r3, [r7, #15]
    break;
 8011058:	e002      	b.n	8011060 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801105a:	2301      	movs	r3, #1
 801105c:	73fb      	strb	r3, [r7, #15]
    break;
 801105e:	bf00      	nop
  }
  return  speed;
 8011060:	7bfb      	ldrb	r3, [r7, #15]
}
 8011062:	4618      	mov	r0, r3
 8011064:	3710      	adds	r7, #16
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}

0801106a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801106a:	b580      	push	{r7, lr}
 801106c:	b084      	sub	sp, #16
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011072:	2300      	movs	r3, #0
 8011074:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011076:	2300      	movs	r3, #0
 8011078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011080:	4618      	mov	r0, r3
 8011082:	f7f4 f8b3 	bl	80051ec <HAL_HCD_ResetPort>
 8011086:	4603      	mov	r3, r0
 8011088:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801108a:	7bfb      	ldrb	r3, [r7, #15]
 801108c:	4618      	mov	r0, r3
 801108e:	f000 f901 	bl	8011294 <USBH_Get_USB_Status>
 8011092:	4603      	mov	r3, r0
 8011094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011096:	7bbb      	ldrb	r3, [r7, #14]
}
 8011098:	4618      	mov	r0, r3
 801109a:	3710      	adds	r7, #16
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	460b      	mov	r3, r1
 80110aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80110b2:	78fa      	ldrb	r2, [r7, #3]
 80110b4:	4611      	mov	r1, r2
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7f4 f8bb 	bl	8005232 <HAL_HCD_HC_GetXferCount>
 80110bc:	4603      	mov	r3, r0
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3708      	adds	r7, #8
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}

080110c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80110c6:	b590      	push	{r4, r7, lr}
 80110c8:	b089      	sub	sp, #36	@ 0x24
 80110ca:	af04      	add	r7, sp, #16
 80110cc:	6078      	str	r0, [r7, #4]
 80110ce:	4608      	mov	r0, r1
 80110d0:	4611      	mov	r1, r2
 80110d2:	461a      	mov	r2, r3
 80110d4:	4603      	mov	r3, r0
 80110d6:	70fb      	strb	r3, [r7, #3]
 80110d8:	460b      	mov	r3, r1
 80110da:	70bb      	strb	r3, [r7, #2]
 80110dc:	4613      	mov	r3, r2
 80110de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110e0:	2300      	movs	r3, #0
 80110e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110e4:	2300      	movs	r3, #0
 80110e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80110ee:	787c      	ldrb	r4, [r7, #1]
 80110f0:	78ba      	ldrb	r2, [r7, #2]
 80110f2:	78f9      	ldrb	r1, [r7, #3]
 80110f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80110f6:	9302      	str	r3, [sp, #8]
 80110f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80110fc:	9301      	str	r3, [sp, #4]
 80110fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011102:	9300      	str	r3, [sp, #0]
 8011104:	4623      	mov	r3, r4
 8011106:	f7f3 fca7 	bl	8004a58 <HAL_HCD_HC_Init>
 801110a:	4603      	mov	r3, r0
 801110c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801110e:	7bfb      	ldrb	r3, [r7, #15]
 8011110:	4618      	mov	r0, r3
 8011112:	f000 f8bf 	bl	8011294 <USBH_Get_USB_Status>
 8011116:	4603      	mov	r3, r0
 8011118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801111a:	7bbb      	ldrb	r3, [r7, #14]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	bd90      	pop	{r4, r7, pc}

08011124 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	460b      	mov	r3, r1
 801112e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011130:	2300      	movs	r3, #0
 8011132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011134:	2300      	movs	r3, #0
 8011136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801113e:	78fa      	ldrb	r2, [r7, #3]
 8011140:	4611      	mov	r1, r2
 8011142:	4618      	mov	r0, r3
 8011144:	f7f3 fd40 	bl	8004bc8 <HAL_HCD_HC_Halt>
 8011148:	4603      	mov	r3, r0
 801114a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801114c:	7bfb      	ldrb	r3, [r7, #15]
 801114e:	4618      	mov	r0, r3
 8011150:	f000 f8a0 	bl	8011294 <USBH_Get_USB_Status>
 8011154:	4603      	mov	r3, r0
 8011156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011158:	7bbb      	ldrb	r3, [r7, #14]
}
 801115a:	4618      	mov	r0, r3
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}

08011162 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011162:	b590      	push	{r4, r7, lr}
 8011164:	b089      	sub	sp, #36	@ 0x24
 8011166:	af04      	add	r7, sp, #16
 8011168:	6078      	str	r0, [r7, #4]
 801116a:	4608      	mov	r0, r1
 801116c:	4611      	mov	r1, r2
 801116e:	461a      	mov	r2, r3
 8011170:	4603      	mov	r3, r0
 8011172:	70fb      	strb	r3, [r7, #3]
 8011174:	460b      	mov	r3, r1
 8011176:	70bb      	strb	r3, [r7, #2]
 8011178:	4613      	mov	r3, r2
 801117a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801117c:	2300      	movs	r3, #0
 801117e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011180:	2300      	movs	r3, #0
 8011182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801118a:	787c      	ldrb	r4, [r7, #1]
 801118c:	78ba      	ldrb	r2, [r7, #2]
 801118e:	78f9      	ldrb	r1, [r7, #3]
 8011190:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011194:	9303      	str	r3, [sp, #12]
 8011196:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011198:	9302      	str	r3, [sp, #8]
 801119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801119c:	9301      	str	r3, [sp, #4]
 801119e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80111a2:	9300      	str	r3, [sp, #0]
 80111a4:	4623      	mov	r3, r4
 80111a6:	f7f3 fd33 	bl	8004c10 <HAL_HCD_HC_SubmitRequest>
 80111aa:	4603      	mov	r3, r0
 80111ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80111ae:	7bfb      	ldrb	r3, [r7, #15]
 80111b0:	4618      	mov	r0, r3
 80111b2:	f000 f86f 	bl	8011294 <USBH_Get_USB_Status>
 80111b6:	4603      	mov	r3, r0
 80111b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3714      	adds	r7, #20
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd90      	pop	{r4, r7, pc}

080111c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	460b      	mov	r3, r1
 80111ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80111d6:	78fa      	ldrb	r2, [r7, #3]
 80111d8:	4611      	mov	r1, r2
 80111da:	4618      	mov	r0, r3
 80111dc:	f7f4 f814 	bl	8005208 <HAL_HCD_HC_GetURBState>
 80111e0:	4603      	mov	r3, r0
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3708      	adds	r7, #8
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}

080111ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80111ea:	b580      	push	{r7, lr}
 80111ec:	b082      	sub	sp, #8
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
 80111f2:	460b      	mov	r3, r1
 80111f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d103      	bne.n	8011208 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011200:	78fb      	ldrb	r3, [r7, #3]
 8011202:	4618      	mov	r0, r3
 8011204:	f000 f872 	bl	80112ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011208:	20c8      	movs	r0, #200	@ 0xc8
 801120a:	f7f1 fde3 	bl	8002dd4 <HAL_Delay>
  return USBH_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011218:	b480      	push	{r7}
 801121a:	b085      	sub	sp, #20
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	460b      	mov	r3, r1
 8011222:	70fb      	strb	r3, [r7, #3]
 8011224:	4613      	mov	r3, r2
 8011226:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801122e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011230:	78fa      	ldrb	r2, [r7, #3]
 8011232:	68f9      	ldr	r1, [r7, #12]
 8011234:	4613      	mov	r3, r2
 8011236:	011b      	lsls	r3, r3, #4
 8011238:	1a9b      	subs	r3, r3, r2
 801123a:	009b      	lsls	r3, r3, #2
 801123c:	440b      	add	r3, r1
 801123e:	3317      	adds	r3, #23
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00a      	beq.n	801125c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011246:	78fa      	ldrb	r2, [r7, #3]
 8011248:	68f9      	ldr	r1, [r7, #12]
 801124a:	4613      	mov	r3, r2
 801124c:	011b      	lsls	r3, r3, #4
 801124e:	1a9b      	subs	r3, r3, r2
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	440b      	add	r3, r1
 8011254:	333c      	adds	r3, #60	@ 0x3c
 8011256:	78ba      	ldrb	r2, [r7, #2]
 8011258:	701a      	strb	r2, [r3, #0]
 801125a:	e009      	b.n	8011270 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801125c:	78fa      	ldrb	r2, [r7, #3]
 801125e:	68f9      	ldr	r1, [r7, #12]
 8011260:	4613      	mov	r3, r2
 8011262:	011b      	lsls	r3, r3, #4
 8011264:	1a9b      	subs	r3, r3, r2
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	440b      	add	r3, r1
 801126a:	333d      	adds	r3, #61	@ 0x3d
 801126c:	78ba      	ldrb	r2, [r7, #2]
 801126e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011270:	2300      	movs	r3, #0
}
 8011272:	4618      	mov	r0, r3
 8011274:	3714      	adds	r7, #20
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr

0801127e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b082      	sub	sp, #8
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f7f1 fda4 	bl	8002dd4 <HAL_Delay>
}
 801128c:	bf00      	nop
 801128e:	3708      	adds	r7, #8
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011294:	b480      	push	{r7}
 8011296:	b085      	sub	sp, #20
 8011298:	af00      	add	r7, sp, #0
 801129a:	4603      	mov	r3, r0
 801129c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801129e:	2300      	movs	r3, #0
 80112a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80112a2:	79fb      	ldrb	r3, [r7, #7]
 80112a4:	2b03      	cmp	r3, #3
 80112a6:	d817      	bhi.n	80112d8 <USBH_Get_USB_Status+0x44>
 80112a8:	a201      	add	r2, pc, #4	@ (adr r2, 80112b0 <USBH_Get_USB_Status+0x1c>)
 80112aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ae:	bf00      	nop
 80112b0:	080112c1 	.word	0x080112c1
 80112b4:	080112c7 	.word	0x080112c7
 80112b8:	080112cd 	.word	0x080112cd
 80112bc:	080112d3 	.word	0x080112d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80112c0:	2300      	movs	r3, #0
 80112c2:	73fb      	strb	r3, [r7, #15]
    break;
 80112c4:	e00b      	b.n	80112de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80112c6:	2302      	movs	r3, #2
 80112c8:	73fb      	strb	r3, [r7, #15]
    break;
 80112ca:	e008      	b.n	80112de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80112cc:	2301      	movs	r3, #1
 80112ce:	73fb      	strb	r3, [r7, #15]
    break;
 80112d0:	e005      	b.n	80112de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80112d2:	2302      	movs	r3, #2
 80112d4:	73fb      	strb	r3, [r7, #15]
    break;
 80112d6:	e002      	b.n	80112de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80112d8:	2302      	movs	r3, #2
 80112da:	73fb      	strb	r3, [r7, #15]
    break;
 80112dc:	bf00      	nop
  }
  return usb_status;
 80112de:	7bfb      	ldrb	r3, [r7, #15]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3714      	adds	r7, #20
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	4603      	mov	r3, r0
 80112f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80112f6:	79fb      	ldrb	r3, [r7, #7]
 80112f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80112fa:	79fb      	ldrb	r3, [r7, #7]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d102      	bne.n	8011306 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011300:	2300      	movs	r3, #0
 8011302:	73fb      	strb	r3, [r7, #15]
 8011304:	e001      	b.n	801130a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8011306:	2301      	movs	r3, #1
 8011308:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801130a:	7bfb      	ldrb	r3, [r7, #15]
 801130c:	461a      	mov	r2, r3
 801130e:	2120      	movs	r1, #32
 8011310:	4803      	ldr	r0, [pc, #12]	@ (8011320 <MX_DriverVbusFS+0x34>)
 8011312:	f7f3 fb21 	bl	8004958 <HAL_GPIO_WritePin>
}
 8011316:	bf00      	nop
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	40020c00 	.word	0x40020c00

08011324 <malloc>:
 8011324:	4b02      	ldr	r3, [pc, #8]	@ (8011330 <malloc+0xc>)
 8011326:	4601      	mov	r1, r0
 8011328:	6818      	ldr	r0, [r3, #0]
 801132a:	f000 b82d 	b.w	8011388 <_malloc_r>
 801132e:	bf00      	nop
 8011330:	2000002c 	.word	0x2000002c

08011334 <free>:
 8011334:	4b02      	ldr	r3, [pc, #8]	@ (8011340 <free+0xc>)
 8011336:	4601      	mov	r1, r0
 8011338:	6818      	ldr	r0, [r3, #0]
 801133a:	f000 b8f5 	b.w	8011528 <_free_r>
 801133e:	bf00      	nop
 8011340:	2000002c 	.word	0x2000002c

08011344 <sbrk_aligned>:
 8011344:	b570      	push	{r4, r5, r6, lr}
 8011346:	4e0f      	ldr	r6, [pc, #60]	@ (8011384 <sbrk_aligned+0x40>)
 8011348:	460c      	mov	r4, r1
 801134a:	6831      	ldr	r1, [r6, #0]
 801134c:	4605      	mov	r5, r0
 801134e:	b911      	cbnz	r1, 8011356 <sbrk_aligned+0x12>
 8011350:	f000 f8ae 	bl	80114b0 <_sbrk_r>
 8011354:	6030      	str	r0, [r6, #0]
 8011356:	4621      	mov	r1, r4
 8011358:	4628      	mov	r0, r5
 801135a:	f000 f8a9 	bl	80114b0 <_sbrk_r>
 801135e:	1c43      	adds	r3, r0, #1
 8011360:	d103      	bne.n	801136a <sbrk_aligned+0x26>
 8011362:	f04f 34ff 	mov.w	r4, #4294967295
 8011366:	4620      	mov	r0, r4
 8011368:	bd70      	pop	{r4, r5, r6, pc}
 801136a:	1cc4      	adds	r4, r0, #3
 801136c:	f024 0403 	bic.w	r4, r4, #3
 8011370:	42a0      	cmp	r0, r4
 8011372:	d0f8      	beq.n	8011366 <sbrk_aligned+0x22>
 8011374:	1a21      	subs	r1, r4, r0
 8011376:	4628      	mov	r0, r5
 8011378:	f000 f89a 	bl	80114b0 <_sbrk_r>
 801137c:	3001      	adds	r0, #1
 801137e:	d1f2      	bne.n	8011366 <sbrk_aligned+0x22>
 8011380:	e7ef      	b.n	8011362 <sbrk_aligned+0x1e>
 8011382:	bf00      	nop
 8011384:	20001438 	.word	0x20001438

08011388 <_malloc_r>:
 8011388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801138c:	1ccd      	adds	r5, r1, #3
 801138e:	f025 0503 	bic.w	r5, r5, #3
 8011392:	3508      	adds	r5, #8
 8011394:	2d0c      	cmp	r5, #12
 8011396:	bf38      	it	cc
 8011398:	250c      	movcc	r5, #12
 801139a:	2d00      	cmp	r5, #0
 801139c:	4606      	mov	r6, r0
 801139e:	db01      	blt.n	80113a4 <_malloc_r+0x1c>
 80113a0:	42a9      	cmp	r1, r5
 80113a2:	d904      	bls.n	80113ae <_malloc_r+0x26>
 80113a4:	230c      	movs	r3, #12
 80113a6:	6033      	str	r3, [r6, #0]
 80113a8:	2000      	movs	r0, #0
 80113aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011484 <_malloc_r+0xfc>
 80113b2:	f000 f869 	bl	8011488 <__malloc_lock>
 80113b6:	f8d8 3000 	ldr.w	r3, [r8]
 80113ba:	461c      	mov	r4, r3
 80113bc:	bb44      	cbnz	r4, 8011410 <_malloc_r+0x88>
 80113be:	4629      	mov	r1, r5
 80113c0:	4630      	mov	r0, r6
 80113c2:	f7ff ffbf 	bl	8011344 <sbrk_aligned>
 80113c6:	1c43      	adds	r3, r0, #1
 80113c8:	4604      	mov	r4, r0
 80113ca:	d158      	bne.n	801147e <_malloc_r+0xf6>
 80113cc:	f8d8 4000 	ldr.w	r4, [r8]
 80113d0:	4627      	mov	r7, r4
 80113d2:	2f00      	cmp	r7, #0
 80113d4:	d143      	bne.n	801145e <_malloc_r+0xd6>
 80113d6:	2c00      	cmp	r4, #0
 80113d8:	d04b      	beq.n	8011472 <_malloc_r+0xea>
 80113da:	6823      	ldr	r3, [r4, #0]
 80113dc:	4639      	mov	r1, r7
 80113de:	4630      	mov	r0, r6
 80113e0:	eb04 0903 	add.w	r9, r4, r3
 80113e4:	f000 f864 	bl	80114b0 <_sbrk_r>
 80113e8:	4581      	cmp	r9, r0
 80113ea:	d142      	bne.n	8011472 <_malloc_r+0xea>
 80113ec:	6821      	ldr	r1, [r4, #0]
 80113ee:	1a6d      	subs	r5, r5, r1
 80113f0:	4629      	mov	r1, r5
 80113f2:	4630      	mov	r0, r6
 80113f4:	f7ff ffa6 	bl	8011344 <sbrk_aligned>
 80113f8:	3001      	adds	r0, #1
 80113fa:	d03a      	beq.n	8011472 <_malloc_r+0xea>
 80113fc:	6823      	ldr	r3, [r4, #0]
 80113fe:	442b      	add	r3, r5
 8011400:	6023      	str	r3, [r4, #0]
 8011402:	f8d8 3000 	ldr.w	r3, [r8]
 8011406:	685a      	ldr	r2, [r3, #4]
 8011408:	bb62      	cbnz	r2, 8011464 <_malloc_r+0xdc>
 801140a:	f8c8 7000 	str.w	r7, [r8]
 801140e:	e00f      	b.n	8011430 <_malloc_r+0xa8>
 8011410:	6822      	ldr	r2, [r4, #0]
 8011412:	1b52      	subs	r2, r2, r5
 8011414:	d420      	bmi.n	8011458 <_malloc_r+0xd0>
 8011416:	2a0b      	cmp	r2, #11
 8011418:	d917      	bls.n	801144a <_malloc_r+0xc2>
 801141a:	1961      	adds	r1, r4, r5
 801141c:	42a3      	cmp	r3, r4
 801141e:	6025      	str	r5, [r4, #0]
 8011420:	bf18      	it	ne
 8011422:	6059      	strne	r1, [r3, #4]
 8011424:	6863      	ldr	r3, [r4, #4]
 8011426:	bf08      	it	eq
 8011428:	f8c8 1000 	streq.w	r1, [r8]
 801142c:	5162      	str	r2, [r4, r5]
 801142e:	604b      	str	r3, [r1, #4]
 8011430:	4630      	mov	r0, r6
 8011432:	f000 f82f 	bl	8011494 <__malloc_unlock>
 8011436:	f104 000b 	add.w	r0, r4, #11
 801143a:	1d23      	adds	r3, r4, #4
 801143c:	f020 0007 	bic.w	r0, r0, #7
 8011440:	1ac2      	subs	r2, r0, r3
 8011442:	bf1c      	itt	ne
 8011444:	1a1b      	subne	r3, r3, r0
 8011446:	50a3      	strne	r3, [r4, r2]
 8011448:	e7af      	b.n	80113aa <_malloc_r+0x22>
 801144a:	6862      	ldr	r2, [r4, #4]
 801144c:	42a3      	cmp	r3, r4
 801144e:	bf0c      	ite	eq
 8011450:	f8c8 2000 	streq.w	r2, [r8]
 8011454:	605a      	strne	r2, [r3, #4]
 8011456:	e7eb      	b.n	8011430 <_malloc_r+0xa8>
 8011458:	4623      	mov	r3, r4
 801145a:	6864      	ldr	r4, [r4, #4]
 801145c:	e7ae      	b.n	80113bc <_malloc_r+0x34>
 801145e:	463c      	mov	r4, r7
 8011460:	687f      	ldr	r7, [r7, #4]
 8011462:	e7b6      	b.n	80113d2 <_malloc_r+0x4a>
 8011464:	461a      	mov	r2, r3
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	42a3      	cmp	r3, r4
 801146a:	d1fb      	bne.n	8011464 <_malloc_r+0xdc>
 801146c:	2300      	movs	r3, #0
 801146e:	6053      	str	r3, [r2, #4]
 8011470:	e7de      	b.n	8011430 <_malloc_r+0xa8>
 8011472:	230c      	movs	r3, #12
 8011474:	6033      	str	r3, [r6, #0]
 8011476:	4630      	mov	r0, r6
 8011478:	f000 f80c 	bl	8011494 <__malloc_unlock>
 801147c:	e794      	b.n	80113a8 <_malloc_r+0x20>
 801147e:	6005      	str	r5, [r0, #0]
 8011480:	e7d6      	b.n	8011430 <_malloc_r+0xa8>
 8011482:	bf00      	nop
 8011484:	2000143c 	.word	0x2000143c

08011488 <__malloc_lock>:
 8011488:	4801      	ldr	r0, [pc, #4]	@ (8011490 <__malloc_lock+0x8>)
 801148a:	f000 b84b 	b.w	8011524 <__retarget_lock_acquire_recursive>
 801148e:	bf00      	nop
 8011490:	2000157c 	.word	0x2000157c

08011494 <__malloc_unlock>:
 8011494:	4801      	ldr	r0, [pc, #4]	@ (801149c <__malloc_unlock+0x8>)
 8011496:	f000 b846 	b.w	8011526 <__retarget_lock_release_recursive>
 801149a:	bf00      	nop
 801149c:	2000157c 	.word	0x2000157c

080114a0 <memset>:
 80114a0:	4402      	add	r2, r0
 80114a2:	4603      	mov	r3, r0
 80114a4:	4293      	cmp	r3, r2
 80114a6:	d100      	bne.n	80114aa <memset+0xa>
 80114a8:	4770      	bx	lr
 80114aa:	f803 1b01 	strb.w	r1, [r3], #1
 80114ae:	e7f9      	b.n	80114a4 <memset+0x4>

080114b0 <_sbrk_r>:
 80114b0:	b538      	push	{r3, r4, r5, lr}
 80114b2:	4d06      	ldr	r5, [pc, #24]	@ (80114cc <_sbrk_r+0x1c>)
 80114b4:	2300      	movs	r3, #0
 80114b6:	4604      	mov	r4, r0
 80114b8:	4608      	mov	r0, r1
 80114ba:	602b      	str	r3, [r5, #0]
 80114bc:	f7f0 febc 	bl	8002238 <_sbrk>
 80114c0:	1c43      	adds	r3, r0, #1
 80114c2:	d102      	bne.n	80114ca <_sbrk_r+0x1a>
 80114c4:	682b      	ldr	r3, [r5, #0]
 80114c6:	b103      	cbz	r3, 80114ca <_sbrk_r+0x1a>
 80114c8:	6023      	str	r3, [r4, #0]
 80114ca:	bd38      	pop	{r3, r4, r5, pc}
 80114cc:	20001578 	.word	0x20001578

080114d0 <__errno>:
 80114d0:	4b01      	ldr	r3, [pc, #4]	@ (80114d8 <__errno+0x8>)
 80114d2:	6818      	ldr	r0, [r3, #0]
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	2000002c 	.word	0x2000002c

080114dc <__libc_init_array>:
 80114dc:	b570      	push	{r4, r5, r6, lr}
 80114de:	4d0d      	ldr	r5, [pc, #52]	@ (8011514 <__libc_init_array+0x38>)
 80114e0:	4c0d      	ldr	r4, [pc, #52]	@ (8011518 <__libc_init_array+0x3c>)
 80114e2:	1b64      	subs	r4, r4, r5
 80114e4:	10a4      	asrs	r4, r4, #2
 80114e6:	2600      	movs	r6, #0
 80114e8:	42a6      	cmp	r6, r4
 80114ea:	d109      	bne.n	8011500 <__libc_init_array+0x24>
 80114ec:	4d0b      	ldr	r5, [pc, #44]	@ (801151c <__libc_init_array+0x40>)
 80114ee:	4c0c      	ldr	r4, [pc, #48]	@ (8011520 <__libc_init_array+0x44>)
 80114f0:	f000 f864 	bl	80115bc <_init>
 80114f4:	1b64      	subs	r4, r4, r5
 80114f6:	10a4      	asrs	r4, r4, #2
 80114f8:	2600      	movs	r6, #0
 80114fa:	42a6      	cmp	r6, r4
 80114fc:	d105      	bne.n	801150a <__libc_init_array+0x2e>
 80114fe:	bd70      	pop	{r4, r5, r6, pc}
 8011500:	f855 3b04 	ldr.w	r3, [r5], #4
 8011504:	4798      	blx	r3
 8011506:	3601      	adds	r6, #1
 8011508:	e7ee      	b.n	80114e8 <__libc_init_array+0xc>
 801150a:	f855 3b04 	ldr.w	r3, [r5], #4
 801150e:	4798      	blx	r3
 8011510:	3601      	adds	r6, #1
 8011512:	e7f2      	b.n	80114fa <__libc_init_array+0x1e>
 8011514:	08011614 	.word	0x08011614
 8011518:	08011614 	.word	0x08011614
 801151c:	08011614 	.word	0x08011614
 8011520:	08011618 	.word	0x08011618

08011524 <__retarget_lock_acquire_recursive>:
 8011524:	4770      	bx	lr

08011526 <__retarget_lock_release_recursive>:
 8011526:	4770      	bx	lr

08011528 <_free_r>:
 8011528:	b538      	push	{r3, r4, r5, lr}
 801152a:	4605      	mov	r5, r0
 801152c:	2900      	cmp	r1, #0
 801152e:	d041      	beq.n	80115b4 <_free_r+0x8c>
 8011530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011534:	1f0c      	subs	r4, r1, #4
 8011536:	2b00      	cmp	r3, #0
 8011538:	bfb8      	it	lt
 801153a:	18e4      	addlt	r4, r4, r3
 801153c:	f7ff ffa4 	bl	8011488 <__malloc_lock>
 8011540:	4a1d      	ldr	r2, [pc, #116]	@ (80115b8 <_free_r+0x90>)
 8011542:	6813      	ldr	r3, [r2, #0]
 8011544:	b933      	cbnz	r3, 8011554 <_free_r+0x2c>
 8011546:	6063      	str	r3, [r4, #4]
 8011548:	6014      	str	r4, [r2, #0]
 801154a:	4628      	mov	r0, r5
 801154c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011550:	f7ff bfa0 	b.w	8011494 <__malloc_unlock>
 8011554:	42a3      	cmp	r3, r4
 8011556:	d908      	bls.n	801156a <_free_r+0x42>
 8011558:	6820      	ldr	r0, [r4, #0]
 801155a:	1821      	adds	r1, r4, r0
 801155c:	428b      	cmp	r3, r1
 801155e:	bf01      	itttt	eq
 8011560:	6819      	ldreq	r1, [r3, #0]
 8011562:	685b      	ldreq	r3, [r3, #4]
 8011564:	1809      	addeq	r1, r1, r0
 8011566:	6021      	streq	r1, [r4, #0]
 8011568:	e7ed      	b.n	8011546 <_free_r+0x1e>
 801156a:	461a      	mov	r2, r3
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	b10b      	cbz	r3, 8011574 <_free_r+0x4c>
 8011570:	42a3      	cmp	r3, r4
 8011572:	d9fa      	bls.n	801156a <_free_r+0x42>
 8011574:	6811      	ldr	r1, [r2, #0]
 8011576:	1850      	adds	r0, r2, r1
 8011578:	42a0      	cmp	r0, r4
 801157a:	d10b      	bne.n	8011594 <_free_r+0x6c>
 801157c:	6820      	ldr	r0, [r4, #0]
 801157e:	4401      	add	r1, r0
 8011580:	1850      	adds	r0, r2, r1
 8011582:	4283      	cmp	r3, r0
 8011584:	6011      	str	r1, [r2, #0]
 8011586:	d1e0      	bne.n	801154a <_free_r+0x22>
 8011588:	6818      	ldr	r0, [r3, #0]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	6053      	str	r3, [r2, #4]
 801158e:	4408      	add	r0, r1
 8011590:	6010      	str	r0, [r2, #0]
 8011592:	e7da      	b.n	801154a <_free_r+0x22>
 8011594:	d902      	bls.n	801159c <_free_r+0x74>
 8011596:	230c      	movs	r3, #12
 8011598:	602b      	str	r3, [r5, #0]
 801159a:	e7d6      	b.n	801154a <_free_r+0x22>
 801159c:	6820      	ldr	r0, [r4, #0]
 801159e:	1821      	adds	r1, r4, r0
 80115a0:	428b      	cmp	r3, r1
 80115a2:	bf04      	itt	eq
 80115a4:	6819      	ldreq	r1, [r3, #0]
 80115a6:	685b      	ldreq	r3, [r3, #4]
 80115a8:	6063      	str	r3, [r4, #4]
 80115aa:	bf04      	itt	eq
 80115ac:	1809      	addeq	r1, r1, r0
 80115ae:	6021      	streq	r1, [r4, #0]
 80115b0:	6054      	str	r4, [r2, #4]
 80115b2:	e7ca      	b.n	801154a <_free_r+0x22>
 80115b4:	bd38      	pop	{r3, r4, r5, pc}
 80115b6:	bf00      	nop
 80115b8:	2000143c 	.word	0x2000143c

080115bc <_init>:
 80115bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115be:	bf00      	nop
 80115c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115c2:	bc08      	pop	{r3}
 80115c4:	469e      	mov	lr, r3
 80115c6:	4770      	bx	lr

080115c8 <_fini>:
 80115c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ca:	bf00      	nop
 80115cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ce:	bc08      	pop	{r3}
 80115d0:	469e      	mov	lr, r3
 80115d2:	4770      	bx	lr
